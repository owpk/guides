/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecPresentationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecPresentation extends TableImpl<SecPresentationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_presentation</code>
     */
    public static final SecPresentation SEC_PRESENTATION = new SecPresentation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecPresentationRecord> getRecordType() {
        return SecPresentationRecord.class;
    }

    /**
     * The column <code>public.sec_presentation.id</code>.
     */
    public final TableField<SecPresentationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_presentation.create_ts</code>.
     */
    public final TableField<SecPresentationRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_presentation.created_by</code>.
     */
    public final TableField<SecPresentationRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_presentation.update_ts</code>.
     */
    public final TableField<SecPresentationRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_presentation.updated_by</code>.
     */
    public final TableField<SecPresentationRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_presentation.sys_tenant_id</code>.
     */
    public final TableField<SecPresentationRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_presentation.component</code>.
     */
    public final TableField<SecPresentationRecord, String> COMPONENT = createField(DSL.name("component"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.sec_presentation.name</code>.
     */
    public final TableField<SecPresentationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_presentation.xml</code>.
     */
    public final TableField<SecPresentationRecord, String> XML = createField(DSL.name("xml"), SQLDataType.VARCHAR(7000), this, "");

    /**
     * The column <code>public.sec_presentation.user_id</code>.
     */
    public final TableField<SecPresentationRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_presentation.is_auto_save</code>.
     */
    public final TableField<SecPresentationRecord, Boolean> IS_AUTO_SAVE = createField(DSL.name("is_auto_save"), SQLDataType.BOOLEAN, this, "");

    private SecPresentation(Name alias, Table<SecPresentationRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecPresentation(Name alias, Table<SecPresentationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_presentation</code> table reference
     */
    public SecPresentation(String alias) {
        this(DSL.name(alias), SEC_PRESENTATION);
    }

    /**
     * Create an aliased <code>public.sec_presentation</code> table reference
     */
    public SecPresentation(Name alias) {
        this(alias, SEC_PRESENTATION);
    }

    /**
     * Create a <code>public.sec_presentation</code> table reference
     */
    public SecPresentation() {
        this(DSL.name("sec_presentation"), null);
    }

    public <O extends Record> SecPresentation(Table<O> child, ForeignKey<O, SecPresentationRecord> key) {
        super(child, key, SEC_PRESENTATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_PRESENTATION_COMPONENT_USER);
    }

    @Override
    public UniqueKey<SecPresentationRecord> getPrimaryKey() {
        return Keys.SEC_PRESENTATION_PKEY;
    }

    @Override
    public List<ForeignKey<SecPresentationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_PRESENTATION__SEC_PRESENTATION_USER);
    }

    private transient SecUser _secUser;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SEC_PRESENTATION__SEC_PRESENTATION_USER);

        return _secUser;
    }

    @Override
    public SecPresentation as(String alias) {
        return new SecPresentation(DSL.name(alias), this);
    }

    @Override
    public SecPresentation as(Name alias) {
        return new SecPresentation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecPresentation rename(String name) {
        return new SecPresentation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecPresentation rename(Name name) {
        return new SecPresentation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, LocalDateTime, String, LocalDateTime, String, String, String, String, String, UUID, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
