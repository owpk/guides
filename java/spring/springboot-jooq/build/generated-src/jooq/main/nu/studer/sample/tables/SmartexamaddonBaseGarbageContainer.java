/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamaddonBaseGarbageContainerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseGarbageContainer extends TableImpl<SmartexamaddonBaseGarbageContainerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexamaddon_base_garbage_container</code>
     */
    public static final SmartexamaddonBaseGarbageContainer SMARTEXAMADDON_BASE_GARBAGE_CONTAINER = new SmartexamaddonBaseGarbageContainer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamaddonBaseGarbageContainerRecord> getRecordType() {
        return SmartexamaddonBaseGarbageContainerRecord.class;
    }

    /**
     * The column <code>public.smartexamaddon_base_garbage_container.id</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.version</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.create_ts</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.created_by</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.update_ts</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.updated_by</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.delete_ts</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.deleted_by</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.received</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.kafka_key</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.name</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.volume</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, Double> VOLUME = createField(DSL.name("volume"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.load_type</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, String> LOAD_TYPE = createField(DSL.name("load_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.max_cont_volume_float</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, Double> MAX_CONT_VOLUME_FLOAT = createField(DSL.name("max_cont_volume_float"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_garbage_container.volume_compressed</code>.
     */
    public final TableField<SmartexamaddonBaseGarbageContainerRecord, Double> VOLUME_COMPRESSED = createField(DSL.name("volume_compressed"), SQLDataType.DOUBLE, this, "");

    private SmartexamaddonBaseGarbageContainer(Name alias, Table<SmartexamaddonBaseGarbageContainerRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamaddonBaseGarbageContainer(Name alias, Table<SmartexamaddonBaseGarbageContainerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexamaddon_base_garbage_container</code> table reference
     */
    public SmartexamaddonBaseGarbageContainer(String alias) {
        this(DSL.name(alias), SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);
    }

    /**
     * Create an aliased
     * <code>public.smartexamaddon_base_garbage_container</code> table reference
     */
    public SmartexamaddonBaseGarbageContainer(Name alias) {
        this(alias, SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);
    }

    /**
     * Create a <code>public.smartexamaddon_base_garbage_container</code> table
     * reference
     */
    public SmartexamaddonBaseGarbageContainer() {
        this(DSL.name("smartexamaddon_base_garbage_container"), null);
    }

    public <O extends Record> SmartexamaddonBaseGarbageContainer(Table<O> child, ForeignKey<O, SmartexamaddonBaseGarbageContainerRecord> key) {
        super(child, key, SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAMADDON_BASE_GARBAGE_CONTAINER_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamaddonBaseGarbageContainerRecord> getPrimaryKey() {
        return Keys.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER_PKEY;
    }

    @Override
    public SmartexamaddonBaseGarbageContainer as(String alias) {
        return new SmartexamaddonBaseGarbageContainer(DSL.name(alias), this);
    }

    @Override
    public SmartexamaddonBaseGarbageContainer as(Name alias) {
        return new SmartexamaddonBaseGarbageContainer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseGarbageContainer rename(String name) {
        return new SmartexamaddonBaseGarbageContainer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseGarbageContainer rename(Name name) {
        return new SmartexamaddonBaseGarbageContainer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, Double, String, Double, Double> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
