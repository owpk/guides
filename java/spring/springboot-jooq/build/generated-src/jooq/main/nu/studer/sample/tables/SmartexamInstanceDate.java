/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamInstanceDateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamInstanceDate extends TableImpl<SmartexamInstanceDateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_instance_date</code>
     */
    public static final SmartexamInstanceDate SMARTEXAM_INSTANCE_DATE = new SmartexamInstanceDate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamInstanceDateRecord> getRecordType() {
        return SmartexamInstanceDateRecord.class;
    }

    /**
     * The column <code>public.smartexam_instance_date.id</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_instance_date.date_</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, LocalDate> DATE_ = createField(DSL.name("date_"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>public.smartexam_instance_date.amount_check_lists</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, Long> AMOUNT_CHECK_LISTS = createField(DSL.name("amount_check_lists"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.smartexam_instance_date.division_id</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_instance_date.amount_all_ts</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, Long> AMOUNT_ALL_TS = createField(DSL.name("amount_all_ts"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.smartexam_instance_date.amount_ts</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, Long> AMOUNT_TS = createField(DSL.name("amount_ts"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.smartexam_instance_date.amoint_ts_no_line</code>.
     */
    public final TableField<SmartexamInstanceDateRecord, Long> AMOINT_TS_NO_LINE = createField(DSL.name("amoint_ts_no_line"), SQLDataType.BIGINT, this, "");

    private SmartexamInstanceDate(Name alias, Table<SmartexamInstanceDateRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamInstanceDate(Name alias, Table<SmartexamInstanceDateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_instance_date</code> table
     * reference
     */
    public SmartexamInstanceDate(String alias) {
        this(DSL.name(alias), SMARTEXAM_INSTANCE_DATE);
    }

    /**
     * Create an aliased <code>public.smartexam_instance_date</code> table
     * reference
     */
    public SmartexamInstanceDate(Name alias) {
        this(alias, SMARTEXAM_INSTANCE_DATE);
    }

    /**
     * Create a <code>public.smartexam_instance_date</code> table reference
     */
    public SmartexamInstanceDate() {
        this(DSL.name("smartexam_instance_date"), null);
    }

    public <O extends Record> SmartexamInstanceDate(Table<O> child, ForeignKey<O, SmartexamInstanceDateRecord> key) {
        super(child, key, SMARTEXAM_INSTANCE_DATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_INSTANCE_DATE_ON_DIVISION);
    }

    @Override
    public UniqueKey<SmartexamInstanceDateRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_INSTANCE_DATE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamInstanceDateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_INSTANCE_DATE__FK_SMARTEXAM_INSTANCE_DATE_ON_DIVISION);
    }

    private transient SmartmonDivision _smartmonDivision;

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_INSTANCE_DATE__FK_SMARTEXAM_INSTANCE_DATE_ON_DIVISION);

        return _smartmonDivision;
    }

    @Override
    public SmartexamInstanceDate as(String alias) {
        return new SmartexamInstanceDate(DSL.name(alias), this);
    }

    @Override
    public SmartexamInstanceDate as(Name alias) {
        return new SmartexamInstanceDate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamInstanceDate rename(String name) {
        return new SmartexamInstanceDate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamInstanceDate rename(Name name) {
        return new SmartexamInstanceDate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, LocalDate, Long, UUID, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
