/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamDivisionAccessControlDivisionLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamDivisionAccessControlDivisionLink extends TableImpl<SmartexamDivisionAccessControlDivisionLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_division_access_control_division_link</code>
     */
    public static final SmartexamDivisionAccessControlDivisionLink SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK = new SmartexamDivisionAccessControlDivisionLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamDivisionAccessControlDivisionLinkRecord> getRecordType() {
        return SmartexamDivisionAccessControlDivisionLinkRecord.class;
    }

    /**
     * The column
     * <code>public.smartexam_division_access_control_division_link.division_access_control_id</code>.
     */
    public final TableField<SmartexamDivisionAccessControlDivisionLinkRecord, UUID> DIVISION_ACCESS_CONTROL_ID = createField(DSL.name("division_access_control_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_division_access_control_division_link.division_id</code>.
     */
    public final TableField<SmartexamDivisionAccessControlDivisionLinkRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamDivisionAccessControlDivisionLink(Name alias, Table<SmartexamDivisionAccessControlDivisionLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamDivisionAccessControlDivisionLink(Name alias, Table<SmartexamDivisionAccessControlDivisionLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexam_division_access_control_division_link</code> table
     * reference
     */
    public SmartexamDivisionAccessControlDivisionLink(String alias) {
        this(DSL.name(alias), SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK);
    }

    /**
     * Create an aliased
     * <code>public.smartexam_division_access_control_division_link</code> table
     * reference
     */
    public SmartexamDivisionAccessControlDivisionLink(Name alias) {
        this(alias, SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK);
    }

    /**
     * Create a
     * <code>public.smartexam_division_access_control_division_link</code> table
     * reference
     */
    public SmartexamDivisionAccessControlDivisionLink() {
        this(DSL.name("smartexam_division_access_control_division_link"), null);
    }

    public <O extends Record> SmartexamDivisionAccessControlDivisionLink(Table<O> child, ForeignKey<O, SmartexamDivisionAccessControlDivisionLinkRecord> key) {
        super(child, key, SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamDivisionAccessControlDivisionLinkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamDivisionAccessControlDivisionLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION_ACCESS_CONTROL, Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION);
    }

    private transient SmartexamDivisionAccessControl _smartexamDivisionAccessControl;
    private transient SmartmonDivision _smartmonDivision;

    public SmartexamDivisionAccessControl smartexamDivisionAccessControl() {
        if (_smartexamDivisionAccessControl == null)
            _smartexamDivisionAccessControl = new SmartexamDivisionAccessControl(this, Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION_ACCESS_CONTROL);

        return _smartexamDivisionAccessControl;
    }

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION);

        return _smartmonDivision;
    }

    @Override
    public SmartexamDivisionAccessControlDivisionLink as(String alias) {
        return new SmartexamDivisionAccessControlDivisionLink(DSL.name(alias), this);
    }

    @Override
    public SmartexamDivisionAccessControlDivisionLink as(Name alias) {
        return new SmartexamDivisionAccessControlDivisionLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamDivisionAccessControlDivisionLink rename(String name) {
        return new SmartexamDivisionAccessControlDivisionLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamDivisionAccessControlDivisionLink rename(Name name) {
        return new SmartexamDivisionAccessControlDivisionLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
