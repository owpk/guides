/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamRequirementsForSp;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRequirementsForSpRecord extends UpdatableRecordImpl<SmartexamRequirementsForSpRecord> implements Record20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Double, UUID, UUID, String, UUID, Double, Double, String, String, String, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.id</code>.
     */
    public SmartexamRequirementsForSpRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.version</code>.
     */
    public SmartexamRequirementsForSpRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.create_ts</code>.
     */
    public SmartexamRequirementsForSpRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.created_by</code>.
     */
    public SmartexamRequirementsForSpRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.update_ts</code>.
     */
    public SmartexamRequirementsForSpRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.updated_by</code>.
     */
    public SmartexamRequirementsForSpRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.delete_ts</code>.
     */
    public SmartexamRequirementsForSpRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.deleted_by</code>.
     */
    public SmartexamRequirementsForSpRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.quantity</code>.
     */
    public SmartexamRequirementsForSpRecord setQuantity(Double value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.quantity</code>.
     */
    public Double getQuantity() {
        return (Double) get(8);
    }

    /**
     * Setter for
     * <code>public.smartexam_requirements_for_sp.organization_id</code>.
     */
    public SmartexamRequirementsForSpRecord setOrganizationId(UUID value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_requirements_for_sp.organization_id</code>.
     */
    public UUID getOrganizationId() {
        return (UUID) get(9);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.division_id</code>.
     */
    public SmartexamRequirementsForSpRecord setDivisionId(UUID value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.division_id</code>.
     */
    public UUID getDivisionId() {
        return (UUID) get(10);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.urgency</code>.
     */
    public SmartexamRequirementsForSpRecord setUrgency(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.urgency</code>.
     */
    public String getUrgency() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.photo_id</code>.
     */
    public SmartexamRequirementsForSpRecord setPhotoId(UUID value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.photo_id</code>.
     */
    public UUID getPhotoId() {
        return (UUID) get(12);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.price</code>.
     */
    public SmartexamRequirementsForSpRecord setPrice(Double value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.price</code>.
     */
    public Double getPrice() {
        return (Double) get(13);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.sum_</code>.
     */
    public SmartexamRequirementsForSpRecord setSum_(Double value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.sum_</code>.
     */
    public Double getSum_() {
        return (Double) get(14);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.description</code>.
     */
    public SmartexamRequirementsForSpRecord setDescription(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.description</code>.
     */
    public String getDescription() {
        return (String) get(15);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.number_</code>.
     */
    public SmartexamRequirementsForSpRecord setNumber_(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.number_</code>.
     */
    public String getNumber_() {
        return (String) get(16);
    }

    /**
     * Setter for <code>public.smartexam_requirements_for_sp.status</code>.
     */
    public SmartexamRequirementsForSpRecord setStatus(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_requirements_for_sp.status</code>.
     */
    public String getStatus() {
        return (String) get(17);
    }

    /**
     * Setter for
     * <code>public.smartexam_requirements_for_sp.nomenclature_id</code>.
     */
    public SmartexamRequirementsForSpRecord setNomenclatureId(UUID value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_requirements_for_sp.nomenclature_id</code>.
     */
    public UUID getNomenclatureId() {
        return (UUID) get(18);
    }

    /**
     * Setter for
     * <code>public.smartexam_requirements_for_sp.repair_request_id</code>.
     */
    public SmartexamRequirementsForSpRecord setRepairRequestId(UUID value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_requirements_for_sp.repair_request_id</code>.
     */
    public UUID getRepairRequestId() {
        return (UUID) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Double, UUID, UUID, String, UUID, Double, Double, String, String, String, UUID, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Double, UUID, UUID, String, UUID, Double, Double, String, String, String, UUID, UUID> valuesRow() {
        return (Row20) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.DELETED_BY;
    }

    @Override
    public Field<Double> field9() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.QUANTITY;
    }

    @Override
    public Field<UUID> field10() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.ORGANIZATION_ID;
    }

    @Override
    public Field<UUID> field11() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.DIVISION_ID;
    }

    @Override
    public Field<String> field12() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.URGENCY;
    }

    @Override
    public Field<UUID> field13() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.PHOTO_ID;
    }

    @Override
    public Field<Double> field14() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.PRICE;
    }

    @Override
    public Field<Double> field15() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.SUM_;
    }

    @Override
    public Field<String> field16() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.DESCRIPTION;
    }

    @Override
    public Field<String> field17() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.NUMBER_;
    }

    @Override
    public Field<String> field18() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.STATUS;
    }

    @Override
    public Field<UUID> field19() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.NOMENCLATURE_ID;
    }

    @Override
    public Field<UUID> field20() {
        return SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.REPAIR_REQUEST_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public Double component9() {
        return getQuantity();
    }

    @Override
    public UUID component10() {
        return getOrganizationId();
    }

    @Override
    public UUID component11() {
        return getDivisionId();
    }

    @Override
    public String component12() {
        return getUrgency();
    }

    @Override
    public UUID component13() {
        return getPhotoId();
    }

    @Override
    public Double component14() {
        return getPrice();
    }

    @Override
    public Double component15() {
        return getSum_();
    }

    @Override
    public String component16() {
        return getDescription();
    }

    @Override
    public String component17() {
        return getNumber_();
    }

    @Override
    public String component18() {
        return getStatus();
    }

    @Override
    public UUID component19() {
        return getNomenclatureId();
    }

    @Override
    public UUID component20() {
        return getRepairRequestId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public Double value9() {
        return getQuantity();
    }

    @Override
    public UUID value10() {
        return getOrganizationId();
    }

    @Override
    public UUID value11() {
        return getDivisionId();
    }

    @Override
    public String value12() {
        return getUrgency();
    }

    @Override
    public UUID value13() {
        return getPhotoId();
    }

    @Override
    public Double value14() {
        return getPrice();
    }

    @Override
    public Double value15() {
        return getSum_();
    }

    @Override
    public String value16() {
        return getDescription();
    }

    @Override
    public String value17() {
        return getNumber_();
    }

    @Override
    public String value18() {
        return getStatus();
    }

    @Override
    public UUID value19() {
        return getNomenclatureId();
    }

    @Override
    public UUID value20() {
        return getRepairRequestId();
    }

    @Override
    public SmartexamRequirementsForSpRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value9(Double value) {
        setQuantity(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value10(UUID value) {
        setOrganizationId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value11(UUID value) {
        setDivisionId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value12(String value) {
        setUrgency(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value13(UUID value) {
        setPhotoId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value14(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value15(Double value) {
        setSum_(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value16(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value17(String value) {
        setNumber_(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value18(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value19(UUID value) {
        setNomenclatureId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord value20(UUID value) {
        setRepairRequestId(value);
        return this;
    }

    @Override
    public SmartexamRequirementsForSpRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, Double value9, UUID value10, UUID value11, String value12, UUID value13, Double value14, Double value15, String value16, String value17, String value18, UUID value19, UUID value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamRequirementsForSpRecord
     */
    public SmartexamRequirementsForSpRecord() {
        super(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP);
    }

    /**
     * Create a detached, initialised SmartexamRequirementsForSpRecord
     */
    public SmartexamRequirementsForSpRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, Double quantity, UUID organizationId, UUID divisionId, String urgency, UUID photoId, Double price, Double sum_, String description, String number_, String status, UUID nomenclatureId, UUID repairRequestId) {
        super(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setQuantity(quantity);
        setOrganizationId(organizationId);
        setDivisionId(divisionId);
        setUrgency(urgency);
        setPhotoId(photoId);
        setPrice(price);
        setSum_(sum_);
        setDescription(description);
        setNumber_(number_);
        setStatus(status);
        setNomenclatureId(nomenclatureId);
        setRepairRequestId(repairRequestId);
    }

    /**
     * Create a detached, initialised SmartexamRequirementsForSpRecord
     */
    public SmartexamRequirementsForSpRecord(nu.studer.sample.tables.pojos.SmartexamRequirementsForSp value) {
        super(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setQuantity(value.getQuantity());
            setOrganizationId(value.getOrganizationId());
            setDivisionId(value.getDivisionId());
            setUrgency(value.getUrgency());
            setPhotoId(value.getPhotoId());
            setPrice(value.getPrice());
            setSum_(value.getSum_());
            setDescription(value.getDescription());
            setNumber_(value.getNumber_());
            setStatus(value.getStatus());
            setNomenclatureId(value.getNomenclatureId());
            setRepairRequestId(value.getRepairRequestId());
        }
    }
}
