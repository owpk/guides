/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamNomenclatureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamNomenclature extends TableImpl<SmartexamNomenclatureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_nomenclature</code>
     */
    public static final SmartexamNomenclature SMARTEXAM_NOMENCLATURE = new SmartexamNomenclature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamNomenclatureRecord> getRecordType() {
        return SmartexamNomenclatureRecord.class;
    }

    /**
     * The column <code>public.smartexam_nomenclature.id</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.version</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.create_ts</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.created_by</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.update_ts</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.updated_by</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.delete_ts</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.deleted_by</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.name</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.article</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> ARTICLE = createField(DSL.name("article"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.smartexam_nomenclature.unit</code>.
     */
    public final TableField<SmartexamNomenclatureRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamNomenclature(Name alias, Table<SmartexamNomenclatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamNomenclature(Name alias, Table<SmartexamNomenclatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_nomenclature</code> table
     * reference
     */
    public SmartexamNomenclature(String alias) {
        this(DSL.name(alias), SMARTEXAM_NOMENCLATURE);
    }

    /**
     * Create an aliased <code>public.smartexam_nomenclature</code> table
     * reference
     */
    public SmartexamNomenclature(Name alias) {
        this(alias, SMARTEXAM_NOMENCLATURE);
    }

    /**
     * Create a <code>public.smartexam_nomenclature</code> table reference
     */
    public SmartexamNomenclature() {
        this(DSL.name("smartexam_nomenclature"), null);
    }

    public <O extends Record> SmartexamNomenclature(Table<O> child, ForeignKey<O, SmartexamNomenclatureRecord> key) {
        super(child, key, SMARTEXAM_NOMENCLATURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamNomenclatureRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_NOMENCLATURE_PKEY;
    }

    @Override
    public SmartexamNomenclature as(String alias) {
        return new SmartexamNomenclature(DSL.name(alias), this);
    }

    @Override
    public SmartexamNomenclature as(Name alias) {
        return new SmartexamNomenclature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamNomenclature rename(String name) {
        return new SmartexamNomenclature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamNomenclature rename(Name name) {
        return new SmartexamNomenclature(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
