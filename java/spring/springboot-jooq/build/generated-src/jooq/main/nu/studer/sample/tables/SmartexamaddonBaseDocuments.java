/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamaddonBaseDocumentsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseDocuments extends TableImpl<SmartexamaddonBaseDocumentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexamaddon_base_documents</code>
     */
    public static final SmartexamaddonBaseDocuments SMARTEXAMADDON_BASE_DOCUMENTS = new SmartexamaddonBaseDocuments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamaddonBaseDocumentsRecord> getRecordType() {
        return SmartexamaddonBaseDocumentsRecord.class;
    }

    /**
     * The column <code>public.smartexamaddon_base_documents.id</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.version</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.create_ts</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.created_by</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.update_ts</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.updated_by</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.delete_ts</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.deleted_by</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.received</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.kafka_key</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.name</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.full_name</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.series</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> SERIES = createField(DSL.name("series"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.number_</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> NUMBER_ = createField(DSL.name("number_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.issue_date</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, LocalDate> ISSUE_DATE = createField(DSL.name("issue_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.end_date</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.issued_by</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> ISSUED_BY = createField(DSL.name("issued_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.photo_link</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, String> PHOTO_LINK = createField(DSL.name("photo_link"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_documents.photo_id</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexamaddon_base_documents.base_transport_id</code>.
     */
    public final TableField<SmartexamaddonBaseDocumentsRecord, UUID> BASE_TRANSPORT_ID = createField(DSL.name("base_transport_id"), SQLDataType.UUID, this, "");

    private SmartexamaddonBaseDocuments(Name alias, Table<SmartexamaddonBaseDocumentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamaddonBaseDocuments(Name alias, Table<SmartexamaddonBaseDocumentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexamaddon_base_documents</code> table
     * reference
     */
    public SmartexamaddonBaseDocuments(String alias) {
        this(DSL.name(alias), SMARTEXAMADDON_BASE_DOCUMENTS);
    }

    /**
     * Create an aliased <code>public.smartexamaddon_base_documents</code> table
     * reference
     */
    public SmartexamaddonBaseDocuments(Name alias) {
        this(alias, SMARTEXAMADDON_BASE_DOCUMENTS);
    }

    /**
     * Create a <code>public.smartexamaddon_base_documents</code> table
     * reference
     */
    public SmartexamaddonBaseDocuments() {
        this(DSL.name("smartexamaddon_base_documents"), null);
    }

    public <O extends Record> SmartexamaddonBaseDocuments(Table<O> child, ForeignKey<O, SmartexamaddonBaseDocumentsRecord> key) {
        super(child, key, SMARTEXAMADDON_BASE_DOCUMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAMADDON_BASE_DOCUMENTS_ON_BASE_TRANSPORT, Indexes.IDX_SMARTEXAMADDON_BASE_DOCUMENTS_ON_PHOTO, Indexes.IDX_SMARTEXAMADDON_BASE_DOCUMENTS_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamaddonBaseDocumentsRecord> getPrimaryKey() {
        return Keys.SMARTEXAMADDON_BASE_DOCUMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamaddonBaseDocumentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_PHOTO, Keys.SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_BASE_TRANSPORT);
    }

    private transient SysFile _sysFile;
    private transient SmartexamaddonBaseTransport _smartexamaddonBaseTransport;

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_PHOTO);

        return _sysFile;
    }

    public SmartexamaddonBaseTransport smartexamaddonBaseTransport() {
        if (_smartexamaddonBaseTransport == null)
            _smartexamaddonBaseTransport = new SmartexamaddonBaseTransport(this, Keys.SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_BASE_TRANSPORT);

        return _smartexamaddonBaseTransport;
    }

    @Override
    public SmartexamaddonBaseDocuments as(String alias) {
        return new SmartexamaddonBaseDocuments(DSL.name(alias), this);
    }

    @Override
    public SmartexamaddonBaseDocuments as(Name alias) {
        return new SmartexamaddonBaseDocuments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseDocuments rename(String name) {
        return new SmartexamaddonBaseDocuments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseDocuments rename(Name name) {
        return new SmartexamaddonBaseDocuments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, String, LocalDate, LocalDate, String, String, UUID, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
