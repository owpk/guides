/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.CompanyaddonBaseEmployeeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyaddonBaseEmployee extends TableImpl<CompanyaddonBaseEmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.companyaddon_base_employee</code>
     */
    public static final CompanyaddonBaseEmployee COMPANYADDON_BASE_EMPLOYEE = new CompanyaddonBaseEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyaddonBaseEmployeeRecord> getRecordType() {
        return CompanyaddonBaseEmployeeRecord.class;
    }

    /**
     * The column <code>public.companyaddon_base_employee.id</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.version</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.create_ts</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.created_by</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.update_ts</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.updated_by</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.delete_ts</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.deleted_by</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.received</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.companyaddon_base_employee.kafka_key</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.last_name</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.name</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.middle_name</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.full_name</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.user_id</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.companyaddon_base_employee.is_active</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.companyaddon_base_employee.date_of_birth</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>public.companyaddon_base_employee.personnel_number</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> PERSONNEL_NUMBER = createField(DSL.name("personnel_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_employee.is_shift_work</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, Boolean> IS_SHIFT_WORK = createField(DSL.name("is_shift_work"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.companyaddon_base_employee.comment_</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, String> COMMENT_ = createField(DSL.name("comment_"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.companyaddon_base_employee.contacts_id</code>.
     */
    public final TableField<CompanyaddonBaseEmployeeRecord, UUID> CONTACTS_ID = createField(DSL.name("contacts_id"), SQLDataType.UUID, this, "");

    private CompanyaddonBaseEmployee(Name alias, Table<CompanyaddonBaseEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyaddonBaseEmployee(Name alias, Table<CompanyaddonBaseEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.companyaddon_base_employee</code> table
     * reference
     */
    public CompanyaddonBaseEmployee(String alias) {
        this(DSL.name(alias), COMPANYADDON_BASE_EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.companyaddon_base_employee</code> table
     * reference
     */
    public CompanyaddonBaseEmployee(Name alias) {
        this(alias, COMPANYADDON_BASE_EMPLOYEE);
    }

    /**
     * Create a <code>public.companyaddon_base_employee</code> table reference
     */
    public CompanyaddonBaseEmployee() {
        this(DSL.name("companyaddon_base_employee"), null);
    }

    public <O extends Record> CompanyaddonBaseEmployee(Table<O> child, ForeignKey<O, CompanyaddonBaseEmployeeRecord> key) {
        super(child, key, COMPANYADDON_BASE_EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_COMPANYADDON_BASE_EMPLOYEE_ON_CONTACTS, Indexes.IDX_COMPANYADDON_BASE_EMPLOYEE_ON_USER, Indexes.IDX_COMPANYADDON_BASE_EMPLOYEE_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<CompanyaddonBaseEmployeeRecord> getPrimaryKey() {
        return Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY;
    }

    @Override
    public List<ForeignKey<CompanyaddonBaseEmployeeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_USER, Keys.COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_CONTACTS);
    }

    private transient SecUser _secUser;
    private transient CompanyaddonBaseContact _companyaddonBaseContact;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_USER);

        return _secUser;
    }

    public CompanyaddonBaseContact companyaddonBaseContact() {
        if (_companyaddonBaseContact == null)
            _companyaddonBaseContact = new CompanyaddonBaseContact(this, Keys.COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_CONTACTS);

        return _companyaddonBaseContact;
    }

    @Override
    public CompanyaddonBaseEmployee as(String alias) {
        return new CompanyaddonBaseEmployee(DSL.name(alias), this);
    }

    @Override
    public CompanyaddonBaseEmployee as(Name alias) {
        return new CompanyaddonBaseEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseEmployee rename(String name) {
        return new CompanyaddonBaseEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseEmployee rename(Name name) {
        return new CompanyaddonBaseEmployee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, String, UUID, Boolean, LocalDate, String, Boolean, String, UUID> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
