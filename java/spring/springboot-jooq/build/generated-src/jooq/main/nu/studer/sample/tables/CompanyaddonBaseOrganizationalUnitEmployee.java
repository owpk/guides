/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.CompanyaddonBaseOrganizationalUnitEmployeeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyaddonBaseOrganizationalUnitEmployee extends TableImpl<CompanyaddonBaseOrganizationalUnitEmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.companyaddon_base_organizational_unit_employee</code>
     */
    public static final CompanyaddonBaseOrganizationalUnitEmployee COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE = new CompanyaddonBaseOrganizationalUnitEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyaddonBaseOrganizationalUnitEmployeeRecord> getRecordType() {
        return CompanyaddonBaseOrganizationalUnitEmployeeRecord.class;
    }

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.id</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.version</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.create_ts</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.created_by</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.update_ts</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.updated_by</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.delete_ts</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.deleted_by</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.received</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.kafka_key</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.organizational_unit</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, UUID> ORGANIZATIONAL_UNIT = createField(DSL.name("organizational_unit"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_organizational_unit_employee.employee</code>.
     */
    public final TableField<CompanyaddonBaseOrganizationalUnitEmployeeRecord, UUID> EMPLOYEE = createField(DSL.name("employee"), SQLDataType.UUID.nullable(false), this, "");

    private CompanyaddonBaseOrganizationalUnitEmployee(Name alias, Table<CompanyaddonBaseOrganizationalUnitEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyaddonBaseOrganizationalUnitEmployee(Name alias, Table<CompanyaddonBaseOrganizationalUnitEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.companyaddon_base_organizational_unit_employee</code> table
     * reference
     */
    public CompanyaddonBaseOrganizationalUnitEmployee(String alias) {
        this(DSL.name(alias), COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE);
    }

    /**
     * Create an aliased
     * <code>public.companyaddon_base_organizational_unit_employee</code> table
     * reference
     */
    public CompanyaddonBaseOrganizationalUnitEmployee(Name alias) {
        this(alias, COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE);
    }

    /**
     * Create a
     * <code>public.companyaddon_base_organizational_unit_employee</code> table
     * reference
     */
    public CompanyaddonBaseOrganizationalUnitEmployee() {
        this(DSL.name("companyaddon_base_organizational_unit_employee"), null);
    }

    public <O extends Record> CompanyaddonBaseOrganizationalUnitEmployee(Table<O> child, ForeignKey<O, CompanyaddonBaseOrganizationalUnitEmployeeRecord> key) {
        super(child, key, COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_ON_EMPLOYEE, Indexes.IDX_COMPANYADDON_BASEORGANIUNITEMPLOY_ON_ORGANIZATIONAL_UNIT, Indexes.IDX_COMPANYADDON_BASEORGANIUNITEMPLOY_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<CompanyaddonBaseOrganizationalUnitEmployeeRecord> getPrimaryKey() {
        return Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_PKEY;
    }

    @Override
    public List<ForeignKey<CompanyaddonBaseOrganizationalUnitEmployeeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASEORGANIUNITEMPLOY_ON_ORGANIZATIONAL_UNIT, Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_ON_EMPLOYEE);
    }

    private transient CompanyaddonBaseOrganizationalUnit _companyaddonBaseOrganizationalUnit;
    private transient CompanyaddonBaseEmployee _companyaddonBaseEmployee;

    public CompanyaddonBaseOrganizationalUnit companyaddonBaseOrganizationalUnit() {
        if (_companyaddonBaseOrganizationalUnit == null)
            _companyaddonBaseOrganizationalUnit = new CompanyaddonBaseOrganizationalUnit(this, Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASEORGANIUNITEMPLOY_ON_ORGANIZATIONAL_UNIT);

        return _companyaddonBaseOrganizationalUnit;
    }

    public CompanyaddonBaseEmployee companyaddonBaseEmployee() {
        if (_companyaddonBaseEmployee == null)
            _companyaddonBaseEmployee = new CompanyaddonBaseEmployee(this, Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_ON_EMPLOYEE);

        return _companyaddonBaseEmployee;
    }

    @Override
    public CompanyaddonBaseOrganizationalUnitEmployee as(String alias) {
        return new CompanyaddonBaseOrganizationalUnitEmployee(DSL.name(alias), this);
    }

    @Override
    public CompanyaddonBaseOrganizationalUnitEmployee as(Name alias) {
        return new CompanyaddonBaseOrganizationalUnitEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseOrganizationalUnitEmployee rename(String name) {
        return new CompanyaddonBaseOrganizationalUnitEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseOrganizationalUnitEmployee rename(Name name) {
        return new CompanyaddonBaseOrganizationalUnitEmployee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, UUID, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
