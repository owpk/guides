/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamPlan;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamPlanRecord extends UpdatableRecordImpl<SmartexamPlanRecord> implements Record20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, LocalDateTime, LocalDateTime, Boolean, LocalDateTime, LocalDateTime, UUID, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_plan.id</code>.
     */
    public SmartexamPlanRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_plan.version</code>.
     */
    public SmartexamPlanRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_plan.create_ts</code>.
     */
    public SmartexamPlanRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexam_plan.created_by</code>.
     */
    public SmartexamPlanRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_plan.update_ts</code>.
     */
    public SmartexamPlanRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexam_plan.updated_by</code>.
     */
    public SmartexamPlanRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_plan.delete_ts</code>.
     */
    public SmartexamPlanRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexam_plan.deleted_by</code>.
     */
    public SmartexamPlanRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_plan.employee_id</code>.
     */
    public SmartexamPlanRecord setEmployeeId(UUID value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.employee_id</code>.
     */
    public UUID getEmployeeId() {
        return (UUID) get(8);
    }

    /**
     * Setter for <code>public.smartexam_plan.archive</code>.
     */
    public SmartexamPlanRecord setArchive(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.archive</code>.
     */
    public Boolean getArchive() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.smartexam_plan.repair_block_id</code>.
     */
    public SmartexamPlanRecord setRepairBlockId(UUID value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.repair_block_id</code>.
     */
    public UUID getRepairBlockId() {
        return (UUID) get(10);
    }

    /**
     * Setter for <code>public.smartexam_plan.actual_date_time_start</code>.
     */
    public SmartexamPlanRecord setActualDateTimeStart(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.actual_date_time_start</code>.
     */
    public LocalDateTime getActualDateTimeStart() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>public.smartexam_plan.actual_date_time_end</code>.
     */
    public SmartexamPlanRecord setActualDateTimeEnd(LocalDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.actual_date_time_end</code>.
     */
    public LocalDateTime getActualDateTimeEnd() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>public.smartexam_plan.rem_block_need</code>.
     */
    public SmartexamPlanRecord setRemBlockNeed(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.rem_block_need</code>.
     */
    public Boolean getRemBlockNeed() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>public.smartexam_plan.date_start</code>.
     */
    public SmartexamPlanRecord setDateStart(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.date_start</code>.
     */
    public LocalDateTime getDateStart() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>public.smartexam_plan.date_end</code>.
     */
    public SmartexamPlanRecord setDateEnd(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.date_end</code>.
     */
    public LocalDateTime getDateEnd() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>public.smartexam_plan.check_list_work_id</code>.
     */
    public SmartexamPlanRecord setCheckListWorkId(UUID value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.check_list_work_id</code>.
     */
    public UUID getCheckListWorkId() {
        return (UUID) get(16);
    }

    /**
     * Setter for <code>public.smartexam_plan.status</code>.
     */
    public SmartexamPlanRecord setStatus(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.status</code>.
     */
    public String getStatus() {
        return (String) get(17);
    }

    /**
     * Setter for <code>public.smartexam_plan.comment_</code>.
     */
    public SmartexamPlanRecord setComment_(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.comment_</code>.
     */
    public String getComment_() {
        return (String) get(18);
    }

    /**
     * Setter for <code>public.smartexam_plan.transport_id</code>.
     */
    public SmartexamPlanRecord setTransportId(UUID value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_plan.transport_id</code>.
     */
    public UUID getTransportId() {
        return (UUID) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, LocalDateTime, LocalDateTime, Boolean, LocalDateTime, LocalDateTime, UUID, String, String, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, LocalDateTime, LocalDateTime, Boolean, LocalDateTime, LocalDateTime, UUID, String, String, UUID> valuesRow() {
        return (Row20) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamPlan.SMARTEXAM_PLAN.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamPlan.SMARTEXAM_PLAN.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamPlan.SMARTEXAM_PLAN.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamPlan.SMARTEXAM_PLAN.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamPlan.SMARTEXAM_PLAN.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamPlan.SMARTEXAM_PLAN.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamPlan.SMARTEXAM_PLAN.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamPlan.SMARTEXAM_PLAN.DELETED_BY;
    }

    @Override
    public Field<UUID> field9() {
        return SmartexamPlan.SMARTEXAM_PLAN.EMPLOYEE_ID;
    }

    @Override
    public Field<Boolean> field10() {
        return SmartexamPlan.SMARTEXAM_PLAN.ARCHIVE;
    }

    @Override
    public Field<UUID> field11() {
        return SmartexamPlan.SMARTEXAM_PLAN.REPAIR_BLOCK_ID;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return SmartexamPlan.SMARTEXAM_PLAN.ACTUAL_DATE_TIME_START;
    }

    @Override
    public Field<LocalDateTime> field13() {
        return SmartexamPlan.SMARTEXAM_PLAN.ACTUAL_DATE_TIME_END;
    }

    @Override
    public Field<Boolean> field14() {
        return SmartexamPlan.SMARTEXAM_PLAN.REM_BLOCK_NEED;
    }

    @Override
    public Field<LocalDateTime> field15() {
        return SmartexamPlan.SMARTEXAM_PLAN.DATE_START;
    }

    @Override
    public Field<LocalDateTime> field16() {
        return SmartexamPlan.SMARTEXAM_PLAN.DATE_END;
    }

    @Override
    public Field<UUID> field17() {
        return SmartexamPlan.SMARTEXAM_PLAN.CHECK_LIST_WORK_ID;
    }

    @Override
    public Field<String> field18() {
        return SmartexamPlan.SMARTEXAM_PLAN.STATUS;
    }

    @Override
    public Field<String> field19() {
        return SmartexamPlan.SMARTEXAM_PLAN.COMMENT_;
    }

    @Override
    public Field<UUID> field20() {
        return SmartexamPlan.SMARTEXAM_PLAN.TRANSPORT_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public UUID component9() {
        return getEmployeeId();
    }

    @Override
    public Boolean component10() {
        return getArchive();
    }

    @Override
    public UUID component11() {
        return getRepairBlockId();
    }

    @Override
    public LocalDateTime component12() {
        return getActualDateTimeStart();
    }

    @Override
    public LocalDateTime component13() {
        return getActualDateTimeEnd();
    }

    @Override
    public Boolean component14() {
        return getRemBlockNeed();
    }

    @Override
    public LocalDateTime component15() {
        return getDateStart();
    }

    @Override
    public LocalDateTime component16() {
        return getDateEnd();
    }

    @Override
    public UUID component17() {
        return getCheckListWorkId();
    }

    @Override
    public String component18() {
        return getStatus();
    }

    @Override
    public String component19() {
        return getComment_();
    }

    @Override
    public UUID component20() {
        return getTransportId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public UUID value9() {
        return getEmployeeId();
    }

    @Override
    public Boolean value10() {
        return getArchive();
    }

    @Override
    public UUID value11() {
        return getRepairBlockId();
    }

    @Override
    public LocalDateTime value12() {
        return getActualDateTimeStart();
    }

    @Override
    public LocalDateTime value13() {
        return getActualDateTimeEnd();
    }

    @Override
    public Boolean value14() {
        return getRemBlockNeed();
    }

    @Override
    public LocalDateTime value15() {
        return getDateStart();
    }

    @Override
    public LocalDateTime value16() {
        return getDateEnd();
    }

    @Override
    public UUID value17() {
        return getCheckListWorkId();
    }

    @Override
    public String value18() {
        return getStatus();
    }

    @Override
    public String value19() {
        return getComment_();
    }

    @Override
    public UUID value20() {
        return getTransportId();
    }

    @Override
    public SmartexamPlanRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value9(UUID value) {
        setEmployeeId(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value10(Boolean value) {
        setArchive(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value11(UUID value) {
        setRepairBlockId(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value12(LocalDateTime value) {
        setActualDateTimeStart(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value13(LocalDateTime value) {
        setActualDateTimeEnd(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value14(Boolean value) {
        setRemBlockNeed(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value15(LocalDateTime value) {
        setDateStart(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value16(LocalDateTime value) {
        setDateEnd(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value17(UUID value) {
        setCheckListWorkId(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value18(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value19(String value) {
        setComment_(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord value20(UUID value) {
        setTransportId(value);
        return this;
    }

    @Override
    public SmartexamPlanRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, UUID value9, Boolean value10, UUID value11, LocalDateTime value12, LocalDateTime value13, Boolean value14, LocalDateTime value15, LocalDateTime value16, UUID value17, String value18, String value19, UUID value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamPlanRecord
     */
    public SmartexamPlanRecord() {
        super(SmartexamPlan.SMARTEXAM_PLAN);
    }

    /**
     * Create a detached, initialised SmartexamPlanRecord
     */
    public SmartexamPlanRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, UUID employeeId, Boolean archive, UUID repairBlockId, LocalDateTime actualDateTimeStart, LocalDateTime actualDateTimeEnd, Boolean remBlockNeed, LocalDateTime dateStart, LocalDateTime dateEnd, UUID checkListWorkId, String status, String comment_, UUID transportId) {
        super(SmartexamPlan.SMARTEXAM_PLAN);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setEmployeeId(employeeId);
        setArchive(archive);
        setRepairBlockId(repairBlockId);
        setActualDateTimeStart(actualDateTimeStart);
        setActualDateTimeEnd(actualDateTimeEnd);
        setRemBlockNeed(remBlockNeed);
        setDateStart(dateStart);
        setDateEnd(dateEnd);
        setCheckListWorkId(checkListWorkId);
        setStatus(status);
        setComment_(comment_);
        setTransportId(transportId);
    }

    /**
     * Create a detached, initialised SmartexamPlanRecord
     */
    public SmartexamPlanRecord(nu.studer.sample.tables.pojos.SmartexamPlan value) {
        super(SmartexamPlan.SMARTEXAM_PLAN);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setEmployeeId(value.getEmployeeId());
            setArchive(value.getArchive());
            setRepairBlockId(value.getRepairBlockId());
            setActualDateTimeStart(value.getActualDateTimeStart());
            setActualDateTimeEnd(value.getActualDateTimeEnd());
            setRemBlockNeed(value.getRemBlockNeed());
            setDateStart(value.getDateStart());
            setDateEnd(value.getDateEnd());
            setCheckListWorkId(value.getCheckListWorkId());
            setStatus(value.getStatus());
            setComment_(value.getComment_());
            setTransportId(value.getTransportId());
        }
    }
}
