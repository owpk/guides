/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysFtsQueueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysFtsQueue extends TableImpl<SysFtsQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_fts_queue</code>
     */
    public static final SysFtsQueue SYS_FTS_QUEUE = new SysFtsQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysFtsQueueRecord> getRecordType() {
        return SysFtsQueueRecord.class;
    }

    /**
     * The column <code>public.sys_fts_queue.id</code>.
     */
    public final TableField<SysFtsQueueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_fts_queue.create_ts</code>.
     */
    public final TableField<SysFtsQueueRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_fts_queue.created_by</code>.
     */
    public final TableField<SysFtsQueueRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_fts_queue.entity_id</code>.
     */
    public final TableField<SysFtsQueueRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sys_fts_queue.string_entity_id</code>.
     */
    public final TableField<SysFtsQueueRecord, String> STRING_ENTITY_ID = createField(DSL.name("string_entity_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_fts_queue.int_entity_id</code>.
     */
    public final TableField<SysFtsQueueRecord, Integer> INT_ENTITY_ID = createField(DSL.name("int_entity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sys_fts_queue.long_entity_id</code>.
     */
    public final TableField<SysFtsQueueRecord, Long> LONG_ENTITY_ID = createField(DSL.name("long_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sys_fts_queue.entity_name</code>.
     */
    public final TableField<SysFtsQueueRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.sys_fts_queue.change_type</code>.
     */
    public final TableField<SysFtsQueueRecord, String> CHANGE_TYPE = createField(DSL.name("change_type"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.sys_fts_queue.source_host</code>.
     */
    public final TableField<SysFtsQueueRecord, String> SOURCE_HOST = createField(DSL.name("source_host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_fts_queue.indexing_host</code>.
     */
    public final TableField<SysFtsQueueRecord, String> INDEXING_HOST = createField(DSL.name("indexing_host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_fts_queue.fake</code>.
     */
    public final TableField<SysFtsQueueRecord, Boolean> FAKE = createField(DSL.name("fake"), SQLDataType.BOOLEAN, this, "");

    private SysFtsQueue(Name alias, Table<SysFtsQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysFtsQueue(Name alias, Table<SysFtsQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_fts_queue</code> table reference
     */
    public SysFtsQueue(String alias) {
        this(DSL.name(alias), SYS_FTS_QUEUE);
    }

    /**
     * Create an aliased <code>public.sys_fts_queue</code> table reference
     */
    public SysFtsQueue(Name alias) {
        this(alias, SYS_FTS_QUEUE);
    }

    /**
     * Create a <code>public.sys_fts_queue</code> table reference
     */
    public SysFtsQueue() {
        this(DSL.name("sys_fts_queue"), null);
    }

    public <O extends Record> SysFtsQueue(Table<O> child, ForeignKey<O, SysFtsQueueRecord> key) {
        super(child, key, SYS_FTS_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SYS_FTS_QUEUE_IDXHOST_CRTS);
    }

    @Override
    public UniqueKey<SysFtsQueueRecord> getPrimaryKey() {
        return Keys.SYS_FTS_QUEUE_PKEY;
    }

    @Override
    public SysFtsQueue as(String alias) {
        return new SysFtsQueue(DSL.name(alias), this);
    }

    @Override
    public SysFtsQueue as(Name alias) {
        return new SysFtsQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysFtsQueue rename(String name) {
        return new SysFtsQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysFtsQueue rename(Name name) {
        return new SysFtsQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, LocalDateTime, String, UUID, String, Integer, Long, String, String, String, String, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
