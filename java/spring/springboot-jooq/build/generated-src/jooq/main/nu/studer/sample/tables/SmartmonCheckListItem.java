/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonCheckListItemRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonCheckListItem extends TableImpl<SmartmonCheckListItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_check_list_item</code>
     */
    public static final SmartmonCheckListItem SMARTMON_CHECK_LIST_ITEM = new SmartmonCheckListItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonCheckListItemRecord> getRecordType() {
        return SmartmonCheckListItemRecord.class;
    }

    /**
     * The column <code>public.smartmon_check_list_item.id</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.version</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.create_ts</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.created_by</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.update_ts</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.updated_by</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.delete_ts</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.deleted_by</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.photo_type</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Integer> PHOTO_TYPE = createField(DSL.name("photo_type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.description</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.value_type</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> VALUE_TYPE = createField(DSL.name("value_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list_item.min_photos</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Integer> MIN_PHOTOS = createField(DSL.name("min_photos"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.min_value</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Double> MIN_VALUE = createField(DSL.name("min_value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.max_value</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Double> MAX_VALUE = createField(DSL.name("max_value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.archived</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, Boolean> ARCHIVED = createField(DSL.name("archived"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.parent_item_id</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, UUID> PARENT_ITEM_ID = createField(DSL.name("parent_item_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.list_template_id</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, UUID> LIST_TEMPLATE_ID = createField(DSL.name("list_template_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_list_item.ext_id</code>.
     */
    public final TableField<SmartmonCheckListItemRecord, String> EXT_ID = createField(DSL.name("ext_id"), SQLDataType.VARCHAR(255), this, "");

    private SmartmonCheckListItem(Name alias, Table<SmartmonCheckListItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonCheckListItem(Name alias, Table<SmartmonCheckListItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_check_list_item</code> table
     * reference
     */
    public SmartmonCheckListItem(String alias) {
        this(DSL.name(alias), SMARTMON_CHECK_LIST_ITEM);
    }

    /**
     * Create an aliased <code>public.smartmon_check_list_item</code> table
     * reference
     */
    public SmartmonCheckListItem(Name alias) {
        this(alias, SMARTMON_CHECK_LIST_ITEM);
    }

    /**
     * Create a <code>public.smartmon_check_list_item</code> table reference
     */
    public SmartmonCheckListItem() {
        this(DSL.name("smartmon_check_list_item"), null);
    }

    public <O extends Record> SmartmonCheckListItem(Table<O> child, ForeignKey<O, SmartmonCheckListItemRecord> key) {
        super(child, key, SMARTMON_CHECK_LIST_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_CHECK_LIST_ITEM_ON_LIST_TEMPLATE, Indexes.IDX_SMARTMON_CHECK_LIST_ITEM_ON_PARENT_ITEM);
    }

    @Override
    public UniqueKey<SmartmonCheckListItemRecord> getPrimaryKey() {
        return Keys.SMARTMON_CHECK_LIST_ITEM_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonCheckListItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_PARENT_ITEM, Keys.SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_LIST_TEMPLATE);
    }

    private transient SmartmonCheckListItem _smartmonCheckListItem;
    private transient SmartexamCheckListListTypeTemplate _smartexamCheckListListTypeTemplate;

    public SmartmonCheckListItem smartmonCheckListItem() {
        if (_smartmonCheckListItem == null)
            _smartmonCheckListItem = new SmartmonCheckListItem(this, Keys.SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_PARENT_ITEM);

        return _smartmonCheckListItem;
    }

    public SmartexamCheckListListTypeTemplate smartexamCheckListListTypeTemplate() {
        if (_smartexamCheckListListTypeTemplate == null)
            _smartexamCheckListListTypeTemplate = new SmartexamCheckListListTypeTemplate(this, Keys.SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_LIST_TEMPLATE);

        return _smartexamCheckListListTypeTemplate;
    }

    @Override
    public SmartmonCheckListItem as(String alias) {
        return new SmartmonCheckListItem(DSL.name(alias), this);
    }

    @Override
    public SmartmonCheckListItem as(Name alias) {
        return new SmartmonCheckListItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckListItem rename(String name) {
        return new SmartmonCheckListItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckListItem rename(Name name) {
        return new SmartmonCheckListItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Integer, String, String, Integer, Double, Double, Boolean, UUID, UUID, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
