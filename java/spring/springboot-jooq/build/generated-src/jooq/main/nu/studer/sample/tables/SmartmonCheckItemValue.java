/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonCheckItemValueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonCheckItemValue extends TableImpl<SmartmonCheckItemValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_check_item_value</code>
     */
    public static final SmartmonCheckItemValue SMARTMON_CHECK_ITEM_VALUE = new SmartmonCheckItemValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonCheckItemValueRecord> getRecordType() {
        return SmartmonCheckItemValueRecord.class;
    }

    /**
     * The column <code>public.smartmon_check_item_value.id</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.version</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.create_ts</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.created_by</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.update_ts</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.updated_by</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.delete_ts</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.deleted_by</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_item_value.instance_id</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.item_id</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.value_</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, String> VALUE_ = createField(DSL.name("value_"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.photo_id</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.checked</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, Boolean> CHECKED = createField(DSL.name("checked"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.parent_id</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_item_value.comment_</code>.
     */
    public final TableField<SmartmonCheckItemValueRecord, String> COMMENT_ = createField(DSL.name("comment_"), SQLDataType.CLOB, this, "");

    private SmartmonCheckItemValue(Name alias, Table<SmartmonCheckItemValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonCheckItemValue(Name alias, Table<SmartmonCheckItemValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_check_item_value</code> table
     * reference
     */
    public SmartmonCheckItemValue(String alias) {
        this(DSL.name(alias), SMARTMON_CHECK_ITEM_VALUE);
    }

    /**
     * Create an aliased <code>public.smartmon_check_item_value</code> table
     * reference
     */
    public SmartmonCheckItemValue(Name alias) {
        this(alias, SMARTMON_CHECK_ITEM_VALUE);
    }

    /**
     * Create a <code>public.smartmon_check_item_value</code> table reference
     */
    public SmartmonCheckItemValue() {
        this(DSL.name("smartmon_check_item_value"), null);
    }

    public <O extends Record> SmartmonCheckItemValue(Table<O> child, ForeignKey<O, SmartmonCheckItemValueRecord> key) {
        super(child, key, SMARTMON_CHECK_ITEM_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_CHECK_ITEM_VALUE_ON_INSTANCE, Indexes.IDX_SMARTMON_CHECK_ITEM_VALUE_ON_ITEM, Indexes.IDX_SMARTMON_CHECK_ITEM_VALUE_ON_PARENT, Indexes.IDX_SMARTMON_CHECK_ITEM_VALUE_ON_PHOTO);
    }

    @Override
    public UniqueKey<SmartmonCheckItemValueRecord> getPrimaryKey() {
        return Keys.SMARTMON_CHECK_ITEM_VALUE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonCheckItemValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_INSTANCE, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_ITEM, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PHOTO, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PARENT);
    }

    private transient SmartmonCheckListInstance _smartmonCheckListInstance;
    private transient SmartmonCheckListItem _smartmonCheckListItem;
    private transient SysFile _sysFile;
    private transient SmartmonCheckItemValue _smartmonCheckItemValue;

    public SmartmonCheckListInstance smartmonCheckListInstance() {
        if (_smartmonCheckListInstance == null)
            _smartmonCheckListInstance = new SmartmonCheckListInstance(this, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_INSTANCE);

        return _smartmonCheckListInstance;
    }

    public SmartmonCheckListItem smartmonCheckListItem() {
        if (_smartmonCheckListItem == null)
            _smartmonCheckListItem = new SmartmonCheckListItem(this, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_ITEM);

        return _smartmonCheckListItem;
    }

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PHOTO);

        return _sysFile;
    }

    public SmartmonCheckItemValue smartmonCheckItemValue() {
        if (_smartmonCheckItemValue == null)
            _smartmonCheckItemValue = new SmartmonCheckItemValue(this, Keys.SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PARENT);

        return _smartmonCheckItemValue;
    }

    @Override
    public SmartmonCheckItemValue as(String alias) {
        return new SmartmonCheckItemValue(DSL.name(alias), this);
    }

    @Override
    public SmartmonCheckItemValue as(Name alias) {
        return new SmartmonCheckItemValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckItemValue rename(String name) {
        return new SmartmonCheckItemValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckItemValue rename(Name name) {
        return new SmartmonCheckItemValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, UUID, String, UUID, Boolean, UUID, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
