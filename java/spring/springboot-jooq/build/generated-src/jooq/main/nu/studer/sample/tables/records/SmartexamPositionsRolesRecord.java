/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.util.UUID;

import nu.studer.sample.tables.SmartexamPositionsRoles;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamPositionsRolesRecord extends UpdatableRecordImpl<SmartexamPositionsRolesRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_positions_roles.position_id</code>.
     */
    public SmartexamPositionsRolesRecord setPositionId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_positions_roles.position_id</code>.
     */
    public UUID getPositionId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_positions_roles.role_id</code>.
     */
    public SmartexamPositionsRolesRecord setRoleId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_positions_roles.role_id</code>.
     */
    public UUID getRoleId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.POSITION_ID;
    }

    @Override
    public Field<UUID> field2() {
        return SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.ROLE_ID;
    }

    @Override
    public UUID component1() {
        return getPositionId();
    }

    @Override
    public UUID component2() {
        return getRoleId();
    }

    @Override
    public UUID value1() {
        return getPositionId();
    }

    @Override
    public UUID value2() {
        return getRoleId();
    }

    @Override
    public SmartexamPositionsRolesRecord value1(UUID value) {
        setPositionId(value);
        return this;
    }

    @Override
    public SmartexamPositionsRolesRecord value2(UUID value) {
        setRoleId(value);
        return this;
    }

    @Override
    public SmartexamPositionsRolesRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamPositionsRolesRecord
     */
    public SmartexamPositionsRolesRecord() {
        super(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES);
    }

    /**
     * Create a detached, initialised SmartexamPositionsRolesRecord
     */
    public SmartexamPositionsRolesRecord(UUID positionId, UUID roleId) {
        super(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES);

        setPositionId(positionId);
        setRoleId(roleId);
    }

    /**
     * Create a detached, initialised SmartexamPositionsRolesRecord
     */
    public SmartexamPositionsRolesRecord(nu.studer.sample.tables.pojos.SmartexamPositionsRoles value) {
        super(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES);

        if (value != null) {
            setPositionId(value.getPositionId());
            setRoleId(value.getRoleId());
        }
    }
}
