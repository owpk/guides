/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamRequirementsForSpItems_U74375Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRequirementsForSpItems_U74375 extends TableImpl<SmartexamRequirementsForSpItems_U74375Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_requirements_for_sp_items__u74375</code>
     */
    public static final SmartexamRequirementsForSpItems_U74375 SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375 = new SmartexamRequirementsForSpItems_U74375();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamRequirementsForSpItems_U74375Record> getRecordType() {
        return SmartexamRequirementsForSpItems_U74375Record.class;
    }

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.id</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.version</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.create_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.created_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.update_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.updated_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.delete_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.deleted_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.nomenclature_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, UUID> NOMENCLATURE_ID = createField(DSL.name("nomenclature_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.current_stage</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, String> CURRENT_STAGE = createField(DSL.name("current_stage"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp_items__u74375.requirements_for_sp_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpItems_U74375Record, UUID> REQUIREMENTS_FOR_SP_ID = createField(DSL.name("requirements_for_sp_id"), SQLDataType.UUID, this, "");

    private SmartexamRequirementsForSpItems_U74375(Name alias, Table<SmartexamRequirementsForSpItems_U74375Record> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamRequirementsForSpItems_U74375(Name alias, Table<SmartexamRequirementsForSpItems_U74375Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexam_requirements_for_sp_items__u74375</code> table
     * reference
     */
    public SmartexamRequirementsForSpItems_U74375(String alias) {
        this(DSL.name(alias), SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375);
    }

    /**
     * Create an aliased
     * <code>public.smartexam_requirements_for_sp_items__u74375</code> table
     * reference
     */
    public SmartexamRequirementsForSpItems_U74375(Name alias) {
        this(alias, SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375);
    }

    /**
     * Create a <code>public.smartexam_requirements_for_sp_items__u74375</code>
     * table reference
     */
    public SmartexamRequirementsForSpItems_U74375() {
        this(DSL.name("smartexam_requirements_for_sp_items__u74375"), null);
    }

    public <O extends Record> SmartexamRequirementsForSpItems_U74375(Table<O> child, ForeignKey<O, SmartexamRequirementsForSpItems_U74375Record> key) {
        super(child, key, SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_NOMENCLATURE, Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_REQUIREMENTS_FOR_SP);
    }

    @Override
    public UniqueKey<SmartexamRequirementsForSpItems_U74375Record> getPrimaryKey() {
        return Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamRequirementsForSpItems_U74375Record, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_NOMENCLATURE, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_REQUIREMENTS_FOR_SP);
    }

    private transient SmartexamNomenclature _smartexamNomenclature;
    private transient SmartexamRequirementsForSp _smartexamRequirementsForSp;

    public SmartexamNomenclature smartexamNomenclature() {
        if (_smartexamNomenclature == null)
            _smartexamNomenclature = new SmartexamNomenclature(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_NOMENCLATURE);

        return _smartexamNomenclature;
    }

    public SmartexamRequirementsForSp smartexamRequirementsForSp() {
        if (_smartexamRequirementsForSp == null)
            _smartexamRequirementsForSp = new SmartexamRequirementsForSp(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_REQUIREMENTS_FOR_SP);

        return _smartexamRequirementsForSp;
    }

    @Override
    public SmartexamRequirementsForSpItems_U74375 as(String alias) {
        return new SmartexamRequirementsForSpItems_U74375(DSL.name(alias), this);
    }

    @Override
    public SmartexamRequirementsForSpItems_U74375 as(Name alias) {
        return new SmartexamRequirementsForSpItems_U74375(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRequirementsForSpItems_U74375 rename(String name) {
        return new SmartexamRequirementsForSpItems_U74375(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRequirementsForSpItems_U74375 rename(Name name) {
        return new SmartexamRequirementsForSpItems_U74375(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, UUID> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
