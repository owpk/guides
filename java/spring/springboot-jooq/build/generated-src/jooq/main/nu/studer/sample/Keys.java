/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample;


import nu.studer.sample.tables.BnaKafkaPrimaryKey;
import nu.studer.sample.tables.BnaNsiChangeLog;
import nu.studer.sample.tables.CompanyaddonBaseCompany;
import nu.studer.sample.tables.CompanyaddonBaseCompanyBaseDirectionLink;
import nu.studer.sample.tables.CompanyaddonBaseCompanyBaseProjectLink;
import nu.studer.sample.tables.CompanyaddonBaseContact;
import nu.studer.sample.tables.CompanyaddonBaseContactBaseEmailLink;
import nu.studer.sample.tables.CompanyaddonBaseContactBasePhoneNumberLink;
import nu.studer.sample.tables.CompanyaddonBaseDepartment;
import nu.studer.sample.tables.CompanyaddonBaseDepartmentPosition;
import nu.studer.sample.tables.CompanyaddonBaseDirection;
import nu.studer.sample.tables.CompanyaddonBaseEmail;
import nu.studer.sample.tables.CompanyaddonBaseEmployee;
import nu.studer.sample.tables.CompanyaddonBaseEmployeePosition;
import nu.studer.sample.tables.CompanyaddonBaseOrganizationalUnit;
import nu.studer.sample.tables.CompanyaddonBaseOrganizationalUnitEmployee;
import nu.studer.sample.tables.CompanyaddonBasePhoneNumber;
import nu.studer.sample.tables.CompanyaddonBaseProject;
import nu.studer.sample.tables.CompanyaddonBaseProjectBaseDirectionLink;
import nu.studer.sample.tables.CompanyaddonBaseProjectEmployee;
import nu.studer.sample.tables.DdcrdDiagnoseExecutionLog;
import nu.studer.sample.tables.Import1cstpSettings;
import nu.studer.sample.tables.SecConstraint;
import nu.studer.sample.tables.SecEntityLog;
import nu.studer.sample.tables.SecFilter;
import nu.studer.sample.tables.SecGroup;
import nu.studer.sample.tables.SecGroupHierarchy;
import nu.studer.sample.tables.SecLocalizedConstraintMsg;
import nu.studer.sample.tables.SecLoggedAttr;
import nu.studer.sample.tables.SecLoggedEntity;
import nu.studer.sample.tables.SecPermission;
import nu.studer.sample.tables.SecPresentation;
import nu.studer.sample.tables.SecRememberMe;
import nu.studer.sample.tables.SecRole;
import nu.studer.sample.tables.SecScreenHistory;
import nu.studer.sample.tables.SecSearchFolder;
import nu.studer.sample.tables.SecSessionAttr;
import nu.studer.sample.tables.SecSessionLog;
import nu.studer.sample.tables.SecUser;
import nu.studer.sample.tables.SecUserRole;
import nu.studer.sample.tables.SecUserSetting;
import nu.studer.sample.tables.SecUserSubstitution;
import nu.studer.sample.tables.SmartexamBillsSupplier;
import nu.studer.sample.tables.SmartexamCheckItemValuePhotos;
import nu.studer.sample.tables.SmartexamCheckListDivisionLink;
import nu.studer.sample.tables.SmartexamCheckListItemCheckListLink;
import nu.studer.sample.tables.SmartexamCheckListListTypeTemplate;
import nu.studer.sample.tables.SmartexamCheckListTransportTypeLink;
import nu.studer.sample.tables.SmartexamCheckListWorkValue;
import nu.studer.sample.tables.SmartexamCheckListWorks;
import nu.studer.sample.tables.SmartexamCheckListWorksRepairRequestWorkLink;
import nu.studer.sample.tables.SmartexamDailyTransportStatus;
import nu.studer.sample.tables.SmartexamDivisionAccessControl;
import nu.studer.sample.tables.SmartexamDivisionAccessControlDivisionLink;
import nu.studer.sample.tables.SmartexamEmployee;
import nu.studer.sample.tables.SmartexamExecutor;
import nu.studer.sample.tables.SmartexamFines;
import nu.studer.sample.tables.SmartexamInstanceDate;
import nu.studer.sample.tables.SmartexamKpiInstance;
import nu.studer.sample.tables.SmartexamKpiInstanceValue;
import nu.studer.sample.tables.SmartexamLimitsTs;
import nu.studer.sample.tables.SmartexamLogbook;
import nu.studer.sample.tables.SmartexamLogbookFileDescriptorLink;
import nu.studer.sample.tables.SmartexamNfcTag;
import nu.studer.sample.tables.SmartexamNomenclature;
import nu.studer.sample.tables.SmartexamOrganization;
import nu.studer.sample.tables.SmartexamPlan;
import nu.studer.sample.tables.SmartexamPositions;
import nu.studer.sample.tables.SmartexamPositionsRoles;
import nu.studer.sample.tables.SmartexamRepairBlock;
import nu.studer.sample.tables.SmartexamRepairBlockStatus;
import nu.studer.sample.tables.SmartexamRepairRequest;
import nu.studer.sample.tables.SmartexamRepairRequestInstance;
import nu.studer.sample.tables.SmartexamRepairRequestSpareParts;
import nu.studer.sample.tables.SmartexamRepairRequestWork;
import nu.studer.sample.tables.SmartexamRepairZone;
import nu.studer.sample.tables.SmartexamRequirementsForSp;
import nu.studer.sample.tables.SmartexamRequirementsForSpItems_U74375;
import nu.studer.sample.tables.SmartexamRouteList;
import nu.studer.sample.tables.SmartexamServiceReportInstance;
import nu.studer.sample.tables.SmartexamServiceReportInstanceTotal;
import nu.studer.sample.tables.SmartexamServiceReportStatistics;
import nu.studer.sample.tables.SmartexamShop;
import nu.studer.sample.tables.SmartexamStandardTime;
import nu.studer.sample.tables.SmartexamStock;
import nu.studer.sample.tables.SmartexamTransportCosts;
import nu.studer.sample.tables.SmartexamTransportCostsItem;
import nu.studer.sample.tables.SmartexamTransportEmployeeLink;
import nu.studer.sample.tables.SmartexamTransportFrom1c;
import nu.studer.sample.tables.SmartexamTransportMileageList;
import nu.studer.sample.tables.SmartexamTransportTypeFrom1c;
import nu.studer.sample.tables.SmartexamTransportTypeGrouping;
import nu.studer.sample.tables.SmartexamUsersFrom1c;
import nu.studer.sample.tables.SmartexamaddonBaseDocuments;
import nu.studer.sample.tables.SmartexamaddonBaseGarbageContainer;
import nu.studer.sample.tables.SmartexamaddonBaseLicense;
import nu.studer.sample.tables.SmartexamaddonBaseTransport;
import nu.studer.sample.tables.SmartexamaddonBaseTransportType;
import nu.studer.sample.tables.SmartmonCheckItemValue;
import nu.studer.sample.tables.SmartmonCheckList;
import nu.studer.sample.tables.SmartmonCheckListInstance;
import nu.studer.sample.tables.SmartmonCheckListItem;
import nu.studer.sample.tables.SmartmonDivision;
import nu.studer.sample.tables.SmartmonTransport;
import nu.studer.sample.tables.SmartmonTransportType;
import nu.studer.sample.tables.SysAccessToken;
import nu.studer.sample.tables.SysAppFolder;
import nu.studer.sample.tables.SysAttrValue;
import nu.studer.sample.tables.SysCategory;
import nu.studer.sample.tables.SysCategoryAttr;
import nu.studer.sample.tables.SysConfig;
import nu.studer.sample.tables.SysDbChangelog;
import nu.studer.sample.tables.SysEntitySnapshot;
import nu.studer.sample.tables.SysEntityStatistics;
import nu.studer.sample.tables.SysFile;
import nu.studer.sample.tables.SysFolder;
import nu.studer.sample.tables.SysFtsQueue;
import nu.studer.sample.tables.SysJmxInstance;
import nu.studer.sample.tables.SysLockConfig;
import nu.studer.sample.tables.SysQueryResult;
import nu.studer.sample.tables.SysRefreshToken;
import nu.studer.sample.tables.SysScheduledExecution;
import nu.studer.sample.tables.SysScheduledTask;
import nu.studer.sample.tables.SysSendingAttachment;
import nu.studer.sample.tables.SysSendingMessage;
import nu.studer.sample.tables.SysServer;
import nu.studer.sample.tables.records.BnaKafkaPrimaryKeyRecord;
import nu.studer.sample.tables.records.BnaNsiChangeLogRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseCompanyBaseDirectionLinkRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseCompanyBaseProjectLinkRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseCompanyRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseContactBaseEmailLinkRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseContactBasePhoneNumberLinkRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseContactRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseDepartmentPositionRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseDepartmentRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseDirectionRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseEmailRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseEmployeePositionRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseEmployeeRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseOrganizationalUnitEmployeeRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseOrganizationalUnitRecord;
import nu.studer.sample.tables.records.CompanyaddonBasePhoneNumberRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseProjectBaseDirectionLinkRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseProjectEmployeeRecord;
import nu.studer.sample.tables.records.CompanyaddonBaseProjectRecord;
import nu.studer.sample.tables.records.DdcrdDiagnoseExecutionLogRecord;
import nu.studer.sample.tables.records.Import1cstpSettingsRecord;
import nu.studer.sample.tables.records.SecConstraintRecord;
import nu.studer.sample.tables.records.SecEntityLogRecord;
import nu.studer.sample.tables.records.SecFilterRecord;
import nu.studer.sample.tables.records.SecGroupHierarchyRecord;
import nu.studer.sample.tables.records.SecGroupRecord;
import nu.studer.sample.tables.records.SecLocalizedConstraintMsgRecord;
import nu.studer.sample.tables.records.SecLoggedAttrRecord;
import nu.studer.sample.tables.records.SecLoggedEntityRecord;
import nu.studer.sample.tables.records.SecPermissionRecord;
import nu.studer.sample.tables.records.SecPresentationRecord;
import nu.studer.sample.tables.records.SecRememberMeRecord;
import nu.studer.sample.tables.records.SecRoleRecord;
import nu.studer.sample.tables.records.SecScreenHistoryRecord;
import nu.studer.sample.tables.records.SecSearchFolderRecord;
import nu.studer.sample.tables.records.SecSessionAttrRecord;
import nu.studer.sample.tables.records.SecSessionLogRecord;
import nu.studer.sample.tables.records.SecUserRecord;
import nu.studer.sample.tables.records.SecUserRoleRecord;
import nu.studer.sample.tables.records.SecUserSettingRecord;
import nu.studer.sample.tables.records.SecUserSubstitutionRecord;
import nu.studer.sample.tables.records.SmartexamBillsSupplierRecord;
import nu.studer.sample.tables.records.SmartexamCheckItemValuePhotosRecord;
import nu.studer.sample.tables.records.SmartexamCheckListDivisionLinkRecord;
import nu.studer.sample.tables.records.SmartexamCheckListItemCheckListLinkRecord;
import nu.studer.sample.tables.records.SmartexamCheckListListTypeTemplateRecord;
import nu.studer.sample.tables.records.SmartexamCheckListTransportTypeLinkRecord;
import nu.studer.sample.tables.records.SmartexamCheckListWorkValueRecord;
import nu.studer.sample.tables.records.SmartexamCheckListWorksRecord;
import nu.studer.sample.tables.records.SmartexamCheckListWorksRepairRequestWorkLinkRecord;
import nu.studer.sample.tables.records.SmartexamDailyTransportStatusRecord;
import nu.studer.sample.tables.records.SmartexamDivisionAccessControlDivisionLinkRecord;
import nu.studer.sample.tables.records.SmartexamDivisionAccessControlRecord;
import nu.studer.sample.tables.records.SmartexamEmployeeRecord;
import nu.studer.sample.tables.records.SmartexamExecutorRecord;
import nu.studer.sample.tables.records.SmartexamFinesRecord;
import nu.studer.sample.tables.records.SmartexamInstanceDateRecord;
import nu.studer.sample.tables.records.SmartexamKpiInstanceRecord;
import nu.studer.sample.tables.records.SmartexamKpiInstanceValueRecord;
import nu.studer.sample.tables.records.SmartexamLimitsTsRecord;
import nu.studer.sample.tables.records.SmartexamLogbookFileDescriptorLinkRecord;
import nu.studer.sample.tables.records.SmartexamLogbookRecord;
import nu.studer.sample.tables.records.SmartexamNfcTagRecord;
import nu.studer.sample.tables.records.SmartexamNomenclatureRecord;
import nu.studer.sample.tables.records.SmartexamOrganizationRecord;
import nu.studer.sample.tables.records.SmartexamPlanRecord;
import nu.studer.sample.tables.records.SmartexamPositionsRecord;
import nu.studer.sample.tables.records.SmartexamPositionsRolesRecord;
import nu.studer.sample.tables.records.SmartexamRepairBlockRecord;
import nu.studer.sample.tables.records.SmartexamRepairBlockStatusRecord;
import nu.studer.sample.tables.records.SmartexamRepairRequestInstanceRecord;
import nu.studer.sample.tables.records.SmartexamRepairRequestRecord;
import nu.studer.sample.tables.records.SmartexamRepairRequestSparePartsRecord;
import nu.studer.sample.tables.records.SmartexamRepairRequestWorkRecord;
import nu.studer.sample.tables.records.SmartexamRepairZoneRecord;
import nu.studer.sample.tables.records.SmartexamRequirementsForSpItems_U74375Record;
import nu.studer.sample.tables.records.SmartexamRequirementsForSpRecord;
import nu.studer.sample.tables.records.SmartexamRouteListRecord;
import nu.studer.sample.tables.records.SmartexamServiceReportInstanceRecord;
import nu.studer.sample.tables.records.SmartexamServiceReportInstanceTotalRecord;
import nu.studer.sample.tables.records.SmartexamServiceReportStatisticsRecord;
import nu.studer.sample.tables.records.SmartexamShopRecord;
import nu.studer.sample.tables.records.SmartexamStandardTimeRecord;
import nu.studer.sample.tables.records.SmartexamStockRecord;
import nu.studer.sample.tables.records.SmartexamTransportCostsItemRecord;
import nu.studer.sample.tables.records.SmartexamTransportCostsRecord;
import nu.studer.sample.tables.records.SmartexamTransportEmployeeLinkRecord;
import nu.studer.sample.tables.records.SmartexamTransportFrom1cRecord;
import nu.studer.sample.tables.records.SmartexamTransportMileageListRecord;
import nu.studer.sample.tables.records.SmartexamTransportTypeFrom1cRecord;
import nu.studer.sample.tables.records.SmartexamTransportTypeGroupingRecord;
import nu.studer.sample.tables.records.SmartexamUsersFrom1cRecord;
import nu.studer.sample.tables.records.SmartexamaddonBaseDocumentsRecord;
import nu.studer.sample.tables.records.SmartexamaddonBaseGarbageContainerRecord;
import nu.studer.sample.tables.records.SmartexamaddonBaseLicenseRecord;
import nu.studer.sample.tables.records.SmartexamaddonBaseTransportRecord;
import nu.studer.sample.tables.records.SmartexamaddonBaseTransportTypeRecord;
import nu.studer.sample.tables.records.SmartmonCheckItemValueRecord;
import nu.studer.sample.tables.records.SmartmonCheckListInstanceRecord;
import nu.studer.sample.tables.records.SmartmonCheckListItemRecord;
import nu.studer.sample.tables.records.SmartmonCheckListRecord;
import nu.studer.sample.tables.records.SmartmonDivisionRecord;
import nu.studer.sample.tables.records.SmartmonTransportRecord;
import nu.studer.sample.tables.records.SmartmonTransportTypeRecord;
import nu.studer.sample.tables.records.SysAccessTokenRecord;
import nu.studer.sample.tables.records.SysAppFolderRecord;
import nu.studer.sample.tables.records.SysAttrValueRecord;
import nu.studer.sample.tables.records.SysCategoryAttrRecord;
import nu.studer.sample.tables.records.SysCategoryRecord;
import nu.studer.sample.tables.records.SysConfigRecord;
import nu.studer.sample.tables.records.SysDbChangelogRecord;
import nu.studer.sample.tables.records.SysEntitySnapshotRecord;
import nu.studer.sample.tables.records.SysEntityStatisticsRecord;
import nu.studer.sample.tables.records.SysFileRecord;
import nu.studer.sample.tables.records.SysFolderRecord;
import nu.studer.sample.tables.records.SysFtsQueueRecord;
import nu.studer.sample.tables.records.SysJmxInstanceRecord;
import nu.studer.sample.tables.records.SysLockConfigRecord;
import nu.studer.sample.tables.records.SysQueryResultRecord;
import nu.studer.sample.tables.records.SysRefreshTokenRecord;
import nu.studer.sample.tables.records.SysScheduledExecutionRecord;
import nu.studer.sample.tables.records.SysScheduledTaskRecord;
import nu.studer.sample.tables.records.SysSendingAttachmentRecord;
import nu.studer.sample.tables.records.SysSendingMessageRecord;
import nu.studer.sample.tables.records.SysServerRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BnaKafkaPrimaryKeyRecord> BNA_KAFKA_PRIMARY_KEY_PKEY = Internal.createUniqueKey(BnaKafkaPrimaryKey.BNA_KAFKA_PRIMARY_KEY, DSL.name("bna_kafka_primary_key_pkey"), new TableField[] { BnaKafkaPrimaryKey.BNA_KAFKA_PRIMARY_KEY.ID }, true);
    public static final UniqueKey<BnaNsiChangeLogRecord> BNA_NSI_CHANGE_LOG_PKEY = Internal.createUniqueKey(BnaNsiChangeLog.BNA_NSI_CHANGE_LOG, DSL.name("bna_nsi_change_log_pkey"), new TableField[] { BnaNsiChangeLog.BNA_NSI_CHANGE_LOG.ID }, true);
    public static final UniqueKey<CompanyaddonBaseCompanyRecord> COMPANYADDON_BASE_COMPANY_PKEY = Internal.createUniqueKey(CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY, DSL.name("companyaddon_base_company_pkey"), new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final UniqueKey<CompanyaddonBaseCompanyBaseDirectionLinkRecord> COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK_PKEY = Internal.createUniqueKey(CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK, DSL.name("companyaddon_base_company_base_direction_link_pkey"), new TableField[] { CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK.BASE_COMPANY_ID, CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK.BASE_DIRECTION_ID }, true);
    public static final UniqueKey<CompanyaddonBaseCompanyBaseProjectLinkRecord> COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK_PKEY = Internal.createUniqueKey(CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK, DSL.name("companyaddon_base_company_base_project_link_pkey"), new TableField[] { CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK.BASE_COMPANY_ID, CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK.BASE_PROJECT_ID }, true);
    public static final UniqueKey<CompanyaddonBaseContactRecord> COMPANYADDON_BASE_CONTACT_PKEY = Internal.createUniqueKey(CompanyaddonBaseContact.COMPANYADDON_BASE_CONTACT, DSL.name("companyaddon_base_contact_pkey"), new TableField[] { CompanyaddonBaseContact.COMPANYADDON_BASE_CONTACT.ID }, true);
    public static final UniqueKey<CompanyaddonBaseContactBaseEmailLinkRecord> COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK_PKEY = Internal.createUniqueKey(CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK, DSL.name("companyaddon_base_contact_base_email_link_pkey"), new TableField[] { CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK.BASE_CONTACT_ID, CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK.BASE_EMAIL_ID }, true);
    public static final UniqueKey<CompanyaddonBaseContactBasePhoneNumberLinkRecord> COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK_PKEY = Internal.createUniqueKey(CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK, DSL.name("companyaddon_base_contact_base_phone_number_link_pkey"), new TableField[] { CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK.BASE_CONTACT_ID, CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK.BASE_PHONE_NUMBER_ID }, true);
    public static final UniqueKey<CompanyaddonBaseDepartmentRecord> COMPANYADDON_BASE_DEPARTMENT_PKEY = Internal.createUniqueKey(CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT, DSL.name("companyaddon_base_department_pkey"), new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.ID }, true);
    public static final UniqueKey<CompanyaddonBaseDepartmentPositionRecord> COMPANYADDON_BASE_DEPARTMENT_POSITION_PKEY = Internal.createUniqueKey(CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION, DSL.name("companyaddon_base_department_position_pkey"), new TableField[] { CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION.ID }, true);
    public static final UniqueKey<CompanyaddonBaseDirectionRecord> COMPANYADDON_BASE_DIRECTION_PKEY = Internal.createUniqueKey(CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION, DSL.name("companyaddon_base_direction_pkey"), new TableField[] { CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION.ID }, true);
    public static final UniqueKey<CompanyaddonBaseEmailRecord> COMPANYADDON_BASE_EMAIL_PKEY = Internal.createUniqueKey(CompanyaddonBaseEmail.COMPANYADDON_BASE_EMAIL, DSL.name("companyaddon_base_email_pkey"), new TableField[] { CompanyaddonBaseEmail.COMPANYADDON_BASE_EMAIL.ID }, true);
    public static final UniqueKey<CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_EMPLOYEE_PKEY = Internal.createUniqueKey(CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE, DSL.name("companyaddon_base_employee_pkey"), new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final UniqueKey<CompanyaddonBaseEmployeePositionRecord> COMPANYADDON_BASE_EMPLOYEE_POSITION_PKEY = Internal.createUniqueKey(CompanyaddonBaseEmployeePosition.COMPANYADDON_BASE_EMPLOYEE_POSITION, DSL.name("companyaddon_base_employee_position_pkey"), new TableField[] { CompanyaddonBaseEmployeePosition.COMPANYADDON_BASE_EMPLOYEE_POSITION.ID }, true);
    public static final UniqueKey<CompanyaddonBaseOrganizationalUnitRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_PKEY = Internal.createUniqueKey(CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT, DSL.name("companyaddon_base_organizational_unit_pkey"), new TableField[] { CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT.ID }, true);
    public static final UniqueKey<CompanyaddonBaseOrganizationalUnitEmployeeRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_PKEY = Internal.createUniqueKey(CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE, DSL.name("companyaddon_base_organizational_unit_employee_pkey"), new TableField[] { CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE.ID }, true);
    public static final UniqueKey<CompanyaddonBasePhoneNumberRecord> COMPANYADDON_BASE_PHONE_NUMBER_PKEY = Internal.createUniqueKey(CompanyaddonBasePhoneNumber.COMPANYADDON_BASE_PHONE_NUMBER, DSL.name("companyaddon_base_phone_number_pkey"), new TableField[] { CompanyaddonBasePhoneNumber.COMPANYADDON_BASE_PHONE_NUMBER.ID }, true);
    public static final UniqueKey<CompanyaddonBaseProjectRecord> COMPANYADDON_BASE_PROJECT_PKEY = Internal.createUniqueKey(CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT, DSL.name("companyaddon_base_project_pkey"), new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.ID }, true);
    public static final UniqueKey<CompanyaddonBaseProjectBaseDirectionLinkRecord> COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK_PKEY = Internal.createUniqueKey(CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK, DSL.name("companyaddon_base_project_base_direction_link_pkey"), new TableField[] { CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK.BASE_DIRECTION_ID, CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK.BASE_PROJECT_ID }, true);
    public static final UniqueKey<CompanyaddonBaseProjectEmployeeRecord> COMPANYADDON_BASE_PROJECT_EMPLOYEE_PKEY = Internal.createUniqueKey(CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE, DSL.name("companyaddon_base_project_employee_pkey"), new TableField[] { CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE.ID }, true);
    public static final UniqueKey<DdcrdDiagnoseExecutionLogRecord> DDCRD_DIAGNOSE_EXECUTION_LOG_PKEY = Internal.createUniqueKey(DdcrdDiagnoseExecutionLog.DDCRD_DIAGNOSE_EXECUTION_LOG, DSL.name("ddcrd_diagnose_execution_log_pkey"), new TableField[] { DdcrdDiagnoseExecutionLog.DDCRD_DIAGNOSE_EXECUTION_LOG.ID }, true);
    public static final UniqueKey<Import1cstpSettingsRecord> IMPORT1CSTP_SETTINGS_PKEY = Internal.createUniqueKey(Import1cstpSettings.IMPORT1CSTP_SETTINGS, DSL.name("import1cstp_settings_pkey"), new TableField[] { Import1cstpSettings.IMPORT1CSTP_SETTINGS.ID }, true);
    public static final UniqueKey<SecConstraintRecord> SEC_CONSTRAINT_PKEY = Internal.createUniqueKey(SecConstraint.SEC_CONSTRAINT, DSL.name("sec_constraint_pkey"), new TableField[] { SecConstraint.SEC_CONSTRAINT.ID }, true);
    public static final UniqueKey<SecEntityLogRecord> SEC_ENTITY_LOG_PKEY = Internal.createUniqueKey(SecEntityLog.SEC_ENTITY_LOG, DSL.name("sec_entity_log_pkey"), new TableField[] { SecEntityLog.SEC_ENTITY_LOG.ID }, true);
    public static final UniqueKey<SecFilterRecord> SEC_FILTER_PKEY = Internal.createUniqueKey(SecFilter.SEC_FILTER, DSL.name("sec_filter_pkey"), new TableField[] { SecFilter.SEC_FILTER.ID }, true);
    public static final UniqueKey<SecGroupRecord> SEC_GROUP_PKEY = Internal.createUniqueKey(SecGroup.SEC_GROUP, DSL.name("sec_group_pkey"), new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final UniqueKey<SecGroupHierarchyRecord> SEC_GROUP_HIERARCHY_PKEY = Internal.createUniqueKey(SecGroupHierarchy.SEC_GROUP_HIERARCHY, DSL.name("sec_group_hierarchy_pkey"), new TableField[] { SecGroupHierarchy.SEC_GROUP_HIERARCHY.ID }, true);
    public static final UniqueKey<SecLocalizedConstraintMsgRecord> SEC_LOCALIZED_CONSTRAINT_MSG_PKEY = Internal.createUniqueKey(SecLocalizedConstraintMsg.SEC_LOCALIZED_CONSTRAINT_MSG, DSL.name("sec_localized_constraint_msg_pkey"), new TableField[] { SecLocalizedConstraintMsg.SEC_LOCALIZED_CONSTRAINT_MSG.ID }, true);
    public static final UniqueKey<SecLoggedAttrRecord> SEC_LOGGED_ATTR_PKEY = Internal.createUniqueKey(SecLoggedAttr.SEC_LOGGED_ATTR, DSL.name("sec_logged_attr_pkey"), new TableField[] { SecLoggedAttr.SEC_LOGGED_ATTR.ID }, true);
    public static final UniqueKey<SecLoggedAttrRecord> SEC_LOGGED_ATTR_UNIQ_NAME = Internal.createUniqueKey(SecLoggedAttr.SEC_LOGGED_ATTR, DSL.name("sec_logged_attr_uniq_name"), new TableField[] { SecLoggedAttr.SEC_LOGGED_ATTR.ENTITY_ID, SecLoggedAttr.SEC_LOGGED_ATTR.NAME }, true);
    public static final UniqueKey<SecLoggedEntityRecord> SEC_LOGGED_ENTITY_PKEY = Internal.createUniqueKey(SecLoggedEntity.SEC_LOGGED_ENTITY, DSL.name("sec_logged_entity_pkey"), new TableField[] { SecLoggedEntity.SEC_LOGGED_ENTITY.ID }, true);
    public static final UniqueKey<SecLoggedEntityRecord> SEC_LOGGED_ENTITY_UNIQ_NAME = Internal.createUniqueKey(SecLoggedEntity.SEC_LOGGED_ENTITY, DSL.name("sec_logged_entity_uniq_name"), new TableField[] { SecLoggedEntity.SEC_LOGGED_ENTITY.NAME }, true);
    public static final UniqueKey<SecPermissionRecord> SEC_PERMISSION_PKEY = Internal.createUniqueKey(SecPermission.SEC_PERMISSION, DSL.name("sec_permission_pkey"), new TableField[] { SecPermission.SEC_PERMISSION.ID }, true);
    public static final UniqueKey<SecPresentationRecord> SEC_PRESENTATION_PKEY = Internal.createUniqueKey(SecPresentation.SEC_PRESENTATION, DSL.name("sec_presentation_pkey"), new TableField[] { SecPresentation.SEC_PRESENTATION.ID }, true);
    public static final UniqueKey<SecRememberMeRecord> SEC_REMEMBER_ME_PKEY = Internal.createUniqueKey(SecRememberMe.SEC_REMEMBER_ME, DSL.name("sec_remember_me_pkey"), new TableField[] { SecRememberMe.SEC_REMEMBER_ME.ID }, true);
    public static final UniqueKey<SecRoleRecord> SEC_ROLE_PKEY = Internal.createUniqueKey(SecRole.SEC_ROLE, DSL.name("sec_role_pkey"), new TableField[] { SecRole.SEC_ROLE.ID }, true);
    public static final UniqueKey<SecScreenHistoryRecord> SEC_SCREEN_HISTORY_PKEY = Internal.createUniqueKey(SecScreenHistory.SEC_SCREEN_HISTORY, DSL.name("sec_screen_history_pkey"), new TableField[] { SecScreenHistory.SEC_SCREEN_HISTORY.ID }, true);
    public static final UniqueKey<SecSearchFolderRecord> SEC_SEARCH_FOLDER_PKEY = Internal.createUniqueKey(SecSearchFolder.SEC_SEARCH_FOLDER, DSL.name("sec_search_folder_pkey"), new TableField[] { SecSearchFolder.SEC_SEARCH_FOLDER.FOLDER_ID }, true);
    public static final UniqueKey<SecSessionAttrRecord> SEC_SESSION_ATTR_PKEY = Internal.createUniqueKey(SecSessionAttr.SEC_SESSION_ATTR, DSL.name("sec_session_attr_pkey"), new TableField[] { SecSessionAttr.SEC_SESSION_ATTR.ID }, true);
    public static final UniqueKey<SecSessionLogRecord> SEC_SESSION_LOG_PKEY = Internal.createUniqueKey(SecSessionLog.SEC_SESSION_LOG, DSL.name("sec_session_log_pkey"), new TableField[] { SecSessionLog.SEC_SESSION_LOG.ID }, true);
    public static final UniqueKey<SecUserRecord> SEC_USER_PKEY = Internal.createUniqueKey(SecUser.SEC_USER, DSL.name("sec_user_pkey"), new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final UniqueKey<SecUserRoleRecord> SEC_USER_ROLE_PKEY = Internal.createUniqueKey(SecUserRole.SEC_USER_ROLE, DSL.name("sec_user_role_pkey"), new TableField[] { SecUserRole.SEC_USER_ROLE.ID }, true);
    public static final UniqueKey<SecUserSettingRecord> SEC_USER_SETTING_PKEY = Internal.createUniqueKey(SecUserSetting.SEC_USER_SETTING, DSL.name("sec_user_setting_pkey"), new TableField[] { SecUserSetting.SEC_USER_SETTING.ID }, true);
    public static final UniqueKey<SecUserSettingRecord> SEC_USER_SETTING_UNIQ = Internal.createUniqueKey(SecUserSetting.SEC_USER_SETTING, DSL.name("sec_user_setting_uniq"), new TableField[] { SecUserSetting.SEC_USER_SETTING.USER_ID, SecUserSetting.SEC_USER_SETTING.NAME, SecUserSetting.SEC_USER_SETTING.CLIENT_TYPE }, true);
    public static final UniqueKey<SecUserSubstitutionRecord> SEC_USER_SUBSTITUTION_PKEY = Internal.createUniqueKey(SecUserSubstitution.SEC_USER_SUBSTITUTION, DSL.name("sec_user_substitution_pkey"), new TableField[] { SecUserSubstitution.SEC_USER_SUBSTITUTION.ID }, true);
    public static final UniqueKey<SmartexamBillsSupplierRecord> SMARTEXAM_BILLS_SUPPLIER_PKEY = Internal.createUniqueKey(SmartexamBillsSupplier.SMARTEXAM_BILLS_SUPPLIER, DSL.name("smartexam_bills_supplier_pkey"), new TableField[] { SmartexamBillsSupplier.SMARTEXAM_BILLS_SUPPLIER.ID }, true);
    public static final UniqueKey<SmartexamCheckItemValuePhotosRecord> SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_PKEY = Internal.createUniqueKey(SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS, DSL.name("smartexam_check_item_value_photos_pkey"), new TableField[] { SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS.ID }, true);
    public static final UniqueKey<SmartexamCheckListDivisionLinkRecord> SMARTEXAM_CHECK_LIST_DIVISION_LINK_PKEY = Internal.createUniqueKey(SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK, DSL.name("smartexam_check_list_division_link_pkey"), new TableField[] { SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK.CHECK_LIST_ID, SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK.DIVISION_ID }, true);
    public static final UniqueKey<SmartexamCheckListItemCheckListLinkRecord> SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK_PKEY = Internal.createUniqueKey(SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK, DSL.name("smartexam_check_list_item_check_list_link_pkey"), new TableField[] { SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK.CHECK_LIST_ITEM_ID, SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK.CHECK_LIST_ID }, true);
    public static final UniqueKey<SmartexamCheckListListTypeTemplateRecord> SMARTEXAM_CHECK_LIST_LIST_TYPE_TEMPLATE_PKEY = Internal.createUniqueKey(SmartexamCheckListListTypeTemplate.SMARTEXAM_CHECK_LIST_LIST_TYPE_TEMPLATE, DSL.name("smartexam_check_list_list_type_template_pkey"), new TableField[] { SmartexamCheckListListTypeTemplate.SMARTEXAM_CHECK_LIST_LIST_TYPE_TEMPLATE.ID }, true);
    public static final UniqueKey<SmartexamCheckListTransportTypeLinkRecord> SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK_PKEY = Internal.createUniqueKey(SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK, DSL.name("smartexam_check_list_transport_type_link_pkey"), new TableField[] { SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK.CHECK_LIST_ID, SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK.TRANSPORT_TYPE_ID }, true);
    public static final UniqueKey<SmartexamCheckListWorkValueRecord> SMARTEXAM_CHECK_LIST_WORK_VALUE_PKEY = Internal.createUniqueKey(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE, DSL.name("smartexam_check_list_work_value_pkey"), new TableField[] { SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.ID }, true);
    public static final UniqueKey<SmartexamCheckListWorksRecord> SMARTEXAM_CHECK_LIST_WORKS_PKEY = Internal.createUniqueKey(SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS, DSL.name("smartexam_check_list_works_pkey"), new TableField[] { SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS.ID }, true);
    public static final UniqueKey<SmartexamCheckListWorksRepairRequestWorkLinkRecord> SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK_PKEY = Internal.createUniqueKey(SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK, DSL.name("smartexam_check_list_works_repair_request_work_link_pkey"), new TableField[] { SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK.CHECK_LIST_WORKS_ID, SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK.REPAIR_REQUEST_WORK_ID }, true);
    public static final UniqueKey<SmartexamDailyTransportStatusRecord> SMARTEXAM_DAILY_TRANSPORT_STATUS_PKEY = Internal.createUniqueKey(SmartexamDailyTransportStatus.SMARTEXAM_DAILY_TRANSPORT_STATUS, DSL.name("smartexam_daily_transport_status_pkey"), new TableField[] { SmartexamDailyTransportStatus.SMARTEXAM_DAILY_TRANSPORT_STATUS.ID }, true);
    public static final UniqueKey<SmartexamDivisionAccessControlRecord> SMARTEXAM_DIVISION_ACCESS_CONTROL_PKEY = Internal.createUniqueKey(SmartexamDivisionAccessControl.SMARTEXAM_DIVISION_ACCESS_CONTROL, DSL.name("smartexam_division_access_control_pkey"), new TableField[] { SmartexamDivisionAccessControl.SMARTEXAM_DIVISION_ACCESS_CONTROL.ID }, true);
    public static final UniqueKey<SmartexamDivisionAccessControlDivisionLinkRecord> SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK_PKEY = Internal.createUniqueKey(SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK, DSL.name("smartexam_division_access_control_division_link_pkey"), new TableField[] { SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK.DIVISION_ACCESS_CONTROL_ID, SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK.DIVISION_ID }, true);
    public static final UniqueKey<SmartexamEmployeeRecord> SMARTEXAM_EMPLOYEE_PKEY = Internal.createUniqueKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("smartexam_employee_pkey"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final UniqueKey<SmartexamExecutorRecord> SMARTEXAM_EXECUTOR_PKEY = Internal.createUniqueKey(SmartexamExecutor.SMARTEXAM_EXECUTOR, DSL.name("smartexam_executor_pkey"), new TableField[] { SmartexamExecutor.SMARTEXAM_EXECUTOR.ID }, true);
    public static final UniqueKey<SmartexamFinesRecord> SMARTEXAM_FINES_PKEY = Internal.createUniqueKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("smartexam_fines_pkey"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.ID }, true);
    public static final UniqueKey<SmartexamInstanceDateRecord> SMARTEXAM_INSTANCE_DATE_PKEY = Internal.createUniqueKey(SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE, DSL.name("smartexam_instance_date_pkey"), new TableField[] { SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.ID }, true);
    public static final UniqueKey<SmartexamKpiInstanceRecord> SMARTEXAM_KPI_INSTANCE_PKEY = Internal.createUniqueKey(SmartexamKpiInstance.SMARTEXAM_KPI_INSTANCE, DSL.name("smartexam_kpi_instance_pkey"), new TableField[] { SmartexamKpiInstance.SMARTEXAM_KPI_INSTANCE.ID }, true);
    public static final UniqueKey<SmartexamKpiInstanceValueRecord> SMARTEXAM_KPI_INSTANCE_VALUE_PKEY = Internal.createUniqueKey(SmartexamKpiInstanceValue.SMARTEXAM_KPI_INSTANCE_VALUE, DSL.name("smartexam_kpi_instance_value_pkey"), new TableField[] { SmartexamKpiInstanceValue.SMARTEXAM_KPI_INSTANCE_VALUE.ID }, true);
    public static final UniqueKey<SmartexamLimitsTsRecord> SMARTEXAM_LIMITS_TS_PKEY = Internal.createUniqueKey(SmartexamLimitsTs.SMARTEXAM_LIMITS_TS, DSL.name("smartexam_limits_ts_pkey"), new TableField[] { SmartexamLimitsTs.SMARTEXAM_LIMITS_TS.ID }, true);
    public static final UniqueKey<SmartexamLogbookRecord> SMARTEXAM_LOGBOOK_PKEY = Internal.createUniqueKey(SmartexamLogbook.SMARTEXAM_LOGBOOK, DSL.name("smartexam_logbook_pkey"), new TableField[] { SmartexamLogbook.SMARTEXAM_LOGBOOK.ID }, true);
    public static final UniqueKey<SmartexamLogbookFileDescriptorLinkRecord> SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK_PKEY = Internal.createUniqueKey(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK, DSL.name("smartexam_logbook_file_descriptor_link_pkey"), new TableField[] { SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.LOGBOOK_ID, SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.FILE_DESCRIPTOR_ID }, true);
    public static final UniqueKey<SmartexamNfcTagRecord> SMARTEXAM_NFC_TAG_PKEY = Internal.createUniqueKey(SmartexamNfcTag.SMARTEXAM_NFC_TAG, DSL.name("smartexam_nfc_tag_pkey"), new TableField[] { SmartexamNfcTag.SMARTEXAM_NFC_TAG.ID }, true);
    public static final UniqueKey<SmartexamNomenclatureRecord> SMARTEXAM_NOMENCLATURE_PKEY = Internal.createUniqueKey(SmartexamNomenclature.SMARTEXAM_NOMENCLATURE, DSL.name("smartexam_nomenclature_pkey"), new TableField[] { SmartexamNomenclature.SMARTEXAM_NOMENCLATURE.ID }, true);
    public static final UniqueKey<SmartexamOrganizationRecord> SMARTEXAM_ORGANIZATION_PKEY = Internal.createUniqueKey(SmartexamOrganization.SMARTEXAM_ORGANIZATION, DSL.name("smartexam_organization_pkey"), new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final UniqueKey<SmartexamPlanRecord> SMARTEXAM_PLAN_PKEY = Internal.createUniqueKey(SmartexamPlan.SMARTEXAM_PLAN, DSL.name("smartexam_plan_pkey"), new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.ID }, true);
    public static final UniqueKey<SmartexamPositionsRecord> SMARTEXAM_POSITIONS_PKEY = Internal.createUniqueKey(SmartexamPositions.SMARTEXAM_POSITIONS, DSL.name("smartexam_positions_pkey"), new TableField[] { SmartexamPositions.SMARTEXAM_POSITIONS.ID }, true);
    public static final UniqueKey<SmartexamPositionsRolesRecord> SMARTEXAM_POSITIONS_ROLES_PKEY = Internal.createUniqueKey(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES, DSL.name("smartexam_positions_roles_pkey"), new TableField[] { SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.POSITION_ID, SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.ROLE_ID }, true);
    public static final UniqueKey<SmartexamRepairBlockRecord> SMARTEXAM_REPAIR_BLOCK_PKEY = Internal.createUniqueKey(SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK, DSL.name("smartexam_repair_block_pkey"), new TableField[] { SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK.ID }, true);
    public static final UniqueKey<SmartexamRepairBlockStatusRecord> SMARTEXAM_REPAIR_BLOCK_STATUS_PKEY = Internal.createUniqueKey(SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS, DSL.name("smartexam_repair_block_status_pkey"), new TableField[] { SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS.ID }, true);
    public static final UniqueKey<SmartexamRepairRequestRecord> SMARTEXAM_REPAIR_REQUEST_PKEY = Internal.createUniqueKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("smartexam_repair_request_pkey"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ID }, true);
    public static final UniqueKey<SmartexamRepairRequestInstanceRecord> SMARTEXAM_REPAIR_REQUEST_INSTANCE_PKEY = Internal.createUniqueKey(SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE, DSL.name("smartexam_repair_request_instance_pkey"), new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.ID }, true);
    public static final UniqueKey<SmartexamRepairRequestSparePartsRecord> SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS_PKEY = Internal.createUniqueKey(SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS, DSL.name("smartexam_repair_request_spare_parts_pkey"), new TableField[] { SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS.ID }, true);
    public static final UniqueKey<SmartexamRepairRequestWorkRecord> SMARTEXAM_REPAIR_REQUEST_WORK_PKEY = Internal.createUniqueKey(SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK, DSL.name("smartexam_repair_request_work_pkey"), new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final UniqueKey<SmartexamRepairZoneRecord> SMARTEXAM_REPAIR_ZONE_PKEY = Internal.createUniqueKey(SmartexamRepairZone.SMARTEXAM_REPAIR_ZONE, DSL.name("smartexam_repair_zone_pkey"), new TableField[] { SmartexamRepairZone.SMARTEXAM_REPAIR_ZONE.ID }, true);
    public static final UniqueKey<SmartexamRequirementsForSpRecord> SMARTEXAM_REQUIREMENTS_FOR_SP_PKEY = Internal.createUniqueKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("smartexam_requirements_for_sp_pkey"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.ID }, true);
    public static final UniqueKey<SmartexamRequirementsForSpItems_U74375Record> SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_PKEY = Internal.createUniqueKey(SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375, DSL.name("smartexam_requirements_for_sp_items_pkey"), new TableField[] { SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375.ID }, true);
    public static final UniqueKey<SmartexamRouteListRecord> SMARTEXAM_ROUTE_LIST_PKEY = Internal.createUniqueKey(SmartexamRouteList.SMARTEXAM_ROUTE_LIST, DSL.name("smartexam_route_list_pkey"), new TableField[] { SmartexamRouteList.SMARTEXAM_ROUTE_LIST.ID }, true);
    public static final UniqueKey<SmartexamServiceReportInstanceRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE_PKEY = Internal.createUniqueKey(SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE, DSL.name("smartexam_service_report_instance_pkey"), new TableField[] { SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE.ID }, true);
    public static final UniqueKey<SmartexamServiceReportInstanceTotalRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL_PKEY = Internal.createUniqueKey(SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL, DSL.name("smartexam_service_report_instance_total_pkey"), new TableField[] { SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL.ID }, true);
    public static final UniqueKey<SmartexamServiceReportStatisticsRecord> SMARTEXAM_SERVICE_REPORT_STATISTICS_PKEY = Internal.createUniqueKey(SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS, DSL.name("smartexam_service_report_statistics_pkey"), new TableField[] { SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS.ID }, true);
    public static final UniqueKey<SmartexamShopRecord> SMARTEXAM_SHOP_PKEY = Internal.createUniqueKey(SmartexamShop.SMARTEXAM_SHOP, DSL.name("smartexam_shop_pkey"), new TableField[] { SmartexamShop.SMARTEXAM_SHOP.ID }, true);
    public static final UniqueKey<SmartexamStandardTimeRecord> SMARTEXAM_STANDARD_TIME_PKEY = Internal.createUniqueKey(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME, DSL.name("smartexam_standard_time_pkey"), new TableField[] { SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.ID }, true);
    public static final UniqueKey<SmartexamStockRecord> SMARTEXAM_STOCK_PKEY = Internal.createUniqueKey(SmartexamStock.SMARTEXAM_STOCK, DSL.name("smartexam_stock_pkey"), new TableField[] { SmartexamStock.SMARTEXAM_STOCK.ID }, true);
    public static final UniqueKey<SmartexamTransportCostsRecord> SMARTEXAM_TRANSPORT_COSTS_PKEY = Internal.createUniqueKey(SmartexamTransportCosts.SMARTEXAM_TRANSPORT_COSTS, DSL.name("smartexam_transport_costs_pkey"), new TableField[] { SmartexamTransportCosts.SMARTEXAM_TRANSPORT_COSTS.ID }, true);
    public static final UniqueKey<SmartexamTransportCostsItemRecord> SMARTEXAM_TRANSPORT_COSTS_ITEM_PKEY = Internal.createUniqueKey(SmartexamTransportCostsItem.SMARTEXAM_TRANSPORT_COSTS_ITEM, DSL.name("smartexam_transport_costs_item_pkey"), new TableField[] { SmartexamTransportCostsItem.SMARTEXAM_TRANSPORT_COSTS_ITEM.ID }, true);
    public static final UniqueKey<SmartexamTransportFrom1cRecord> SMARTEXAM_TRANSPORT_FROM1C_PKEY = Internal.createUniqueKey(SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C, DSL.name("smartexam_transport_from1c_pkey"), new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.ID }, true);
    public static final UniqueKey<SmartexamTransportMileageListRecord> SMARTEXAM_TRANSPORT_MILEAGE_LIST_PKEY = Internal.createUniqueKey(SmartexamTransportMileageList.SMARTEXAM_TRANSPORT_MILEAGE_LIST, DSL.name("smartexam_transport_mileage_list_pkey"), new TableField[] { SmartexamTransportMileageList.SMARTEXAM_TRANSPORT_MILEAGE_LIST.ID }, true);
    public static final UniqueKey<SmartexamTransportTypeFrom1cRecord> SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY = Internal.createUniqueKey(SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C, DSL.name("smartexam_transport_type_from1c_pkey"), new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID }, true);
    public static final UniqueKey<SmartexamTransportTypeGroupingRecord> SMARTEXAM_TRANSPORT_TYPE_GROUPING_PKEY = Internal.createUniqueKey(SmartexamTransportTypeGrouping.SMARTEXAM_TRANSPORT_TYPE_GROUPING, DSL.name("smartexam_transport_type_grouping_pkey"), new TableField[] { SmartexamTransportTypeGrouping.SMARTEXAM_TRANSPORT_TYPE_GROUPING.ID }, true);
    public static final UniqueKey<SmartexamUsersFrom1cRecord> SMARTEXAM_USERS_FROM1C_PKEY = Internal.createUniqueKey(SmartexamUsersFrom1c.SMARTEXAM_USERS_FROM1C, DSL.name("smartexam_users_from1c_pkey"), new TableField[] { SmartexamUsersFrom1c.SMARTEXAM_USERS_FROM1C.ID }, true);
    public static final UniqueKey<SmartexamaddonBaseDocumentsRecord> SMARTEXAMADDON_BASE_DOCUMENTS_PKEY = Internal.createUniqueKey(SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS, DSL.name("smartexamaddon_base_documents_pkey"), new TableField[] { SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS.ID }, true);
    public static final UniqueKey<SmartexamaddonBaseGarbageContainerRecord> SMARTEXAMADDON_BASE_GARBAGE_CONTAINER_PKEY = Internal.createUniqueKey(SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER, DSL.name("smartexamaddon_base_garbage_container_pkey"), new TableField[] { SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.ID }, true);
    public static final UniqueKey<SmartexamaddonBaseLicenseRecord> SMARTEXAMADDON_BASE_LICENSE_PKEY = Internal.createUniqueKey(SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE, DSL.name("smartexamaddon_base_license_pkey"), new TableField[] { SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.ID }, true);
    public static final UniqueKey<SmartexamaddonBaseTransportRecord> SMARTEXAMADDON_BASE_TRANSPORT_PKEY = Internal.createUniqueKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("smartexamaddon_base_transport_pkey"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.ID }, true);
    public static final UniqueKey<SmartexamaddonBaseTransportTypeRecord> SMARTEXAMADDON_BASE_TRANSPORT_TYPE_PKEY = Internal.createUniqueKey(SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE, DSL.name("smartexamaddon_base_transport_type_pkey"), new TableField[] { SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE.ID }, true);
    public static final UniqueKey<SmartmonCheckItemValueRecord> SMARTMON_CHECK_ITEM_VALUE_PKEY = Internal.createUniqueKey(SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE, DSL.name("smartmon_check_item_value_pkey"), new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.ID }, true);
    public static final UniqueKey<SmartmonCheckListRecord> SMARTMON_CHECK_LIST_PKEY = Internal.createUniqueKey(SmartmonCheckList.SMARTMON_CHECK_LIST, DSL.name("smartmon_check_list_pkey"), new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.ID }, true);
    public static final UniqueKey<SmartmonCheckListInstanceRecord> SMARTMON_CHECK_LIST_INSTANCE_PKEY = Internal.createUniqueKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("smartmon_check_list_instance_pkey"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.ID }, true);
    public static final UniqueKey<SmartmonCheckListItemRecord> SMARTMON_CHECK_LIST_ITEM_PKEY = Internal.createUniqueKey(SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM, DSL.name("smartmon_check_list_item_pkey"), new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.ID }, true);
    public static final UniqueKey<SmartmonDivisionRecord> SMARTMON_DIVISION_PKEY = Internal.createUniqueKey(SmartmonDivision.SMARTMON_DIVISION, DSL.name("smartmon_division_pkey"), new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final UniqueKey<SmartmonTransportRecord> SMARTMON_TRANSPORT_PKEY = Internal.createUniqueKey(SmartmonTransport.SMARTMON_TRANSPORT, DSL.name("smartmon_transport_pkey"), new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final UniqueKey<SmartmonTransportTypeRecord> SMARTMON_TRANSPORT_TYPE_PKEY = Internal.createUniqueKey(SmartmonTransportType.SMARTMON_TRANSPORT_TYPE, DSL.name("smartmon_transport_type_pkey"), new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.ID }, true);
    public static final UniqueKey<SysAccessTokenRecord> SYS_ACCESS_TOKEN_PKEY = Internal.createUniqueKey(SysAccessToken.SYS_ACCESS_TOKEN, DSL.name("sys_access_token_pkey"), new TableField[] { SysAccessToken.SYS_ACCESS_TOKEN.ID }, true);
    public static final UniqueKey<SysAppFolderRecord> SYS_APP_FOLDER_PKEY = Internal.createUniqueKey(SysAppFolder.SYS_APP_FOLDER, DSL.name("sys_app_folder_pkey"), new TableField[] { SysAppFolder.SYS_APP_FOLDER.FOLDER_ID }, true);
    public static final UniqueKey<SysAttrValueRecord> SYS_ATTR_VALUE_PKEY = Internal.createUniqueKey(SysAttrValue.SYS_ATTR_VALUE, DSL.name("sys_attr_value_pkey"), new TableField[] { SysAttrValue.SYS_ATTR_VALUE.ID }, true);
    public static final UniqueKey<SysCategoryRecord> SYS_CATEGORY_PKEY = Internal.createUniqueKey(SysCategory.SYS_CATEGORY, DSL.name("sys_category_pkey"), new TableField[] { SysCategory.SYS_CATEGORY.ID }, true);
    public static final UniqueKey<SysCategoryAttrRecord> SYS_CATEGORY_ATTR_PKEY = Internal.createUniqueKey(SysCategoryAttr.SYS_CATEGORY_ATTR, DSL.name("sys_category_attr_pkey"), new TableField[] { SysCategoryAttr.SYS_CATEGORY_ATTR.ID }, true);
    public static final UniqueKey<SysConfigRecord> SYS_CONFIG_PKEY = Internal.createUniqueKey(SysConfig.SYS_CONFIG, DSL.name("sys_config_pkey"), new TableField[] { SysConfig.SYS_CONFIG.ID }, true);
    public static final UniqueKey<SysDbChangelogRecord> SYS_DB_CHANGELOG_PKEY = Internal.createUniqueKey(SysDbChangelog.SYS_DB_CHANGELOG, DSL.name("sys_db_changelog_pkey"), new TableField[] { SysDbChangelog.SYS_DB_CHANGELOG.SCRIPT_NAME }, true);
    public static final UniqueKey<SysEntitySnapshotRecord> SYS_ENTITY_SNAPSHOT_PKEY = Internal.createUniqueKey(SysEntitySnapshot.SYS_ENTITY_SNAPSHOT, DSL.name("sys_entity_snapshot_pkey"), new TableField[] { SysEntitySnapshot.SYS_ENTITY_SNAPSHOT.ID }, true);
    public static final UniqueKey<SysEntityStatisticsRecord> SYS_ENTITY_STATISTICS_PKEY = Internal.createUniqueKey(SysEntityStatistics.SYS_ENTITY_STATISTICS, DSL.name("sys_entity_statistics_pkey"), new TableField[] { SysEntityStatistics.SYS_ENTITY_STATISTICS.ID }, true);
    public static final UniqueKey<SysFileRecord> SYS_FILE_PKEY = Internal.createUniqueKey(SysFile.SYS_FILE, DSL.name("sys_file_pkey"), new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final UniqueKey<SysFolderRecord> SYS_FOLDER_PKEY = Internal.createUniqueKey(SysFolder.SYS_FOLDER, DSL.name("sys_folder_pkey"), new TableField[] { SysFolder.SYS_FOLDER.ID }, true);
    public static final UniqueKey<SysFtsQueueRecord> SYS_FTS_QUEUE_PKEY = Internal.createUniqueKey(SysFtsQueue.SYS_FTS_QUEUE, DSL.name("sys_fts_queue_pkey"), new TableField[] { SysFtsQueue.SYS_FTS_QUEUE.ID }, true);
    public static final UniqueKey<SysJmxInstanceRecord> SYS_JMX_INSTANCE_PKEY = Internal.createUniqueKey(SysJmxInstance.SYS_JMX_INSTANCE, DSL.name("sys_jmx_instance_pkey"), new TableField[] { SysJmxInstance.SYS_JMX_INSTANCE.ID }, true);
    public static final UniqueKey<SysLockConfigRecord> SYS_LOCK_CONFIG_PKEY = Internal.createUniqueKey(SysLockConfig.SYS_LOCK_CONFIG, DSL.name("sys_lock_config_pkey"), new TableField[] { SysLockConfig.SYS_LOCK_CONFIG.ID }, true);
    public static final UniqueKey<SysQueryResultRecord> SYS_QUERY_RESULT_PKEY = Internal.createUniqueKey(SysQueryResult.SYS_QUERY_RESULT, DSL.name("sys_query_result_pkey"), new TableField[] { SysQueryResult.SYS_QUERY_RESULT.ID }, true);
    public static final UniqueKey<SysRefreshTokenRecord> SYS_REFRESH_TOKEN_PKEY = Internal.createUniqueKey(SysRefreshToken.SYS_REFRESH_TOKEN, DSL.name("sys_refresh_token_pkey"), new TableField[] { SysRefreshToken.SYS_REFRESH_TOKEN.ID }, true);
    public static final UniqueKey<SysScheduledExecutionRecord> SYS_SCHEDULED_EXECUTION_PKEY = Internal.createUniqueKey(SysScheduledExecution.SYS_SCHEDULED_EXECUTION, DSL.name("sys_scheduled_execution_pkey"), new TableField[] { SysScheduledExecution.SYS_SCHEDULED_EXECUTION.ID }, true);
    public static final UniqueKey<SysScheduledTaskRecord> SYS_SCHEDULED_TASK_PKEY = Internal.createUniqueKey(SysScheduledTask.SYS_SCHEDULED_TASK, DSL.name("sys_scheduled_task_pkey"), new TableField[] { SysScheduledTask.SYS_SCHEDULED_TASK.ID }, true);
    public static final UniqueKey<SysSendingAttachmentRecord> SYS_SENDING_ATTACHMENT_PKEY = Internal.createUniqueKey(SysSendingAttachment.SYS_SENDING_ATTACHMENT, DSL.name("sys_sending_attachment_pkey"), new TableField[] { SysSendingAttachment.SYS_SENDING_ATTACHMENT.ID }, true);
    public static final UniqueKey<SysSendingMessageRecord> SYS_SENDING_MESSAGE_PKEY = Internal.createUniqueKey(SysSendingMessage.SYS_SENDING_MESSAGE, DSL.name("sys_sending_message_pkey"), new TableField[] { SysSendingMessage.SYS_SENDING_MESSAGE.ID }, true);
    public static final UniqueKey<SysServerRecord> SYS_SERVER_PKEY = Internal.createUniqueKey(SysServer.SYS_SERVER, DSL.name("sys_server_pkey"), new TableField[] { SysServer.SYS_SERVER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CompanyaddonBaseCompanyRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_COMPANY__FK_COMPANYADDON_BASE_COMPANY_ON_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY, DSL.name("fk_companyaddon_base_company_on_head_person"), new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.HEAD_PERSON }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseCompanyBaseDirectionLinkRecord, CompanyaddonBaseCompanyRecord> COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK__FK_BASCOMBASDIR_ON_BASE_COMPANY = Internal.createForeignKey(CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK, DSL.name("fk_bascombasdir_on_base_company"), new TableField[] { CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK.BASE_COMPANY_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<CompanyaddonBaseCompanyBaseDirectionLinkRecord, CompanyaddonBaseDirectionRecord> COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK__FK_BASCOMBASDIR_ON_BASE_DIRECTION = Internal.createForeignKey(CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK, DSL.name("fk_bascombasdir_on_base_direction"), new TableField[] { CompanyaddonBaseCompanyBaseDirectionLink.COMPANYADDON_BASE_COMPANY_BASE_DIRECTION_LINK.BASE_DIRECTION_ID }, Keys.COMPANYADDON_BASE_DIRECTION_PKEY, new TableField[] { CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION.ID }, true);
    public static final ForeignKey<CompanyaddonBaseCompanyBaseProjectLinkRecord, CompanyaddonBaseCompanyRecord> COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_COMPANY = Internal.createForeignKey(CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK, DSL.name("fk_bascombaspro_on_base_company"), new TableField[] { CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK.BASE_COMPANY_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<CompanyaddonBaseCompanyBaseProjectLinkRecord, CompanyaddonBaseProjectRecord> COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_PROJECT = Internal.createForeignKey(CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK, DSL.name("fk_bascombaspro_on_base_project"), new TableField[] { CompanyaddonBaseCompanyBaseProjectLink.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK.BASE_PROJECT_ID }, Keys.COMPANYADDON_BASE_PROJECT_PKEY, new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseContactBaseEmailLinkRecord, CompanyaddonBaseContactRecord> COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK__FK_BASCONBASEMA_ON_BASE_CONTACT = Internal.createForeignKey(CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK, DSL.name("fk_basconbasema_on_base_contact"), new TableField[] { CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK.BASE_CONTACT_ID }, Keys.COMPANYADDON_BASE_CONTACT_PKEY, new TableField[] { CompanyaddonBaseContact.COMPANYADDON_BASE_CONTACT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseContactBaseEmailLinkRecord, CompanyaddonBaseEmailRecord> COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK__FK_BASCONBASEMA_ON_BASE_EMAIL = Internal.createForeignKey(CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK, DSL.name("fk_basconbasema_on_base_email"), new TableField[] { CompanyaddonBaseContactBaseEmailLink.COMPANYADDON_BASE_CONTACT_BASE_EMAIL_LINK.BASE_EMAIL_ID }, Keys.COMPANYADDON_BASE_EMAIL_PKEY, new TableField[] { CompanyaddonBaseEmail.COMPANYADDON_BASE_EMAIL.ID }, true);
    public static final ForeignKey<CompanyaddonBaseContactBasePhoneNumberLinkRecord, CompanyaddonBaseContactRecord> COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK__FK_BASCONBASPHONUM_ON_BASE_CONTACT = Internal.createForeignKey(CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK, DSL.name("fk_basconbasphonum_on_base_contact"), new TableField[] { CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK.BASE_CONTACT_ID }, Keys.COMPANYADDON_BASE_CONTACT_PKEY, new TableField[] { CompanyaddonBaseContact.COMPANYADDON_BASE_CONTACT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseContactBasePhoneNumberLinkRecord, CompanyaddonBasePhoneNumberRecord> COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK__FK_BASCONBASPHONUM_ON_BASE_PHONE_NUMBER = Internal.createForeignKey(CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK, DSL.name("fk_basconbasphonum_on_base_phone_number"), new TableField[] { CompanyaddonBaseContactBasePhoneNumberLink.COMPANYADDON_BASE_CONTACT_BASE_PHONE_NUMBER_LINK.BASE_PHONE_NUMBER_ID }, Keys.COMPANYADDON_BASE_PHONE_NUMBER_PKEY, new TableField[] { CompanyaddonBasePhoneNumber.COMPANYADDON_BASE_PHONE_NUMBER.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentRecord, CompanyaddonBaseCompanyRecord> COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_COMPANY = Internal.createForeignKey(CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT, DSL.name("fk_companyaddon_base_department_on_company"), new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.COMPANY_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT, DSL.name("fk_companyaddon_base_department_on_head_person"), new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.HEAD_PERSON_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentRecord, CompanyaddonBaseDepartmentRecord> COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_PARENT_DEPARTMENT = Internal.createForeignKey(CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT, DSL.name("fk_companyaddon_base_department_on_parent_department"), new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.PARENT_DEPARTMENT_ID }, Keys.COMPANYADDON_BASE_DEPARTMENT_PKEY, new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentPositionRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_DEPARTMENT_POSITION__FK_COMPANYADDON_BASE_DEPARTMENT_POSITION_ON_BASE_EMPLOYEE = Internal.createForeignKey(CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION, DSL.name("fk_companyaddon_base_department_position_on_base_employee"), new TableField[] { CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION.BASE_EMPLOYEE_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentPositionRecord, CompanyaddonBaseCompanyRecord> COMPANYADDON_BASE_DEPARTMENT_POSITION__FK_COMPANYADDON_BASE_DEPARTMENT_POSITION_ON_COMPANY = Internal.createForeignKey(CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION, DSL.name("fk_companyaddon_base_department_position_on_company"), new TableField[] { CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION.COMPANY_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentPositionRecord, CompanyaddonBaseDepartmentRecord> COMPANYADDON_BASE_DEPARTMENT_POSITION__FK_COMPANYADDON_BASE_DEPARTMENT_POSITION_ON_DEPARTMENT = Internal.createForeignKey(CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION, DSL.name("fk_companyaddon_base_department_position_on_department"), new TableField[] { CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION.DEPARTMENT_ID }, Keys.COMPANYADDON_BASE_DEPARTMENT_PKEY, new TableField[] { CompanyaddonBaseDepartment.COMPANYADDON_BASE_DEPARTMENT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDepartmentPositionRecord, CompanyaddonBaseEmployeePositionRecord> COMPANYADDON_BASE_DEPARTMENT_POSITION__FK_COMPANYADDON_BASE_DEPARTMENT_POSITION_ON_POSITION = Internal.createForeignKey(CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION, DSL.name("fk_companyaddon_base_department_position_on_position"), new TableField[] { CompanyaddonBaseDepartmentPosition.COMPANYADDON_BASE_DEPARTMENT_POSITION.POSITION_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_POSITION_PKEY, new TableField[] { CompanyaddonBaseEmployeePosition.COMPANYADDON_BASE_EMPLOYEE_POSITION.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDirectionRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_DIRECTION__FK_COMPANYADDON_BASE_DIRECTION_ON_DEPUTY_HEAD = Internal.createForeignKey(CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION, DSL.name("fk_companyaddon_base_direction_on_deputy_head"), new TableField[] { CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION.DEPUTY_HEAD_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseDirectionRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_DIRECTION__FK_COMPANYADDON_BASE_DIRECTION_ON_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION, DSL.name("fk_companyaddon_base_direction_on_head_person"), new TableField[] { CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION.HEAD_PERSON_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseEmployeeRecord, CompanyaddonBaseContactRecord> COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_CONTACTS = Internal.createForeignKey(CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE, DSL.name("fk_companyaddon_base_employee_on_contacts"), new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.CONTACTS_ID }, Keys.COMPANYADDON_BASE_CONTACT_PKEY, new TableField[] { CompanyaddonBaseContact.COMPANYADDON_BASE_CONTACT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseEmployeeRecord, SecUserRecord> COMPANYADDON_BASE_EMPLOYEE__FK_COMPANYADDON_BASE_EMPLOYEE_ON_USER = Internal.createForeignKey(CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE, DSL.name("fk_companyaddon_base_employee_on_user"), new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<CompanyaddonBaseOrganizationalUnitRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT__FK_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_ON_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT, DSL.name("fk_companyaddon_base_organizational_unit_on_head_person"), new TableField[] { CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT.HEAD_PERSON }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseOrganizationalUnitRecord, CompanyaddonBaseOrganizationalUnitRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT__FK_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_ON_PARENT_UNIT = Internal.createForeignKey(CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT, DSL.name("fk_companyaddon_base_organizational_unit_on_parent_unit"), new TableField[] { CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT.PARENT_UNIT }, Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_PKEY, new TableField[] { CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseOrganizationalUnitEmployeeRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE_ON_EMPLOYEE = Internal.createForeignKey(CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE, DSL.name("fk_companyaddon_base_organizational_unit_employee_on_employee"), new TableField[] { CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE.EMPLOYEE }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseOrganizationalUnitEmployeeRecord, CompanyaddonBaseOrganizationalUnitRecord> COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE__FK_COMPANYADDON_BASEORGANIUNITEMPLOY_ON_ORGANIZATIONAL_UNIT = Internal.createForeignKey(CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE, DSL.name("fk_companyaddon_baseorganiunitemploy_on_organizational_unit"), new TableField[] { CompanyaddonBaseOrganizationalUnitEmployee.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_EMPLOYEE.ORGANIZATIONAL_UNIT }, Keys.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT_PKEY, new TableField[] { CompanyaddonBaseOrganizationalUnit.COMPANYADDON_BASE_ORGANIZATIONAL_UNIT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_PROJECT__FK_COMPANYADDON_BASE_PROJECT_ON_DEPUTY_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT, DSL.name("fk_companyaddon_base_project_on_deputy_head_person"), new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.DEPUTY_HEAD_PERSON_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_PROJECT__FK_COMPANYADDON_BASE_PROJECT_ON_HEAD_PERSON = Internal.createForeignKey(CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT, DSL.name("fk_companyaddon_base_project_on_head_person"), new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.HEAD_PERSON_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectBaseDirectionLinkRecord, CompanyaddonBaseDirectionRecord> COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK__FK_BASPROBASDIR_ON_BASE_DIRECTION = Internal.createForeignKey(CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK, DSL.name("fk_basprobasdir_on_base_direction"), new TableField[] { CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK.BASE_DIRECTION_ID }, Keys.COMPANYADDON_BASE_DIRECTION_PKEY, new TableField[] { CompanyaddonBaseDirection.COMPANYADDON_BASE_DIRECTION.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectBaseDirectionLinkRecord, CompanyaddonBaseProjectRecord> COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK__FK_BASPROBASDIR_ON_BASE_PROJECT = Internal.createForeignKey(CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK, DSL.name("fk_basprobasdir_on_base_project"), new TableField[] { CompanyaddonBaseProjectBaseDirectionLink.COMPANYADDON_BASE_PROJECT_BASE_DIRECTION_LINK.BASE_PROJECT_ID }, Keys.COMPANYADDON_BASE_PROJECT_PKEY, new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectEmployeeRecord, CompanyaddonBaseEmployeeRecord> COMPANYADDON_BASE_PROJECT_EMPLOYEE__FK_COMPANYADDON_BASE_PROJECT_EMPLOYEE_ON_EMPLOYEE = Internal.createForeignKey(CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE, DSL.name("fk_companyaddon_base_project_employee_on_employee"), new TableField[] { CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE.EMPLOYEE_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<CompanyaddonBaseProjectEmployeeRecord, CompanyaddonBaseProjectRecord> COMPANYADDON_BASE_PROJECT_EMPLOYEE__FK_COMPANYADDON_BASE_PROJECT_EMPLOYEE_ON_PROJECT = Internal.createForeignKey(CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE, DSL.name("fk_companyaddon_base_project_employee_on_project"), new TableField[] { CompanyaddonBaseProjectEmployee.COMPANYADDON_BASE_PROJECT_EMPLOYEE.PROJECT_ID }, Keys.COMPANYADDON_BASE_PROJECT_PKEY, new TableField[] { CompanyaddonBaseProject.COMPANYADDON_BASE_PROJECT.ID }, true);
    public static final ForeignKey<DdcrdDiagnoseExecutionLogRecord, SysFileRecord> DDCRD_DIAGNOSE_EXECUTION_LOG__FK_DDCRD_DIAGNOSE_EXECUTION_LOG_EXECUTION_RESULT_FILE = Internal.createForeignKey(DdcrdDiagnoseExecutionLog.DDCRD_DIAGNOSE_EXECUTION_LOG, DSL.name("fk_ddcrd_diagnose_execution_log_execution_result_file"), new TableField[] { DdcrdDiagnoseExecutionLog.DDCRD_DIAGNOSE_EXECUTION_LOG.EXECUTION_RESULT_FILE_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SecConstraintRecord, SecGroupRecord> SEC_CONSTRAINT__SEC_CONSTRAINT_GROUP = Internal.createForeignKey(SecConstraint.SEC_CONSTRAINT, DSL.name("sec_constraint_group"), new TableField[] { SecConstraint.SEC_CONSTRAINT.GROUP_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecEntityLogRecord, SecUserRecord> SEC_ENTITY_LOG__FK_SEC_ENTITY_LOG_USER = Internal.createForeignKey(SecEntityLog.SEC_ENTITY_LOG, DSL.name("fk_sec_entity_log_user"), new TableField[] { SecEntityLog.SEC_ENTITY_LOG.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecFilterRecord, SecUserRecord> SEC_FILTER__FK_SEC_FILTER_USER = Internal.createForeignKey(SecFilter.SEC_FILTER, DSL.name("fk_sec_filter_user"), new TableField[] { SecFilter.SEC_FILTER.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecGroupRecord, SecGroupRecord> SEC_GROUP__SEC_GROUP_PARENT = Internal.createForeignKey(SecGroup.SEC_GROUP, DSL.name("sec_group_parent"), new TableField[] { SecGroup.SEC_GROUP.PARENT_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecGroupHierarchyRecord, SecGroupRecord> SEC_GROUP_HIERARCHY__SEC_GROUP_HIERARCHY_GROUP = Internal.createForeignKey(SecGroupHierarchy.SEC_GROUP_HIERARCHY, DSL.name("sec_group_hierarchy_group"), new TableField[] { SecGroupHierarchy.SEC_GROUP_HIERARCHY.GROUP_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecGroupHierarchyRecord, SecGroupRecord> SEC_GROUP_HIERARCHY__SEC_GROUP_HIERARCHY_PARENT = Internal.createForeignKey(SecGroupHierarchy.SEC_GROUP_HIERARCHY, DSL.name("sec_group_hierarchy_parent"), new TableField[] { SecGroupHierarchy.SEC_GROUP_HIERARCHY.PARENT_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecLoggedAttrRecord, SecLoggedEntityRecord> SEC_LOGGED_ATTR__FK_SEC_LOGGED_ATTR_ENTITY = Internal.createForeignKey(SecLoggedAttr.SEC_LOGGED_ATTR, DSL.name("fk_sec_logged_attr_entity"), new TableField[] { SecLoggedAttr.SEC_LOGGED_ATTR.ENTITY_ID }, Keys.SEC_LOGGED_ENTITY_PKEY, new TableField[] { SecLoggedEntity.SEC_LOGGED_ENTITY.ID }, true);
    public static final ForeignKey<SecPermissionRecord, SecRoleRecord> SEC_PERMISSION__SEC_PERMISSION_ROLE = Internal.createForeignKey(SecPermission.SEC_PERMISSION, DSL.name("sec_permission_role"), new TableField[] { SecPermission.SEC_PERMISSION.ROLE_ID }, Keys.SEC_ROLE_PKEY, new TableField[] { SecRole.SEC_ROLE.ID }, true);
    public static final ForeignKey<SecPresentationRecord, SecUserRecord> SEC_PRESENTATION__SEC_PRESENTATION_USER = Internal.createForeignKey(SecPresentation.SEC_PRESENTATION, DSL.name("sec_presentation_user"), new TableField[] { SecPresentation.SEC_PRESENTATION.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecRememberMeRecord, SecUserRecord> SEC_REMEMBER_ME__FK_SEC_REMEMBER_ME_USER = Internal.createForeignKey(SecRememberMe.SEC_REMEMBER_ME, DSL.name("fk_sec_remember_me_user"), new TableField[] { SecRememberMe.SEC_REMEMBER_ME.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecScreenHistoryRecord, SecUserRecord> SEC_SCREEN_HISTORY__FK_SEC_HISTORY_SUBSTITUTED_USER = Internal.createForeignKey(SecScreenHistory.SEC_SCREEN_HISTORY, DSL.name("fk_sec_history_substituted_user"), new TableField[] { SecScreenHistory.SEC_SCREEN_HISTORY.SUBSTITUTED_USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecScreenHistoryRecord, SecUserRecord> SEC_SCREEN_HISTORY__FK_SEC_HISTORY_USER = Internal.createForeignKey(SecScreenHistory.SEC_SCREEN_HISTORY, DSL.name("fk_sec_history_user"), new TableField[] { SecScreenHistory.SEC_SCREEN_HISTORY.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecSearchFolderRecord, SysFolderRecord> SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_FOLDER = Internal.createForeignKey(SecSearchFolder.SEC_SEARCH_FOLDER, DSL.name("fk_sec_search_folder_folder"), new TableField[] { SecSearchFolder.SEC_SEARCH_FOLDER.FOLDER_ID }, Keys.SYS_FOLDER_PKEY, new TableField[] { SysFolder.SYS_FOLDER.ID }, true);
    public static final ForeignKey<SecSearchFolderRecord, SecPresentationRecord> SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_PRESENTATION = Internal.createForeignKey(SecSearchFolder.SEC_SEARCH_FOLDER, DSL.name("fk_sec_search_folder_presentation"), new TableField[] { SecSearchFolder.SEC_SEARCH_FOLDER.PRESENTATION_ID }, Keys.SEC_PRESENTATION_PKEY, new TableField[] { SecPresentation.SEC_PRESENTATION.ID }, true);
    public static final ForeignKey<SecSearchFolderRecord, SecUserRecord> SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_USER = Internal.createForeignKey(SecSearchFolder.SEC_SEARCH_FOLDER, DSL.name("fk_sec_search_folder_user"), new TableField[] { SecSearchFolder.SEC_SEARCH_FOLDER.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecSessionAttrRecord, SecGroupRecord> SEC_SESSION_ATTR__SEC_SESSION_ATTR_GROUP = Internal.createForeignKey(SecSessionAttr.SEC_SESSION_ATTR, DSL.name("sec_session_attr_group"), new TableField[] { SecSessionAttr.SEC_SESSION_ATTR.GROUP_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecSessionLogRecord, SecUserRecord> SEC_SESSION_LOG__FK_SEC_SESSION_LOG_SUBUSER = Internal.createForeignKey(SecSessionLog.SEC_SESSION_LOG, DSL.name("fk_sec_session_log_subuser"), new TableField[] { SecSessionLog.SEC_SESSION_LOG.SUBSTITUTED_USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecSessionLogRecord, SecUserRecord> SEC_SESSION_LOG__FK_SEC_SESSION_LOG_USER = Internal.createForeignKey(SecSessionLog.SEC_SESSION_LOG, DSL.name("fk_sec_session_log_user"), new TableField[] { SecSessionLog.SEC_SESSION_LOG.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecUserRecord, SecGroupRecord> SEC_USER__SEC_USER_GROUP = Internal.createForeignKey(SecUser.SEC_USER, DSL.name("sec_user_group"), new TableField[] { SecUser.SEC_USER.GROUP_ID }, Keys.SEC_GROUP_PKEY, new TableField[] { SecGroup.SEC_GROUP.ID }, true);
    public static final ForeignKey<SecUserRoleRecord, SecUserRecord> SEC_USER_ROLE__SEC_USER_ROLE_PROFILE = Internal.createForeignKey(SecUserRole.SEC_USER_ROLE, DSL.name("sec_user_role_profile"), new TableField[] { SecUserRole.SEC_USER_ROLE.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecUserRoleRecord, SecRoleRecord> SEC_USER_ROLE__SEC_USER_ROLE_ROLE = Internal.createForeignKey(SecUserRole.SEC_USER_ROLE, DSL.name("sec_user_role_role"), new TableField[] { SecUserRole.SEC_USER_ROLE.ROLE_ID }, Keys.SEC_ROLE_PKEY, new TableField[] { SecRole.SEC_ROLE.ID }, true);
    public static final ForeignKey<SecUserSettingRecord, SecUserRecord> SEC_USER_SETTING__SEC_USER_SETTING_USER = Internal.createForeignKey(SecUserSetting.SEC_USER_SETTING, DSL.name("sec_user_setting_user"), new TableField[] { SecUserSetting.SEC_USER_SETTING.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecUserSubstitutionRecord, SecUserRecord> SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_SUBSTITUTED_USER = Internal.createForeignKey(SecUserSubstitution.SEC_USER_SUBSTITUTION, DSL.name("fk_sec_user_substitution_substituted_user"), new TableField[] { SecUserSubstitution.SEC_USER_SUBSTITUTION.SUBSTITUTED_USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SecUserSubstitutionRecord, SecUserRecord> SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_USER = Internal.createForeignKey(SecUserSubstitution.SEC_USER_SUBSTITUTION, DSL.name("fk_sec_user_substitution_user"), new TableField[] { SecUserSubstitution.SEC_USER_SUBSTITUTION.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SmartexamCheckItemValuePhotosRecord, SmartmonCheckItemValueRecord> SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_CHECK_ITEM_VALUE = Internal.createForeignKey(SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS, DSL.name("fk_smartexam_check_item_value_photos_on_check_item_value"), new TableField[] { SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS.CHECK_ITEM_VALUE_ID }, Keys.SMARTMON_CHECK_ITEM_VALUE_PKEY, new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.ID }, true);
    public static final ForeignKey<SmartexamCheckItemValuePhotosRecord, SysFileRecord> SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_PHOTO = Internal.createForeignKey(SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS, DSL.name("fk_smartexam_check_item_value_photos_on_photo"), new TableField[] { SmartexamCheckItemValuePhotos.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartexamCheckListDivisionLinkRecord, SmartmonCheckListRecord> SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_CHECK_LIST = Internal.createForeignKey(SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK, DSL.name("fk_chelisdiv_on_check_list"), new TableField[] { SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK.CHECK_LIST_ID }, Keys.SMARTMON_CHECK_LIST_PKEY, new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.ID }, true);
    public static final ForeignKey<SmartexamCheckListDivisionLinkRecord, SmartmonDivisionRecord> SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_DIVISION = Internal.createForeignKey(SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK, DSL.name("fk_chelisdiv_on_division"), new TableField[] { SmartexamCheckListDivisionLink.SMARTEXAM_CHECK_LIST_DIVISION_LINK.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamCheckListItemCheckListLinkRecord, SmartmonCheckListRecord> SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST = Internal.createForeignKey(SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK, DSL.name("fk_chelisitechelis_on_check_list"), new TableField[] { SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK.CHECK_LIST_ID }, Keys.SMARTMON_CHECK_LIST_PKEY, new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.ID }, true);
    public static final ForeignKey<SmartexamCheckListItemCheckListLinkRecord, SmartmonCheckListItemRecord> SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST_ITEM = Internal.createForeignKey(SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK, DSL.name("fk_chelisitechelis_on_check_list_item"), new TableField[] { SmartexamCheckListItemCheckListLink.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK.CHECK_LIST_ITEM_ID }, Keys.SMARTMON_CHECK_LIST_ITEM_PKEY, new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.ID }, true);
    public static final ForeignKey<SmartexamCheckListTransportTypeLinkRecord, SmartmonCheckListRecord> SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_CHECK_LIST = Internal.createForeignKey(SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK, DSL.name("fk_chelistratyp_on_check_list"), new TableField[] { SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK.CHECK_LIST_ID }, Keys.SMARTMON_CHECK_LIST_PKEY, new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.ID }, true);
    public static final ForeignKey<SmartexamCheckListTransportTypeLinkRecord, SmartmonTransportTypeRecord> SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK, DSL.name("fk_chelistratyp_on_transport_type"), new TableField[] { SmartexamCheckListTransportTypeLink.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK.TRANSPORT_TYPE_ID }, Keys.SMARTMON_TRANSPORT_TYPE_PKEY, new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorkValueRecord, SysFileRecord> SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PHOTO = Internal.createForeignKey(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE, DSL.name("fk_smartexam_check_list_work_value_on_photo"), new TableField[] { SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorkValueRecord, SmartexamPlanRecord> SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PLAN = Internal.createForeignKey(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE, DSL.name("fk_smartexam_check_list_work_value_on_plan"), new TableField[] { SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.PLAN_ID }, Keys.SMARTEXAM_PLAN_PKEY, new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorkValueRecord, SmartexamRepairRequestWorkRecord> SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_REPAIR_REQUEST_WORK = Internal.createForeignKey(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE, DSL.name("fk_smartexam_check_list_work_value_on_repair_request_work"), new TableField[] { SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.REPAIR_REQUEST_WORK_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY, new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorksRecord, SmartexamTransportTypeFrom1cRecord> SMARTEXAM_CHECK_LIST_WORKS__FK_SMARTEXAM_CHECK_LIST_WORKS_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS, DSL.name("fk_smartexam_check_list_works_on_transport_type"), new TableField[] { SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS.TRANSPORT_TYPE_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY, new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorksRepairRequestWorkLinkRecord, SmartexamCheckListWorksRecord> SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK__FK_CHELISWORREPREQWOR_ON_CHECK_LIST_WORKS = Internal.createForeignKey(SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK, DSL.name("fk_chelisworrepreqwor_on_check_list_works"), new TableField[] { SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK.CHECK_LIST_WORKS_ID }, Keys.SMARTEXAM_CHECK_LIST_WORKS_PKEY, new TableField[] { SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS.ID }, true);
    public static final ForeignKey<SmartexamCheckListWorksRepairRequestWorkLinkRecord, SmartexamRepairRequestWorkRecord> SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK__FK_CHELISWORREPREQWOR_ON_REPAIR_REQUEST_WORK = Internal.createForeignKey(SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK, DSL.name("fk_chelisworrepreqwor_on_repair_request_work"), new TableField[] { SmartexamCheckListWorksRepairRequestWorkLink.SMARTEXAM_CHECK_LIST_WORKS_REPAIR_REQUEST_WORK_LINK.REPAIR_REQUEST_WORK_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY, new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final ForeignKey<SmartexamDailyTransportStatusRecord, SmartmonTransportRecord> SMARTEXAM_DAILY_TRANSPORT_STATUS__FK_SMARTEXAM_DAILY_TRANSPORT_STATUS_ON_TRANSPORT = Internal.createForeignKey(SmartexamDailyTransportStatus.SMARTEXAM_DAILY_TRANSPORT_STATUS, DSL.name("fk_smartexam_daily_transport_status_on_transport"), new TableField[] { SmartexamDailyTransportStatus.SMARTEXAM_DAILY_TRANSPORT_STATUS.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamDivisionAccessControlRecord, SecUserRecord> SMARTEXAM_DIVISION_ACCESS_CONTROL__FK_SMARTEXAM_DIVISION_ACCESS_CONTROL_ON_USER = Internal.createForeignKey(SmartexamDivisionAccessControl.SMARTEXAM_DIVISION_ACCESS_CONTROL, DSL.name("fk_smartexam_division_access_control_on_user"), new TableField[] { SmartexamDivisionAccessControl.SMARTEXAM_DIVISION_ACCESS_CONTROL.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SmartexamDivisionAccessControlDivisionLinkRecord, SmartmonDivisionRecord> SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION = Internal.createForeignKey(SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK, DSL.name("fk_divacccondiv_on_division"), new TableField[] { SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamDivisionAccessControlDivisionLinkRecord, SmartexamDivisionAccessControlRecord> SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK__FK_DIVACCCONDIV_ON_DIVISION_ACCESS_CONTROL = Internal.createForeignKey(SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK, DSL.name("fk_divacccondiv_on_division_access_control"), new TableField[] { SmartexamDivisionAccessControlDivisionLink.SMARTEXAM_DIVISION_ACCESS_CONTROL_DIVISION_LINK.DIVISION_ACCESS_CONTROL_ID }, Keys.SMARTEXAM_DIVISION_ACCESS_CONTROL_PKEY, new TableField[] { SmartexamDivisionAccessControl.SMARTEXAM_DIVISION_ACCESS_CONTROL.ID }, true);
    public static final ForeignKey<SmartexamEmployeeRecord, SmartmonDivisionRecord> SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_DIVISION = Internal.createForeignKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("fk_smartexam_employee_on_division"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamEmployeeRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_EMPLOYEE_FROM1C = Internal.createForeignKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("fk_smartexam_employee_on_employee_from1c"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.EMPLOYEE_FROM1C_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamEmployeeRecord, SmartexamPositionsRecord> SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_POSITION = Internal.createForeignKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("fk_smartexam_employee_on_position"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.POSITION_ID }, Keys.SMARTEXAM_POSITIONS_PKEY, new TableField[] { SmartexamPositions.SMARTEXAM_POSITIONS.ID }, true);
    public static final ForeignKey<SmartexamEmployeeRecord, SecUserRecord> SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER = Internal.createForeignKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("fk_smartexam_employee_on_user"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.USER_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SmartexamEmployeeRecord, SmartexamUsersFrom1cRecord> SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER_FROM1C = Internal.createForeignKey(SmartexamEmployee.SMARTEXAM_EMPLOYEE, DSL.name("fk_smartexam_employee_on_user_from1c"), new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.USER_FROM1C_ID }, Keys.SMARTEXAM_USERS_FROM1C_PKEY, new TableField[] { SmartexamUsersFrom1c.SMARTEXAM_USERS_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamExecutorRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_EMPLOYEE = Internal.createForeignKey(SmartexamExecutor.SMARTEXAM_EXECUTOR, DSL.name("fk_smartexam_executor_on_employee"), new TableField[] { SmartexamExecutor.SMARTEXAM_EXECUTOR.EMPLOYEE_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamExecutorRecord, SmartexamRepairRequestRecord> SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_REPAIR_REQUEST = Internal.createForeignKey(SmartexamExecutor.SMARTEXAM_EXECUTOR, DSL.name("fk_smartexam_executor_on_repair_request"), new TableField[] { SmartexamExecutor.SMARTEXAM_EXECUTOR.REPAIR_REQUEST_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_PKEY, new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ID }, true);
    public static final ForeignKey<SmartexamFinesRecord, SmartexamOrganizationRecord> SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_COST_ORGANIZATION = Internal.createForeignKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("fk_smartexam_fines_on_cost_organization"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.COST_ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamFinesRecord, SmartexamEmployeeRecord> SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIRVER = Internal.createForeignKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("fk_smartexam_fines_on_dirver"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.DIRVER_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamFinesRecord, SmartmonDivisionRecord> SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIVISION = Internal.createForeignKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("fk_smartexam_fines_on_division"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamFinesRecord, SmartexamBillsSupplierRecord> SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_SUPPLIER = Internal.createForeignKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("fk_smartexam_fines_on_supplier"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.SUPPLIER_ID }, Keys.SMARTEXAM_BILLS_SUPPLIER_PKEY, new TableField[] { SmartexamBillsSupplier.SMARTEXAM_BILLS_SUPPLIER.ID }, true);
    public static final ForeignKey<SmartexamFinesRecord, SmartexamTransportFrom1cRecord> SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_TRANSPORT = Internal.createForeignKey(SmartexamFines.SMARTEXAM_FINES, DSL.name("fk_smartexam_fines_on_transport"), new TableField[] { SmartexamFines.SMARTEXAM_FINES.TRANSPORT_ID }, Keys.SMARTEXAM_TRANSPORT_FROM1C_PKEY, new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamInstanceDateRecord, SmartmonDivisionRecord> SMARTEXAM_INSTANCE_DATE__FK_SMARTEXAM_INSTANCE_DATE_ON_DIVISION = Internal.createForeignKey(SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE, DSL.name("fk_smartexam_instance_date_on_division"), new TableField[] { SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamKpiInstanceValueRecord, SmartexamKpiInstanceRecord> SMARTEXAM_KPI_INSTANCE_VALUE__FK_SMARTEXAM_KPI_INSTANCE_VALUE_ON_KPI_INSTANCE = Internal.createForeignKey(SmartexamKpiInstanceValue.SMARTEXAM_KPI_INSTANCE_VALUE, DSL.name("fk_smartexam_kpi_instance_value_on_kpi_instance"), new TableField[] { SmartexamKpiInstanceValue.SMARTEXAM_KPI_INSTANCE_VALUE.KPI_INSTANCE_ID }, Keys.SMARTEXAM_KPI_INSTANCE_PKEY, new TableField[] { SmartexamKpiInstance.SMARTEXAM_KPI_INSTANCE.ID }, true);
    public static final ForeignKey<SmartexamLimitsTsRecord, SmartmonTransportTypeRecord> SMARTEXAM_LIMITS_TS__FK_SMARTEXAM_LIMITS_TS_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamLimitsTs.SMARTEXAM_LIMITS_TS, DSL.name("fk_smartexam_limits_ts_on_transport_type"), new TableField[] { SmartexamLimitsTs.SMARTEXAM_LIMITS_TS.TRANSPORT_TYPE_ID }, Keys.SMARTMON_TRANSPORT_TYPE_PKEY, new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartexamLogbookRecord, SmartexamEmployeeRecord> SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_EMPLOYEE = Internal.createForeignKey(SmartexamLogbook.SMARTEXAM_LOGBOOK, DSL.name("fk_smartexam_logbook_on_employee"), new TableField[] { SmartexamLogbook.SMARTEXAM_LOGBOOK.EMPLOYEE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamLogbookRecord, SmartexamEmployeeRecord> SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_RESPONSIBLE = Internal.createForeignKey(SmartexamLogbook.SMARTEXAM_LOGBOOK, DSL.name("fk_smartexam_logbook_on_responsible"), new TableField[] { SmartexamLogbook.SMARTEXAM_LOGBOOK.RESPONSIBLE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamLogbookRecord, SmartmonTransportRecord> SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_TRANSPORT = Internal.createForeignKey(SmartexamLogbook.SMARTEXAM_LOGBOOK, DSL.name("fk_smartexam_logbook_on_transport"), new TableField[] { SmartexamLogbook.SMARTEXAM_LOGBOOK.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamLogbookFileDescriptorLinkRecord, SysFileRecord> SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_FILE_DESCRIPTOR = Internal.createForeignKey(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK, DSL.name("fk_logfildes_on_file_descriptor"), new TableField[] { SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.FILE_DESCRIPTOR_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartexamLogbookFileDescriptorLinkRecord, SmartexamLogbookRecord> SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_LOGBOOK = Internal.createForeignKey(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK, DSL.name("fk_logfildes_on_logbook"), new TableField[] { SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.LOGBOOK_ID }, Keys.SMARTEXAM_LOGBOOK_PKEY, new TableField[] { SmartexamLogbook.SMARTEXAM_LOGBOOK.ID }, true);
    public static final ForeignKey<SmartexamNfcTagRecord, SmartmonTransportRecord> SMARTEXAM_NFC_TAG__FK_SMARTEXAM_NFC_TAG_ON_TRANSPORT = Internal.createForeignKey(SmartexamNfcTag.SMARTEXAM_NFC_TAG, DSL.name("fk_smartexam_nfc_tag_on_transport"), new TableField[] { SmartexamNfcTag.SMARTEXAM_NFC_TAG.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamOrganizationRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_ORGANIZATION__FK_SMARTEXAM_ORGANIZATION_ON_HEAD_PERSON = Internal.createForeignKey(SmartexamOrganization.SMARTEXAM_ORGANIZATION, DSL.name("fk_smartexam_organization_on_head_person"), new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.HEAD_PERSON }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamPlanRecord, SmartexamCheckListWorksRecord> SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_CHECK_LIST_WORK = Internal.createForeignKey(SmartexamPlan.SMARTEXAM_PLAN, DSL.name("fk_smartexam_plan_on_check_list_work"), new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.CHECK_LIST_WORK_ID }, Keys.SMARTEXAM_CHECK_LIST_WORKS_PKEY, new TableField[] { SmartexamCheckListWorks.SMARTEXAM_CHECK_LIST_WORKS.ID }, true);
    public static final ForeignKey<SmartexamPlanRecord, SmartexamEmployeeRecord> SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_EMPLOYEE = Internal.createForeignKey(SmartexamPlan.SMARTEXAM_PLAN, DSL.name("fk_smartexam_plan_on_employee"), new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.EMPLOYEE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamPlanRecord, SmartexamRepairBlockRecord> SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_REPAIR_BLOCK = Internal.createForeignKey(SmartexamPlan.SMARTEXAM_PLAN, DSL.name("fk_smartexam_plan_on_repair_block"), new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.REPAIR_BLOCK_ID }, Keys.SMARTEXAM_REPAIR_BLOCK_PKEY, new TableField[] { SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK.ID }, true);
    public static final ForeignKey<SmartexamPlanRecord, SmartmonTransportRecord> SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_TRANSPORT = Internal.createForeignKey(SmartexamPlan.SMARTEXAM_PLAN, DSL.name("fk_smartexam_plan_on_transport"), new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamPositionsRolesRecord, SmartexamPositionsRecord> SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_POSITIONS = Internal.createForeignKey(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES, DSL.name("fk_posrol_on_positions"), new TableField[] { SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.POSITION_ID }, Keys.SMARTEXAM_POSITIONS_PKEY, new TableField[] { SmartexamPositions.SMARTEXAM_POSITIONS.ID }, true);
    public static final ForeignKey<SmartexamPositionsRolesRecord, SecRoleRecord> SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_ROLE = Internal.createForeignKey(SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES, DSL.name("fk_posrol_on_role"), new TableField[] { SmartexamPositionsRoles.SMARTEXAM_POSITIONS_ROLES.ROLE_ID }, Keys.SEC_ROLE_PKEY, new TableField[] { SecRole.SEC_ROLE.ID }, true);
    public static final ForeignKey<SmartexamRepairBlockRecord, SmartmonDivisionRecord> SMARTEXAM_REPAIR_BLOCK__FK_SMARTEXAM_REPAIR_BLOCK_ON_DIVISION = Internal.createForeignKey(SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK, DSL.name("fk_smartexam_repair_block_on_division"), new TableField[] { SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamRepairBlockStatusRecord, SmartexamPlanRecord> SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_PLAN = Internal.createForeignKey(SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS, DSL.name("fk_smartexam_repair_block_status_on_plan"), new TableField[] { SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS.PLAN_ID }, Keys.SMARTEXAM_PLAN_PKEY, new TableField[] { SmartexamPlan.SMARTEXAM_PLAN.ID }, true);
    public static final ForeignKey<SmartexamRepairBlockStatusRecord, SmartexamRepairBlockRecord> SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_REPAIR_BLOCK = Internal.createForeignKey(SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS, DSL.name("fk_smartexam_repair_block_status_on_repair_block"), new TableField[] { SmartexamRepairBlockStatus.SMARTEXAM_REPAIR_BLOCK_STATUS.REPAIR_BLOCK_ID }, Keys.SMARTEXAM_REPAIR_BLOCK_PKEY, new TableField[] { SmartexamRepairBlock.SMARTEXAM_REPAIR_BLOCK.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartmonCheckListInstanceRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_CHECK_LIST = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_check_list"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.CHECK_LIST_ID }, Keys.SMARTMON_CHECK_LIST_INSTANCE_PKEY, new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartexamEmployeeRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_DRIVER = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_driver"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.DRIVER_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_EMPLOYEE = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_employee"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.EMPLOYEE_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_MASTER = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_master"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.MASTER_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, CompanyaddonBaseEmployeeRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_MECHANIC = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_mechanic"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.MECHANIC_ID }, Keys.COMPANYADDON_BASE_EMPLOYEE_PKEY, new TableField[] { CompanyaddonBaseEmployee.COMPANYADDON_BASE_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartexamOrganizationRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_ORGANIZATION = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_organization"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartexamShopRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_SHOP = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_shop"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.SHOP_ID }, Keys.SMARTEXAM_SHOP_PKEY, new TableField[] { SmartexamShop.SMARTEXAM_SHOP.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartexamStockRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_STOCK = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_stock"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.STOCK_ID }, Keys.SMARTEXAM_STOCK_PKEY, new TableField[] { SmartexamStock.SMARTEXAM_STOCK.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestRecord, SmartmonTransportRecord> SMARTEXAM_REPAIR_REQUEST__FK_SMARTEXAM_REPAIR_REQUEST_ON_TRANSPORT = Internal.createForeignKey(SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST, DSL.name("fk_smartexam_repair_request_on_transport"), new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestInstanceRecord, SmartexamRepairRequestInstanceRecord> SMARTEXAM_REPAIR_REQUEST_INSTANCE__FK_SMARTEXAM_REPAIR_REQUEST_INSTANCE_ON_PARENT_INSTANCE = Internal.createForeignKey(SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE, DSL.name("fk_smartexam_repair_request_instance_on_parent_instance"), new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.PARENT_INSTANCE_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_INSTANCE_PKEY, new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestInstanceRecord, SmartexamRepairRequestRecord> SMARTEXAM_REPAIR_REQUEST_INSTANCE__FK_SMARTEXAM_REPAIR_REQUEST_INSTANCE_ON_REPAIR_REQUEST = Internal.createForeignKey(SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE, DSL.name("fk_smartexam_repair_request_instance_on_repair_request"), new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.REPAIR_REQUEST_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_PKEY, new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestInstanceRecord, SmartexamRepairRequestWorkRecord> SMARTEXAM_REPAIR_REQUEST_INSTANCE__FK_SMARTEXAM_REPAIR_REQUEST_INSTANCE_ON_WORK = Internal.createForeignKey(SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE, DSL.name("fk_smartexam_repair_request_instance_on_work"), new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.WORK_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY, new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestSparePartsRecord, SmartexamRepairRequestRecord> SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS__FK_SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS_ON_REPAIR_REQUEST = Internal.createForeignKey(SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS, DSL.name("fk_smartexam_repair_request_spare_parts_on_repair_request"), new TableField[] { SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS.REPAIR_REQUEST_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_PKEY, new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestSparePartsRecord, SmartexamRepairRequestInstanceRecord> SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS__FK_SMARTEXAM_REPAIREQUESPAREPARTS_ON_REPAIR_REQUEST_INSTANCE = Internal.createForeignKey(SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS, DSL.name("fk_smartexam_repairequespareparts_on_repair_request_instance"), new TableField[] { SmartexamRepairRequestSpareParts.SMARTEXAM_REPAIR_REQUEST_SPARE_PARTS.REPAIR_REQUEST_INSTANCE_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_INSTANCE_PKEY, new TableField[] { SmartexamRepairRequestInstance.SMARTEXAM_REPAIR_REQUEST_INSTANCE.ID }, true);
    public static final ForeignKey<SmartexamRepairRequestWorkRecord, SmartexamRepairRequestWorkRecord> SMARTEXAM_REPAIR_REQUEST_WORK__FK_SMARTEXAM_REPAIR_REQUEST_WORK_ON_PARENT = Internal.createForeignKey(SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK, DSL.name("fk_smartexam_repair_request_work_on_parent"), new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.PARENT_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY, new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final ForeignKey<SmartexamRepairZoneRecord, SmartexamOrganizationRecord> SMARTEXAM_REPAIR_ZONE__FK_SMARTEXAM_REPAIR_ZONE_ON_ORGANIZATION = Internal.createForeignKey(SmartexamRepairZone.SMARTEXAM_REPAIR_ZONE, DSL.name("fk_smartexam_repair_zone_on_organization"), new TableField[] { SmartexamRepairZone.SMARTEXAM_REPAIR_ZONE.ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpRecord, SmartmonDivisionRecord> SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_DIVISION = Internal.createForeignKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("fk_smartexam_requirements_for_sp_on_division"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpRecord, SmartexamNomenclatureRecord> SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_NOMENCLATURE = Internal.createForeignKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("fk_smartexam_requirements_for_sp_on_nomenclature"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.NOMENCLATURE_ID }, Keys.SMARTEXAM_NOMENCLATURE_PKEY, new TableField[] { SmartexamNomenclature.SMARTEXAM_NOMENCLATURE.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpRecord, SmartexamOrganizationRecord> SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_ORGANIZATION = Internal.createForeignKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("fk_smartexam_requirements_for_sp_on_organization"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpRecord, SysFileRecord> SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_PHOTO = Internal.createForeignKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("fk_smartexam_requirements_for_sp_on_photo"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpRecord, SmartexamRepairRequestRecord> SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_REPAIR_REQUEST = Internal.createForeignKey(SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP, DSL.name("fk_smartexam_requirements_for_sp_on_repair_request"), new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.REPAIR_REQUEST_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_PKEY, new TableField[] { SmartexamRepairRequest.SMARTEXAM_REPAIR_REQUEST.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpItems_U74375Record, SmartexamNomenclatureRecord> SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_NOMENCLATURE = Internal.createForeignKey(SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375, DSL.name("fk_smartexam_requirements_for_sp_items_on_nomenclature"), new TableField[] { SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375.NOMENCLATURE_ID }, Keys.SMARTEXAM_NOMENCLATURE_PKEY, new TableField[] { SmartexamNomenclature.SMARTEXAM_NOMENCLATURE.ID }, true);
    public static final ForeignKey<SmartexamRequirementsForSpItems_U74375Record, SmartexamRequirementsForSpRecord> SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS_ON_REQUIREMENTS_FOR_SP = Internal.createForeignKey(SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375, DSL.name("fk_smartexam_requirements_for_sp_items_on_requirements_for_sp"), new TableField[] { SmartexamRequirementsForSpItems_U74375.SMARTEXAM_REQUIREMENTS_FOR_SP_ITEMS__U74375.REQUIREMENTS_FOR_SP_ID }, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_PKEY, new TableField[] { SmartexamRequirementsForSp.SMARTEXAM_REQUIREMENTS_FOR_SP.ID }, true);
    public static final ForeignKey<SmartexamRouteListRecord, SmartmonDivisionRecord> SMARTEXAM_ROUTE_LIST__FK_SMARTEXAM_ROUTE_LIST_ON_DIVISION = Internal.createForeignKey(SmartexamRouteList.SMARTEXAM_ROUTE_LIST, DSL.name("fk_smartexam_route_list_on_division"), new TableField[] { SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamRouteListRecord, SmartexamEmployeeRecord> SMARTEXAM_ROUTE_LIST__FK_SMARTEXAM_ROUTE_LIST_ON_DRIVER = Internal.createForeignKey(SmartexamRouteList.SMARTEXAM_ROUTE_LIST, DSL.name("fk_smartexam_route_list_on_driver"), new TableField[] { SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DRIVER_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamRouteListRecord, SmartmonTransportRecord> SMARTEXAM_ROUTE_LIST__FK_SMARTEXAM_ROUTE_LIST_ON_TRANSPORT = Internal.createForeignKey(SmartexamRouteList.SMARTEXAM_ROUTE_LIST, DSL.name("fk_smartexam_route_list_on_transport"), new TableField[] { SmartexamRouteList.SMARTEXAM_ROUTE_LIST.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamServiceReportInstanceRecord, SmartmonCheckListInstanceRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE__FK_SMARTEXAM_SERVICE_REPORT_INSTANCE_ON_CHECK_LIST_INSTANCE = Internal.createForeignKey(SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE, DSL.name("fk_smartexam_service_report_instance_on_check_list_instance"), new TableField[] { SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE.CHECK_LIST_INSTANCE_ID }, Keys.SMARTMON_CHECK_LIST_INSTANCE_PKEY, new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.ID }, true);
    public static final ForeignKey<SmartexamServiceReportInstanceRecord, SmartmonDivisionRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE__FK_SMARTEXAM_SERVICE_REPORT_INSTANCE_ON_DIVISION = Internal.createForeignKey(SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE, DSL.name("fk_smartexam_service_report_instance_on_division"), new TableField[] { SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamServiceReportInstanceRecord, SmartmonTransportRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE__FK_SMARTEXAM_SERVICE_REPORT_INSTANCE_ON_TRANSPORT = Internal.createForeignKey(SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE, DSL.name("fk_smartexam_service_report_instance_on_transport"), new TableField[] { SmartexamServiceReportInstance.SMARTEXAM_SERVICE_REPORT_INSTANCE.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamServiceReportInstanceTotalRecord, SmartmonDivisionRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL__FK_SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL_ON_DIVISION = Internal.createForeignKey(SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL, DSL.name("fk_smartexam_service_report_instance_total_on_division"), new TableField[] { SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamServiceReportInstanceTotalRecord, SmartmonTransportRecord> SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL__FK_SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL_ON_TRANSPORT = Internal.createForeignKey(SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL, DSL.name("fk_smartexam_service_report_instance_total_on_transport"), new TableField[] { SmartexamServiceReportInstanceTotal.SMARTEXAM_SERVICE_REPORT_INSTANCE_TOTAL.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamServiceReportStatisticsRecord, SmartmonDivisionRecord> SMARTEXAM_SERVICE_REPORT_STATISTICS__FK_SMARTEXAM_SERVICE_REPORT_STATISTICS_ON_DIVISION = Internal.createForeignKey(SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS, DSL.name("fk_smartexam_service_report_statistics_on_division"), new TableField[] { SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartexamServiceReportStatisticsRecord, SmartexamTransportTypeGroupingRecord> SMARTEXAM_SERVICE_REPORT_STATISTICS__FK_SMARTEXAM_SERVICE_REPORT_STATISTICS_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS, DSL.name("fk_smartexam_service_report_statistics_on_transport_type"), new TableField[] { SmartexamServiceReportStatistics.SMARTEXAM_SERVICE_REPORT_STATISTICS.TRANSPORT_TYPE_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_GROUPING_PKEY, new TableField[] { SmartexamTransportTypeGrouping.SMARTEXAM_TRANSPORT_TYPE_GROUPING.ID }, true);
    public static final ForeignKey<SmartexamShopRecord, SmartexamShopRecord> SMARTEXAM_SHOP__FK_SMARTEXAM_SHOP_ON_PARENT_SHOP = Internal.createForeignKey(SmartexamShop.SMARTEXAM_SHOP, DSL.name("fk_smartexam_shop_on_parent_shop"), new TableField[] { SmartexamShop.SMARTEXAM_SHOP.PARENT_SHOP_ID }, Keys.SMARTEXAM_SHOP_PKEY, new TableField[] { SmartexamShop.SMARTEXAM_SHOP.ID }, true);
    public static final ForeignKey<SmartexamStandardTimeRecord, SmartexamRepairRequestWorkRecord> SMARTEXAM_STANDARD_TIME__FK_SMARTEXAM_STANDARD_TIME_ON_REPAIR_REQUEST_WORK = Internal.createForeignKey(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME, DSL.name("fk_smartexam_standard_time_on_repair_request_work"), new TableField[] { SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.REPAIR_REQUEST_WORK_ID }, Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY, new TableField[] { SmartexamRepairRequestWork.SMARTEXAM_REPAIR_REQUEST_WORK.ID }, true);
    public static final ForeignKey<SmartexamStandardTimeRecord, SmartexamTransportTypeFrom1cRecord> SMARTEXAM_STANDARD_TIME__FK_SMARTEXAM_STANDARD_TIME_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME, DSL.name("fk_smartexam_standard_time_on_transport_type"), new TableField[] { SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.TRANSPORT_TYPE_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY, new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamStockRecord, SmartexamStockRecord> SMARTEXAM_STOCK__FK_SMARTEXAM_STOCK_ON_PARENT_STOCK = Internal.createForeignKey(SmartexamStock.SMARTEXAM_STOCK, DSL.name("fk_smartexam_stock_on_parent_stock"), new TableField[] { SmartexamStock.SMARTEXAM_STOCK.PARENT_STOCK_ID }, Keys.SMARTEXAM_STOCK_PKEY, new TableField[] { SmartexamStock.SMARTEXAM_STOCK.ID }, true);
    public static final ForeignKey<SmartexamTransportCostsRecord, SmartmonTransportRecord> SMARTEXAM_TRANSPORT_COSTS__FK_SMARTEXAM_TRANSPORT_COSTS_ON_TRANSPORT = Internal.createForeignKey(SmartexamTransportCosts.SMARTEXAM_TRANSPORT_COSTS, DSL.name("fk_smartexam_transport_costs_on_transport"), new TableField[] { SmartexamTransportCosts.SMARTEXAM_TRANSPORT_COSTS.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamTransportCostsItemRecord, SmartexamTransportCostsRecord> SMARTEXAM_TRANSPORT_COSTS_ITEM__FK_SMARTEXAM_TRANSPORT_COSTS_ITEM_ON_COST = Internal.createForeignKey(SmartexamTransportCostsItem.SMARTEXAM_TRANSPORT_COSTS_ITEM, DSL.name("fk_smartexam_transport_costs_item_on_cost"), new TableField[] { SmartexamTransportCostsItem.SMARTEXAM_TRANSPORT_COSTS_ITEM.COST_ID }, Keys.SMARTEXAM_TRANSPORT_COSTS_PKEY, new TableField[] { SmartexamTransportCosts.SMARTEXAM_TRANSPORT_COSTS.ID }, true);
    public static final ForeignKey<SmartexamTransportEmployeeLinkRecord, SmartmonTransportRecord> SMARTEXAM_TRANSPORT_EMPLOYEE_LINK__FK_SMARTEXAM_TRANSPORT_EMPLOYEE_LINK_ON_TRANSPORT = Internal.createForeignKey(SmartexamTransportEmployeeLink.SMARTEXAM_TRANSPORT_EMPLOYEE_LINK, DSL.name("fk_smartexam_transport_employee_link_on_transport"), new TableField[] { SmartexamTransportEmployeeLink.SMARTEXAM_TRANSPORT_EMPLOYEE_LINK.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamTransportEmployeeLinkRecord, SmartexamEmployeeRecord> SMARTEXAM_TRANSPORT_EMPLOYEE_LINK__FK_TRAEMP_ON_EMPLOYEE = Internal.createForeignKey(SmartexamTransportEmployeeLink.SMARTEXAM_TRANSPORT_EMPLOYEE_LINK, DSL.name("fk_traemp_on_employee"), new TableField[] { SmartexamTransportEmployeeLink.SMARTEXAM_TRANSPORT_EMPLOYEE_LINK.EMPLOYEE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartexamTransportFrom1cRecord, SmartexamaddonBaseGarbageContainerRecord> SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_BASE_GARBAGE_CONTAINER = Internal.createForeignKey(SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C, DSL.name("fk_smartexam_transport_from1c_on_base_garbage_container"), new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.BASE_GARBAGE_CONTAINER_ID }, Keys.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER_PKEY, new TableField[] { SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.ID }, true);
    public static final ForeignKey<SmartexamTransportFrom1cRecord, SmartexamOrganizationRecord> SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_COSTS_ORGANIZATION = Internal.createForeignKey(SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C, DSL.name("fk_smartexam_transport_from1c_on_costs_organization"), new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.COSTS_ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamTransportFrom1cRecord, SmartexamOrganizationRecord> SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_ORGANIZATION = Internal.createForeignKey(SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C, DSL.name("fk_smartexam_transport_from1c_on_organization"), new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.ORGANIZATION_ID }, Keys.SMARTEXAM_ORGANIZATION_PKEY, new TableField[] { SmartexamOrganization.SMARTEXAM_ORGANIZATION.ID }, true);
    public static final ForeignKey<SmartexamTransportFrom1cRecord, SmartexamTransportTypeFrom1cRecord> SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C, DSL.name("fk_smartexam_transport_from1c_on_transport_type"), new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.TRANSPORT_TYPE_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY, new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamTransportMileageListRecord, SmartmonTransportRecord> SMARTEXAM_TRANSPORT_MILEAGE_LIST__FK_SMARTEXAM_TRANSPORT_MILEAGE_LIST_ON_TRANSPORT = Internal.createForeignKey(SmartexamTransportMileageList.SMARTEXAM_TRANSPORT_MILEAGE_LIST, DSL.name("fk_smartexam_transport_mileage_list_on_transport"), new TableField[] { SmartexamTransportMileageList.SMARTEXAM_TRANSPORT_MILEAGE_LIST.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamTransportTypeFrom1cRecord, SmartexamTransportTypeFrom1cRecord> SMARTEXAM_TRANSPORT_TYPE_FROM1C__FK_SMARTEXAM_TRANSPORT_TYPE_FROM1C_ON_PARENT = Internal.createForeignKey(SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C, DSL.name("fk_smartexam_transport_type_from1c_on_parent"), new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.PARENT_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY, new TableField[] { SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseDocumentsRecord, SmartexamaddonBaseTransportRecord> SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_BASE_TRANSPORT = Internal.createForeignKey(SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS, DSL.name("fk_smartexamaddon_base_documents_on_base_transport"), new TableField[] { SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS.BASE_TRANSPORT_ID }, Keys.SMARTEXAMADDON_BASE_TRANSPORT_PKEY, new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseDocumentsRecord, SysFileRecord> SMARTEXAMADDON_BASE_DOCUMENTS__FK_SMARTEXAMADDON_BASE_DOCUMENTS_ON_PHOTO = Internal.createForeignKey(SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS, DSL.name("fk_smartexamaddon_base_documents_on_photo"), new TableField[] { SmartexamaddonBaseDocuments.SMARTEXAMADDON_BASE_DOCUMENTS.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseLicenseRecord, SmartexamaddonBaseTransportRecord> SMARTEXAMADDON_BASE_LICENSE__FK_SMARTEXAMADDON_BASE_LICENSE_ON_TRANSPORT = Internal.createForeignKey(SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE, DSL.name("fk_smartexamaddon_base_license_on_transport"), new TableField[] { SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.TRANSPORT_ID }, Keys.SMARTEXAMADDON_BASE_TRANSPORT_PKEY, new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportRecord, SmartexamaddonBaseGarbageContainerRecord> SMARTEXAMADDON_BASE_TRANSPORT__FK_SMARTEXAMADDON_BASE_TRANSPORT_ON_BASE_GARBAGE_CONTAINER = Internal.createForeignKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("fk_smartexamaddon_base_transport_on_base_garbage_container"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.BASE_GARBAGE_CONTAINER_ID }, Keys.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER_PKEY, new TableField[] { SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportRecord, CompanyaddonBaseCompanyRecord> SMARTEXAMADDON_BASE_TRANSPORT__FK_SMARTEXAMADDON_BASE_TRANSPORT_ON_COSTS_ORGANIZATION = Internal.createForeignKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("fk_smartexamaddon_base_transport_on_costs_organization"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.COSTS_ORGANIZATION_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportRecord, SmartexamaddonBaseLicenseRecord> SMARTEXAMADDON_BASE_TRANSPORT__FK_SMARTEXAMADDON_BASE_TRANSPORT_ON_LICENSE = Internal.createForeignKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("fk_smartexamaddon_base_transport_on_license"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.LICENSE_ID }, Keys.SMARTEXAMADDON_BASE_LICENSE_PKEY, new TableField[] { SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportRecord, CompanyaddonBaseCompanyRecord> SMARTEXAMADDON_BASE_TRANSPORT__FK_SMARTEXAMADDON_BASE_TRANSPORT_ON_ORGANIZATION = Internal.createForeignKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("fk_smartexamaddon_base_transport_on_organization"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.ORGANIZATION_ID }, Keys.COMPANYADDON_BASE_COMPANY_PKEY, new TableField[] { CompanyaddonBaseCompany.COMPANYADDON_BASE_COMPANY.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportRecord, SmartexamaddonBaseTransportTypeRecord> SMARTEXAMADDON_BASE_TRANSPORT__FK_SMARTEXAMADDON_BASE_TRANSPORT_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT, DSL.name("fk_smartexamaddon_base_transport_on_transport_type"), new TableField[] { SmartexamaddonBaseTransport.SMARTEXAMADDON_BASE_TRANSPORT.TRANSPORT_TYPE_ID }, Keys.SMARTEXAMADDON_BASE_TRANSPORT_TYPE_PKEY, new TableField[] { SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartexamaddonBaseTransportTypeRecord, SmartexamaddonBaseTransportTypeRecord> SMARTEXAMADDON_BASE_TRANSPORT_TYPE__FK_SMARTEXAMADDON_BASE_TRANSPORT_TYPE_ON_PARENT = Internal.createForeignKey(SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE, DSL.name("fk_smartexamaddon_base_transport_type_on_parent"), new TableField[] { SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE.PARENT_ID }, Keys.SMARTEXAMADDON_BASE_TRANSPORT_TYPE_PKEY, new TableField[] { SmartexamaddonBaseTransportType.SMARTEXAMADDON_BASE_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartmonCheckItemValueRecord, SmartmonCheckListInstanceRecord> SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_INSTANCE = Internal.createForeignKey(SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE, DSL.name("fk_smartmon_check_item_value_on_instance"), new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.INSTANCE_ID }, Keys.SMARTMON_CHECK_LIST_INSTANCE_PKEY, new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.ID }, true);
    public static final ForeignKey<SmartmonCheckItemValueRecord, SmartmonCheckListItemRecord> SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_ITEM = Internal.createForeignKey(SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE, DSL.name("fk_smartmon_check_item_value_on_item"), new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.ITEM_ID }, Keys.SMARTMON_CHECK_LIST_ITEM_PKEY, new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.ID }, true);
    public static final ForeignKey<SmartmonCheckItemValueRecord, SmartmonCheckItemValueRecord> SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PARENT = Internal.createForeignKey(SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE, DSL.name("fk_smartmon_check_item_value_on_parent"), new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.PARENT_ID }, Keys.SMARTMON_CHECK_ITEM_VALUE_PKEY, new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.ID }, true);
    public static final ForeignKey<SmartmonCheckItemValueRecord, SysFileRecord> SMARTMON_CHECK_ITEM_VALUE__FK_SMARTMON_CHECK_ITEM_VALUE_ON_PHOTO = Internal.createForeignKey(SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE, DSL.name("fk_smartmon_check_item_value_on_photo"), new TableField[] { SmartmonCheckItemValue.SMARTMON_CHECK_ITEM_VALUE.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartmonCheckListRecord, SmartmonTransportRecord> SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT = Internal.createForeignKey(SmartmonCheckList.SMARTMON_CHECK_LIST, DSL.name("fk_smartmon_check_list_on_transport"), new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartmonCheckListRecord, SmartmonTransportTypeRecord> SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartmonCheckList.SMARTMON_CHECK_LIST, DSL.name("fk_smartmon_check_list_on_transport_type"), new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.TRANSPORT_TYPE_ID }, Keys.SMARTMON_TRANSPORT_TYPE_PKEY, new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartmonCheckListInstanceRecord, SmartmonCheckListRecord> SMARTMON_CHECK_LIST_INSTANCE__FK_SMARTMON_CHECK_LIST_INSTANCE_ON_CHECK_LIST = Internal.createForeignKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("fk_smartmon_check_list_instance_on_check_list"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.CHECK_LIST_ID }, Keys.SMARTMON_CHECK_LIST_PKEY, new TableField[] { SmartmonCheckList.SMARTMON_CHECK_LIST.ID }, true);
    public static final ForeignKey<SmartmonCheckListInstanceRecord, SmartmonDivisionRecord> SMARTMON_CHECK_LIST_INSTANCE__FK_SMARTMON_CHECK_LIST_INSTANCE_ON_DIVISION = Internal.createForeignKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("fk_smartmon_check_list_instance_on_division"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartmonCheckListInstanceRecord, SmartexamEmployeeRecord> SMARTMON_CHECK_LIST_INSTANCE__FK_SMARTMON_CHECK_LIST_INSTANCE_ON_EMPLOYEE = Internal.createForeignKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("fk_smartmon_check_list_instance_on_employee"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.EMPLOYEE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartmonCheckListInstanceRecord, SmartexamEmployeeRecord> SMARTMON_CHECK_LIST_INSTANCE__FK_SMARTMON_CHECK_LIST_INSTANCE_ON_RESPONSIBLE = Internal.createForeignKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("fk_smartmon_check_list_instance_on_responsible"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.RESPONSIBLE_ID }, Keys.SMARTEXAM_EMPLOYEE_PKEY, new TableField[] { SmartexamEmployee.SMARTEXAM_EMPLOYEE.ID }, true);
    public static final ForeignKey<SmartmonCheckListInstanceRecord, SmartmonTransportRecord> SMARTMON_CHECK_LIST_INSTANCE__FK_SMARTMON_CHECK_LIST_INSTANCE_ON_TRANSPORT = Internal.createForeignKey(SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE, DSL.name("fk_smartmon_check_list_instance_on_transport"), new TableField[] { SmartmonCheckListInstance.SMARTMON_CHECK_LIST_INSTANCE.TRANSPORT_ID }, Keys.SMARTMON_TRANSPORT_PKEY, new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.ID }, true);
    public static final ForeignKey<SmartmonCheckListItemRecord, SmartexamCheckListListTypeTemplateRecord> SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_LIST_TEMPLATE = Internal.createForeignKey(SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM, DSL.name("fk_smartmon_check_list_item_on_list_template"), new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.LIST_TEMPLATE_ID }, Keys.SMARTEXAM_CHECK_LIST_LIST_TYPE_TEMPLATE_PKEY, new TableField[] { SmartexamCheckListListTypeTemplate.SMARTEXAM_CHECK_LIST_LIST_TYPE_TEMPLATE.ID }, true);
    public static final ForeignKey<SmartmonCheckListItemRecord, SmartmonCheckListItemRecord> SMARTMON_CHECK_LIST_ITEM__FK_SMARTMON_CHECK_LIST_ITEM_ON_PARENT_ITEM = Internal.createForeignKey(SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM, DSL.name("fk_smartmon_check_list_item_on_parent_item"), new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.PARENT_ITEM_ID }, Keys.SMARTMON_CHECK_LIST_ITEM_PKEY, new TableField[] { SmartmonCheckListItem.SMARTMON_CHECK_LIST_ITEM.ID }, true);
    public static final ForeignKey<SmartmonDivisionRecord, SmartexamKpiInstanceRecord> SMARTMON_DIVISION__FK_SMARTMON_DIVISION_ON_KPI_INSTANCE = Internal.createForeignKey(SmartmonDivision.SMARTMON_DIVISION, DSL.name("fk_smartmon_division_on_kpi_instance"), new TableField[] { SmartmonDivision.SMARTMON_DIVISION.KPI_INSTANCE_ID }, Keys.SMARTEXAM_KPI_INSTANCE_PKEY, new TableField[] { SmartexamKpiInstance.SMARTEXAM_KPI_INSTANCE.ID }, true);
    public static final ForeignKey<SmartmonTransportRecord, SmartmonDivisionRecord> SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_DIVISION = Internal.createForeignKey(SmartmonTransport.SMARTMON_TRANSPORT, DSL.name("fk_smartmon_transport_on_division"), new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.DIVISION_ID }, Keys.SMARTMON_DIVISION_PKEY, new TableField[] { SmartmonDivision.SMARTMON_DIVISION.ID }, true);
    public static final ForeignKey<SmartmonTransportRecord, SysFileRecord> SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_PHOTO = Internal.createForeignKey(SmartmonTransport.SMARTMON_TRANSPORT, DSL.name("fk_smartmon_transport_on_photo"), new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.PHOTO_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SmartmonTransportRecord, SmartexamTransportFrom1cRecord> SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_FROM1C = Internal.createForeignKey(SmartmonTransport.SMARTMON_TRANSPORT, DSL.name("fk_smartmon_transport_on_transport_from1c"), new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.TRANSPORT_FROM1C_ID }, Keys.SMARTEXAM_TRANSPORT_FROM1C_PKEY, new TableField[] { SmartexamTransportFrom1c.SMARTEXAM_TRANSPORT_FROM1C.ID }, true);
    public static final ForeignKey<SmartmonTransportRecord, SmartmonTransportTypeRecord> SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_TYPE = Internal.createForeignKey(SmartmonTransport.SMARTMON_TRANSPORT, DSL.name("fk_smartmon_transport_on_transport_type"), new TableField[] { SmartmonTransport.SMARTMON_TRANSPORT.TRANSPORT_TYPE_ID }, Keys.SMARTMON_TRANSPORT_TYPE_PKEY, new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.ID }, true);
    public static final ForeignKey<SmartmonTransportTypeRecord, SmartexamTransportTypeGroupingRecord> SMARTMON_TRANSPORT_TYPE__FK_SMARTMON_TRANSPORT_TYPE_ON_TRANSPORT_TYPE_GROUPING = Internal.createForeignKey(SmartmonTransportType.SMARTMON_TRANSPORT_TYPE, DSL.name("fk_smartmon_transport_type_on_transport_type_grouping"), new TableField[] { SmartmonTransportType.SMARTMON_TRANSPORT_TYPE.TRANSPORT_TYPE_GROUPING_ID }, Keys.SMARTEXAM_TRANSPORT_TYPE_GROUPING_PKEY, new TableField[] { SmartexamTransportTypeGrouping.SMARTEXAM_TRANSPORT_TYPE_GROUPING.ID }, true);
    public static final ForeignKey<SysAppFolderRecord, SysFolderRecord> SYS_APP_FOLDER__FK_SYS_APP_FOLDER_FOLDER = Internal.createForeignKey(SysAppFolder.SYS_APP_FOLDER, DSL.name("fk_sys_app_folder_folder"), new TableField[] { SysAppFolder.SYS_APP_FOLDER.FOLDER_ID }, Keys.SYS_FOLDER_PKEY, new TableField[] { SysFolder.SYS_FOLDER.ID }, true);
    public static final ForeignKey<SysAttrValueRecord, SysAttrValueRecord> SYS_ATTR_VALUE__SYS_ATTR_VALUE_ATTR_VALUE_PARENT_ID = Internal.createForeignKey(SysAttrValue.SYS_ATTR_VALUE, DSL.name("sys_attr_value_attr_value_parent_id"), new TableField[] { SysAttrValue.SYS_ATTR_VALUE.PARENT_ID }, Keys.SYS_ATTR_VALUE_PKEY, new TableField[] { SysAttrValue.SYS_ATTR_VALUE.ID }, true);
    public static final ForeignKey<SysAttrValueRecord, SysCategoryAttrRecord> SYS_ATTR_VALUE__SYS_ATTR_VALUE_CATEGORY_ATTR_ID = Internal.createForeignKey(SysAttrValue.SYS_ATTR_VALUE, DSL.name("sys_attr_value_category_attr_id"), new TableField[] { SysAttrValue.SYS_ATTR_VALUE.CATEGORY_ATTR_ID }, Keys.SYS_CATEGORY_ATTR_PKEY, new TableField[] { SysCategoryAttr.SYS_CATEGORY_ATTR.ID }, true);
    public static final ForeignKey<SysCategoryAttrRecord, SysCategoryRecord> SYS_CATEGORY_ATTR__SYS_CATEGORY_ATTR_CATEGORY_ID = Internal.createForeignKey(SysCategoryAttr.SYS_CATEGORY_ATTR, DSL.name("sys_category_attr_category_id"), new TableField[] { SysCategoryAttr.SYS_CATEGORY_ATTR.CATEGORY_ID }, Keys.SYS_CATEGORY_PKEY, new TableField[] { SysCategory.SYS_CATEGORY.ID }, true);
    public static final ForeignKey<SysEntitySnapshotRecord, SecUserRecord> SYS_ENTITY_SNAPSHOT__FK_SYS_ENTITY_SNAPSHOT_AUTHOR_ID = Internal.createForeignKey(SysEntitySnapshot.SYS_ENTITY_SNAPSHOT, DSL.name("fk_sys_entity_snapshot_author_id"), new TableField[] { SysEntitySnapshot.SYS_ENTITY_SNAPSHOT.AUTHOR_ID }, Keys.SEC_USER_PKEY, new TableField[] { SecUser.SEC_USER.ID }, true);
    public static final ForeignKey<SysFolderRecord, SysFolderRecord> SYS_FOLDER__FK_SYS_FOLDER_PARENT = Internal.createForeignKey(SysFolder.SYS_FOLDER, DSL.name("fk_sys_folder_parent"), new TableField[] { SysFolder.SYS_FOLDER.PARENT_ID }, Keys.SYS_FOLDER_PKEY, new TableField[] { SysFolder.SYS_FOLDER.ID }, true);
    public static final ForeignKey<SysScheduledExecutionRecord, SysScheduledTaskRecord> SYS_SCHEDULED_EXECUTION__SYS_SCHEDULED_EXECUTION_TASK = Internal.createForeignKey(SysScheduledExecution.SYS_SCHEDULED_EXECUTION, DSL.name("sys_scheduled_execution_task"), new TableField[] { SysScheduledExecution.SYS_SCHEDULED_EXECUTION.TASK_ID }, Keys.SYS_SCHEDULED_TASK_PKEY, new TableField[] { SysScheduledTask.SYS_SCHEDULED_TASK.ID }, true);
    public static final ForeignKey<SysSendingAttachmentRecord, SysFileRecord> SYS_SENDING_ATTACHMENT__FK_SYS_SENDING_ATTACHMENT_CONTENT_FILE = Internal.createForeignKey(SysSendingAttachment.SYS_SENDING_ATTACHMENT, DSL.name("fk_sys_sending_attachment_content_file"), new TableField[] { SysSendingAttachment.SYS_SENDING_ATTACHMENT.CONTENT_FILE_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
    public static final ForeignKey<SysSendingAttachmentRecord, SysSendingMessageRecord> SYS_SENDING_ATTACHMENT__FK_SYS_SENDING_ATTACHMENT_SENDING_MESSAGE = Internal.createForeignKey(SysSendingAttachment.SYS_SENDING_ATTACHMENT, DSL.name("fk_sys_sending_attachment_sending_message"), new TableField[] { SysSendingAttachment.SYS_SENDING_ATTACHMENT.MESSAGE_ID }, Keys.SYS_SENDING_MESSAGE_PKEY, new TableField[] { SysSendingMessage.SYS_SENDING_MESSAGE.ID }, true);
    public static final ForeignKey<SysSendingMessageRecord, SysFileRecord> SYS_SENDING_MESSAGE__FK_SYS_SENDING_MESSAGE_CONTENT_FILE = Internal.createForeignKey(SysSendingMessage.SYS_SENDING_MESSAGE, DSL.name("fk_sys_sending_message_content_file"), new TableField[] { SysSendingMessage.SYS_SENDING_MESSAGE.CONTENT_TEXT_FILE_ID }, Keys.SYS_FILE_PKEY, new TableField[] { SysFile.SYS_FILE.ID }, true);
}
