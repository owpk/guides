/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonCheckListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonCheckList extends TableImpl<SmartmonCheckListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_check_list</code>
     */
    public static final SmartmonCheckList SMARTMON_CHECK_LIST = new SmartmonCheckList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonCheckListRecord> getRecordType() {
        return SmartmonCheckListRecord.class;
    }

    /**
     * The column <code>public.smartmon_check_list.id</code>.
     */
    public final TableField<SmartmonCheckListRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_list.version</code>.
     */
    public final TableField<SmartmonCheckListRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_check_list.create_ts</code>.
     */
    public final TableField<SmartmonCheckListRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list.created_by</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list.update_ts</code>.
     */
    public final TableField<SmartmonCheckListRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list.updated_by</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list.delete_ts</code>.
     */
    public final TableField<SmartmonCheckListRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_check_list.deleted_by</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list.name</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_check_list.transport_type_id</code>.
     */
    public final TableField<SmartmonCheckListRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_list.status</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list.type_</code>.
     */
    public final TableField<SmartmonCheckListRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_check_list.archived</code>.
     */
    public final TableField<SmartmonCheckListRecord, Boolean> ARCHIVED = createField(DSL.name("archived"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartmon_check_list.transport_id__u33258</code>.
     */
    public final TableField<SmartmonCheckListRecord, UUID> TRANSPORT_ID__U33258 = createField(DSL.name("transport_id__u33258"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_check_list.comment_enabled</code>.
     */
    public final TableField<SmartmonCheckListRecord, Boolean> COMMENT_ENABLED = createField(DSL.name("comment_enabled"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartmon_check_list.transport_id</code>.
     */
    public final TableField<SmartmonCheckListRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    private SmartmonCheckList(Name alias, Table<SmartmonCheckListRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonCheckList(Name alias, Table<SmartmonCheckListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_check_list</code> table reference
     */
    public SmartmonCheckList(String alias) {
        this(DSL.name(alias), SMARTMON_CHECK_LIST);
    }

    /**
     * Create an aliased <code>public.smartmon_check_list</code> table reference
     */
    public SmartmonCheckList(Name alias) {
        this(alias, SMARTMON_CHECK_LIST);
    }

    /**
     * Create a <code>public.smartmon_check_list</code> table reference
     */
    public SmartmonCheckList() {
        this(DSL.name("smartmon_check_list"), null);
    }

    public <O extends Record> SmartmonCheckList(Table<O> child, ForeignKey<O, SmartmonCheckListRecord> key) {
        super(child, key, SMARTMON_CHECK_LIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_CHECK_LIST_ON_TRANSPORT, Indexes.IDX_SMARTMON_CHECK_LIST_ON_TRANSPORT_TYPE);
    }

    @Override
    public UniqueKey<SmartmonCheckListRecord> getPrimaryKey() {
        return Keys.SMARTMON_CHECK_LIST_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonCheckListRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT_TYPE, Keys.SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT);
    }

    private transient SmartmonTransportType _smartmonTransportType;
    private transient SmartmonTransport _smartmonTransport;

    public SmartmonTransportType smartmonTransportType() {
        if (_smartmonTransportType == null)
            _smartmonTransportType = new SmartmonTransportType(this, Keys.SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT_TYPE);

        return _smartmonTransportType;
    }

    public SmartmonTransport smartmonTransport() {
        if (_smartmonTransport == null)
            _smartmonTransport = new SmartmonTransport(this, Keys.SMARTMON_CHECK_LIST__FK_SMARTMON_CHECK_LIST_ON_TRANSPORT);

        return _smartmonTransport;
    }

    @Override
    public SmartmonCheckList as(String alias) {
        return new SmartmonCheckList(DSL.name(alias), this);
    }

    @Override
    public SmartmonCheckList as(Name alias) {
        return new SmartmonCheckList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckList rename(String name) {
        return new SmartmonCheckList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonCheckList rename(Name name) {
        return new SmartmonCheckList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, UUID, String, String, Boolean, UUID, Boolean, UUID> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
