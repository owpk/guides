/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecPermissionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecPermission extends TableImpl<SecPermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_permission</code>
     */
    public static final SecPermission SEC_PERMISSION = new SecPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecPermissionRecord> getRecordType() {
        return SecPermissionRecord.class;
    }

    /**
     * The column <code>public.sec_permission.id</code>.
     */
    public final TableField<SecPermissionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_permission.create_ts</code>.
     */
    public final TableField<SecPermissionRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_permission.created_by</code>.
     */
    public final TableField<SecPermissionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_permission.version</code>.
     */
    public final TableField<SecPermissionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_permission.update_ts</code>.
     */
    public final TableField<SecPermissionRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_permission.updated_by</code>.
     */
    public final TableField<SecPermissionRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_permission.delete_ts</code>.
     */
    public final TableField<SecPermissionRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_permission.deleted_by</code>.
     */
    public final TableField<SecPermissionRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_permission.permission_type</code>.
     */
    public final TableField<SecPermissionRecord, Integer> PERMISSION_TYPE = createField(DSL.name("permission_type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sec_permission.target</code>.
     */
    public final TableField<SecPermissionRecord, String> TARGET = createField(DSL.name("target"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.sec_permission.value_</code>.
     */
    public final TableField<SecPermissionRecord, Integer> VALUE_ = createField(DSL.name("value_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sec_permission.role_id</code>.
     */
    public final TableField<SecPermissionRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.UUID, this, "");

    private SecPermission(Name alias, Table<SecPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecPermission(Name alias, Table<SecPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_permission</code> table reference
     */
    public SecPermission(String alias) {
        this(DSL.name(alias), SEC_PERMISSION);
    }

    /**
     * Create an aliased <code>public.sec_permission</code> table reference
     */
    public SecPermission(Name alias) {
        this(alias, SEC_PERMISSION);
    }

    /**
     * Create a <code>public.sec_permission</code> table reference
     */
    public SecPermission() {
        this(DSL.name("sec_permission"), null);
    }

    public <O extends Record> SecPermission(Table<O> child, ForeignKey<O, SecPermissionRecord> key) {
        super(child, key, SEC_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_PERMISSION_UNIQUE);
    }

    @Override
    public UniqueKey<SecPermissionRecord> getPrimaryKey() {
        return Keys.SEC_PERMISSION_PKEY;
    }

    @Override
    public List<ForeignKey<SecPermissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_PERMISSION__SEC_PERMISSION_ROLE);
    }

    private transient SecRole _secRole;

    public SecRole secRole() {
        if (_secRole == null)
            _secRole = new SecRole(this, Keys.SEC_PERMISSION__SEC_PERMISSION_ROLE);

        return _secRole;
    }

    @Override
    public SecPermission as(String alias) {
        return new SecPermission(DSL.name(alias), this);
    }

    @Override
    public SecPermission as(Name alias) {
        return new SecPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecPermission rename(String name) {
        return new SecPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecPermission rename(Name name) {
        return new SecPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, LocalDateTime, String, Integer, LocalDateTime, String, LocalDateTime, String, Integer, String, Integer, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
