/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.CompanyaddonBaseCompanyBaseProjectLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyaddonBaseCompanyBaseProjectLink extends TableImpl<CompanyaddonBaseCompanyBaseProjectLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.companyaddon_base_company_base_project_link</code>
     */
    public static final CompanyaddonBaseCompanyBaseProjectLink COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK = new CompanyaddonBaseCompanyBaseProjectLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyaddonBaseCompanyBaseProjectLinkRecord> getRecordType() {
        return CompanyaddonBaseCompanyBaseProjectLinkRecord.class;
    }

    /**
     * The column
     * <code>public.companyaddon_base_company_base_project_link.base_company_id</code>.
     */
    public final TableField<CompanyaddonBaseCompanyBaseProjectLinkRecord, UUID> BASE_COMPANY_ID = createField(DSL.name("base_company_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.companyaddon_base_company_base_project_link.base_project_id</code>.
     */
    public final TableField<CompanyaddonBaseCompanyBaseProjectLinkRecord, UUID> BASE_PROJECT_ID = createField(DSL.name("base_project_id"), SQLDataType.UUID.nullable(false), this, "");

    private CompanyaddonBaseCompanyBaseProjectLink(Name alias, Table<CompanyaddonBaseCompanyBaseProjectLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyaddonBaseCompanyBaseProjectLink(Name alias, Table<CompanyaddonBaseCompanyBaseProjectLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.companyaddon_base_company_base_project_link</code> table
     * reference
     */
    public CompanyaddonBaseCompanyBaseProjectLink(String alias) {
        this(DSL.name(alias), COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK);
    }

    /**
     * Create an aliased
     * <code>public.companyaddon_base_company_base_project_link</code> table
     * reference
     */
    public CompanyaddonBaseCompanyBaseProjectLink(Name alias) {
        this(alias, COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK);
    }

    /**
     * Create a <code>public.companyaddon_base_company_base_project_link</code>
     * table reference
     */
    public CompanyaddonBaseCompanyBaseProjectLink() {
        this(DSL.name("companyaddon_base_company_base_project_link"), null);
    }

    public <O extends Record> CompanyaddonBaseCompanyBaseProjectLink(Table<O> child, ForeignKey<O, CompanyaddonBaseCompanyBaseProjectLinkRecord> key) {
        super(child, key, COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CompanyaddonBaseCompanyBaseProjectLinkRecord> getPrimaryKey() {
        return Keys.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<CompanyaddonBaseCompanyBaseProjectLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_COMPANY, Keys.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_PROJECT);
    }

    private transient CompanyaddonBaseCompany _companyaddonBaseCompany;
    private transient CompanyaddonBaseProject _companyaddonBaseProject;

    public CompanyaddonBaseCompany companyaddonBaseCompany() {
        if (_companyaddonBaseCompany == null)
            _companyaddonBaseCompany = new CompanyaddonBaseCompany(this, Keys.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_COMPANY);

        return _companyaddonBaseCompany;
    }

    public CompanyaddonBaseProject companyaddonBaseProject() {
        if (_companyaddonBaseProject == null)
            _companyaddonBaseProject = new CompanyaddonBaseProject(this, Keys.COMPANYADDON_BASE_COMPANY_BASE_PROJECT_LINK__FK_BASCOMBASPRO_ON_BASE_PROJECT);

        return _companyaddonBaseProject;
    }

    @Override
    public CompanyaddonBaseCompanyBaseProjectLink as(String alias) {
        return new CompanyaddonBaseCompanyBaseProjectLink(DSL.name(alias), this);
    }

    @Override
    public CompanyaddonBaseCompanyBaseProjectLink as(Name alias) {
        return new CompanyaddonBaseCompanyBaseProjectLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseCompanyBaseProjectLink rename(String name) {
        return new CompanyaddonBaseCompanyBaseProjectLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseCompanyBaseProjectLink rename(Name name) {
        return new CompanyaddonBaseCompanyBaseProjectLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
