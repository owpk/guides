/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamTransportCostsItemRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamTransportCostsItem extends TableImpl<SmartexamTransportCostsItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_transport_costs_item</code>
     */
    public static final SmartexamTransportCostsItem SMARTEXAM_TRANSPORT_COSTS_ITEM = new SmartexamTransportCostsItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamTransportCostsItemRecord> getRecordType() {
        return SmartexamTransportCostsItemRecord.class;
    }

    /**
     * The column <code>public.smartexam_transport_costs_item.id</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.version</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.create_ts</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.created_by</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.update_ts</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.updated_by</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.delete_ts</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.deleted_by</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.cost_id</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, UUID> COST_ID = createField(DSL.name("cost_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.name</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.price</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.amount</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartexam_transport_costs_item.units</code>.
     */
    public final TableField<SmartexamTransportCostsItemRecord, String> UNITS = createField(DSL.name("units"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamTransportCostsItem(Name alias, Table<SmartexamTransportCostsItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamTransportCostsItem(Name alias, Table<SmartexamTransportCostsItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_transport_costs_item</code>
     * table reference
     */
    public SmartexamTransportCostsItem(String alias) {
        this(DSL.name(alias), SMARTEXAM_TRANSPORT_COSTS_ITEM);
    }

    /**
     * Create an aliased <code>public.smartexam_transport_costs_item</code>
     * table reference
     */
    public SmartexamTransportCostsItem(Name alias) {
        this(alias, SMARTEXAM_TRANSPORT_COSTS_ITEM);
    }

    /**
     * Create a <code>public.smartexam_transport_costs_item</code> table
     * reference
     */
    public SmartexamTransportCostsItem() {
        this(DSL.name("smartexam_transport_costs_item"), null);
    }

    public <O extends Record> SmartexamTransportCostsItem(Table<O> child, ForeignKey<O, SmartexamTransportCostsItemRecord> key) {
        super(child, key, SMARTEXAM_TRANSPORT_COSTS_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_TRANSPORT_COSTS_ITEM_ON_COST);
    }

    @Override
    public UniqueKey<SmartexamTransportCostsItemRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_TRANSPORT_COSTS_ITEM_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamTransportCostsItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_TRANSPORT_COSTS_ITEM__FK_SMARTEXAM_TRANSPORT_COSTS_ITEM_ON_COST);
    }

    private transient SmartexamTransportCosts _smartexamTransportCosts;

    public SmartexamTransportCosts smartexamTransportCosts() {
        if (_smartexamTransportCosts == null)
            _smartexamTransportCosts = new SmartexamTransportCosts(this, Keys.SMARTEXAM_TRANSPORT_COSTS_ITEM__FK_SMARTEXAM_TRANSPORT_COSTS_ITEM_ON_COST);

        return _smartexamTransportCosts;
    }

    @Override
    public SmartexamTransportCostsItem as(String alias) {
        return new SmartexamTransportCostsItem(DSL.name(alias), this);
    }

    @Override
    public SmartexamTransportCostsItem as(Name alias) {
        return new SmartexamTransportCostsItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportCostsItem rename(String name) {
        return new SmartexamTransportCostsItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportCostsItem rename(Name name) {
        return new SmartexamTransportCostsItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, Double, Integer, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
