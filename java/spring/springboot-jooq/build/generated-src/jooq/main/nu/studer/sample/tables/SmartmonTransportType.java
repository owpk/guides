/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonTransportTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonTransportType extends TableImpl<SmartmonTransportTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_transport_type</code>
     */
    public static final SmartmonTransportType SMARTMON_TRANSPORT_TYPE = new SmartmonTransportType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonTransportTypeRecord> getRecordType() {
        return SmartmonTransportTypeRecord.class;
    }

    /**
     * The column <code>public.smartmon_transport_type.id</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_transport_type.version</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_transport_type.create_ts</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport_type.created_by</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport_type.update_ts</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport_type.updated_by</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport_type.delete_ts</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport_type.deleted_by</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport_type.name</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_transport_type.ext_uuid</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> EXT_UUID = createField(DSL.name("ext_uuid"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_transport_type.short_name</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, String> SHORT_NAME = createField(DSL.name("short_name"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column
     * <code>public.smartmon_transport_type.transport_type_grouping_id</code>.
     */
    public final TableField<SmartmonTransportTypeRecord, UUID> TRANSPORT_TYPE_GROUPING_ID = createField(DSL.name("transport_type_grouping_id"), SQLDataType.UUID, this, "");

    private SmartmonTransportType(Name alias, Table<SmartmonTransportTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonTransportType(Name alias, Table<SmartmonTransportTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_transport_type</code> table
     * reference
     */
    public SmartmonTransportType(String alias) {
        this(DSL.name(alias), SMARTMON_TRANSPORT_TYPE);
    }

    /**
     * Create an aliased <code>public.smartmon_transport_type</code> table
     * reference
     */
    public SmartmonTransportType(Name alias) {
        this(alias, SMARTMON_TRANSPORT_TYPE);
    }

    /**
     * Create a <code>public.smartmon_transport_type</code> table reference
     */
    public SmartmonTransportType() {
        this(DSL.name("smartmon_transport_type"), null);
    }

    public <O extends Record> SmartmonTransportType(Table<O> child, ForeignKey<O, SmartmonTransportTypeRecord> key) {
        super(child, key, SMARTMON_TRANSPORT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_TRANSPORT_TYPE_ON_TRANSPORT_TYPE_GROUPING, Indexes.IDX_SMARTMON_TRANSPORT_TYPE_UK_EXT_UUID, Indexes.IDX_SMARTMON_TRANSPORT_TYPE_UK_SHORT_NAME);
    }

    @Override
    public UniqueKey<SmartmonTransportTypeRecord> getPrimaryKey() {
        return Keys.SMARTMON_TRANSPORT_TYPE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonTransportTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_TRANSPORT_TYPE__FK_SMARTMON_TRANSPORT_TYPE_ON_TRANSPORT_TYPE_GROUPING);
    }

    private transient SmartexamTransportTypeGrouping _smartexamTransportTypeGrouping;

    public SmartexamTransportTypeGrouping smartexamTransportTypeGrouping() {
        if (_smartexamTransportTypeGrouping == null)
            _smartexamTransportTypeGrouping = new SmartexamTransportTypeGrouping(this, Keys.SMARTMON_TRANSPORT_TYPE__FK_SMARTMON_TRANSPORT_TYPE_ON_TRANSPORT_TYPE_GROUPING);

        return _smartexamTransportTypeGrouping;
    }

    @Override
    public SmartmonTransportType as(String alias) {
        return new SmartmonTransportType(DSL.name(alias), this);
    }

    @Override
    public SmartmonTransportType as(Name alias) {
        return new SmartmonTransportType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonTransportType rename(String name) {
        return new SmartmonTransportType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonTransportType rename(Name name) {
        return new SmartmonTransportType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String, String, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
