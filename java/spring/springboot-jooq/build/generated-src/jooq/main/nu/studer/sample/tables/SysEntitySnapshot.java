/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysEntitySnapshotRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysEntitySnapshot extends TableImpl<SysEntitySnapshotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_entity_snapshot</code>
     */
    public static final SysEntitySnapshot SYS_ENTITY_SNAPSHOT = new SysEntitySnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysEntitySnapshotRecord> getRecordType() {
        return SysEntitySnapshotRecord.class;
    }

    /**
     * The column <code>public.sys_entity_snapshot.id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.create_ts</code>.
     */
    public final TableField<SysEntitySnapshotRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.created_by</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.sys_tenant_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.entity_meta_class</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> ENTITY_META_CLASS = createField(DSL.name("entity_meta_class"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.entity_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sys_entity_snapshot.string_entity_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> STRING_ENTITY_ID = createField(DSL.name("string_entity_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.int_entity_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, Integer> INT_ENTITY_ID = createField(DSL.name("int_entity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sys_entity_snapshot.long_entity_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, Long> LONG_ENTITY_ID = createField(DSL.name("long_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sys_entity_snapshot.author_id</code>.
     */
    public final TableField<SysEntitySnapshotRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.view_xml</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> VIEW_XML = createField(DSL.name("view_xml"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.snapshot_xml</code>.
     */
    public final TableField<SysEntitySnapshotRecord, String> SNAPSHOT_XML = createField(DSL.name("snapshot_xml"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.sys_entity_snapshot.snapshot_date</code>.
     */
    public final TableField<SysEntitySnapshotRecord, LocalDateTime> SNAPSHOT_DATE = createField(DSL.name("snapshot_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private SysEntitySnapshot(Name alias, Table<SysEntitySnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysEntitySnapshot(Name alias, Table<SysEntitySnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_entity_snapshot</code> table reference
     */
    public SysEntitySnapshot(String alias) {
        this(DSL.name(alias), SYS_ENTITY_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.sys_entity_snapshot</code> table reference
     */
    public SysEntitySnapshot(Name alias) {
        this(alias, SYS_ENTITY_SNAPSHOT);
    }

    /**
     * Create a <code>public.sys_entity_snapshot</code> table reference
     */
    public SysEntitySnapshot() {
        this(DSL.name("sys_entity_snapshot"), null);
    }

    public <O extends Record> SysEntitySnapshot(Table<O> child, ForeignKey<O, SysEntitySnapshotRecord> key) {
        super(child, key, SYS_ENTITY_SNAPSHOT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SYS_ENTITY_SNAPSHOT_ENTITY_ID, Indexes.IDX_SYS_ENTITY_SNAPSHOT_IENTITY_ID, Indexes.IDX_SYS_ENTITY_SNAPSHOT_LENTITY_ID, Indexes.IDX_SYS_ENTITY_SNAPSHOT_SENTITY_ID);
    }

    @Override
    public UniqueKey<SysEntitySnapshotRecord> getPrimaryKey() {
        return Keys.SYS_ENTITY_SNAPSHOT_PKEY;
    }

    @Override
    public List<ForeignKey<SysEntitySnapshotRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SYS_ENTITY_SNAPSHOT__FK_SYS_ENTITY_SNAPSHOT_AUTHOR_ID);
    }

    private transient SecUser _secUser;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SYS_ENTITY_SNAPSHOT__FK_SYS_ENTITY_SNAPSHOT_AUTHOR_ID);

        return _secUser;
    }

    @Override
    public SysEntitySnapshot as(String alias) {
        return new SysEntitySnapshot(DSL.name(alias), this);
    }

    @Override
    public SysEntitySnapshot as(Name alias) {
        return new SysEntitySnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysEntitySnapshot rename(String name) {
        return new SysEntitySnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysEntitySnapshot rename(Name name) {
        return new SysEntitySnapshot(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, LocalDateTime, String, String, String, UUID, String, Integer, Long, UUID, String, String, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
