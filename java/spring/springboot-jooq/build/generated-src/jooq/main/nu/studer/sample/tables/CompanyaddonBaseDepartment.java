/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.CompanyaddonBaseDepartmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyaddonBaseDepartment extends TableImpl<CompanyaddonBaseDepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.companyaddon_base_department</code>
     */
    public static final CompanyaddonBaseDepartment COMPANYADDON_BASE_DEPARTMENT = new CompanyaddonBaseDepartment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyaddonBaseDepartmentRecord> getRecordType() {
        return CompanyaddonBaseDepartmentRecord.class;
    }

    /**
     * The column <code>public.companyaddon_base_department.id</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.companyaddon_base_department.version</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.companyaddon_base_department.create_ts</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_department.created_by</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_department.update_ts</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_department.updated_by</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_department.delete_ts</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.companyaddon_base_department.deleted_by</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.companyaddon_base_department.received</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.companyaddon_base_department.kafka_key</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_department.name</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.companyaddon_base_department.code</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.companyaddon_base_department.company_id</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, UUID> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.companyaddon_base_department.head_person_id</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, UUID> HEAD_PERSON_ID = createField(DSL.name("head_person_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.companyaddon_base_department.parent_department_id</code>.
     */
    public final TableField<CompanyaddonBaseDepartmentRecord, UUID> PARENT_DEPARTMENT_ID = createField(DSL.name("parent_department_id"), SQLDataType.UUID, this, "");

    private CompanyaddonBaseDepartment(Name alias, Table<CompanyaddonBaseDepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyaddonBaseDepartment(Name alias, Table<CompanyaddonBaseDepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.companyaddon_base_department</code> table
     * reference
     */
    public CompanyaddonBaseDepartment(String alias) {
        this(DSL.name(alias), COMPANYADDON_BASE_DEPARTMENT);
    }

    /**
     * Create an aliased <code>public.companyaddon_base_department</code> table
     * reference
     */
    public CompanyaddonBaseDepartment(Name alias) {
        this(alias, COMPANYADDON_BASE_DEPARTMENT);
    }

    /**
     * Create a <code>public.companyaddon_base_department</code> table reference
     */
    public CompanyaddonBaseDepartment() {
        this(DSL.name("companyaddon_base_department"), null);
    }

    public <O extends Record> CompanyaddonBaseDepartment(Table<O> child, ForeignKey<O, CompanyaddonBaseDepartmentRecord> key) {
        super(child, key, COMPANYADDON_BASE_DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_COMPANYADDON_BASE_DEPARTMENT_ON_COMPANY, Indexes.IDX_COMPANYADDON_BASE_DEPARTMENT_ON_HEAD_PERSON, Indexes.IDX_COMPANYADDON_BASE_DEPARTMENT_ON_PARENT_DEPARTMENT, Indexes.IDX_COMPANYADDON_BASE_DEPARTMENT_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<CompanyaddonBaseDepartmentRecord> getPrimaryKey() {
        return Keys.COMPANYADDON_BASE_DEPARTMENT_PKEY;
    }

    @Override
    public List<ForeignKey<CompanyaddonBaseDepartmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_COMPANY, Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_HEAD_PERSON, Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_PARENT_DEPARTMENT);
    }

    private transient CompanyaddonBaseCompany _companyaddonBaseCompany;
    private transient CompanyaddonBaseEmployee _companyaddonBaseEmployee;
    private transient CompanyaddonBaseDepartment _companyaddonBaseDepartment;

    public CompanyaddonBaseCompany companyaddonBaseCompany() {
        if (_companyaddonBaseCompany == null)
            _companyaddonBaseCompany = new CompanyaddonBaseCompany(this, Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_COMPANY);

        return _companyaddonBaseCompany;
    }

    public CompanyaddonBaseEmployee companyaddonBaseEmployee() {
        if (_companyaddonBaseEmployee == null)
            _companyaddonBaseEmployee = new CompanyaddonBaseEmployee(this, Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_HEAD_PERSON);

        return _companyaddonBaseEmployee;
    }

    public CompanyaddonBaseDepartment companyaddonBaseDepartment() {
        if (_companyaddonBaseDepartment == null)
            _companyaddonBaseDepartment = new CompanyaddonBaseDepartment(this, Keys.COMPANYADDON_BASE_DEPARTMENT__FK_COMPANYADDON_BASE_DEPARTMENT_ON_PARENT_DEPARTMENT);

        return _companyaddonBaseDepartment;
    }

    @Override
    public CompanyaddonBaseDepartment as(String alias) {
        return new CompanyaddonBaseDepartment(DSL.name(alias), this);
    }

    @Override
    public CompanyaddonBaseDepartment as(Name alias) {
        return new CompanyaddonBaseDepartment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseDepartment rename(String name) {
        return new CompanyaddonBaseDepartment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyaddonBaseDepartment rename(Name name) {
        return new CompanyaddonBaseDepartment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, UUID, UUID, UUID> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
