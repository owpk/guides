/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecRememberMeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecRememberMe extends TableImpl<SecRememberMeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_remember_me</code>
     */
    public static final SecRememberMe SEC_REMEMBER_ME = new SecRememberMe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecRememberMeRecord> getRecordType() {
        return SecRememberMeRecord.class;
    }

    /**
     * The column <code>public.sec_remember_me.id</code>.
     */
    public final TableField<SecRememberMeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_remember_me.create_ts</code>.
     */
    public final TableField<SecRememberMeRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_remember_me.created_by</code>.
     */
    public final TableField<SecRememberMeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_remember_me.version</code>.
     */
    public final TableField<SecRememberMeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_remember_me.user_id</code>.
     */
    public final TableField<SecRememberMeRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_remember_me.token</code>.
     */
    public final TableField<SecRememberMeRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private SecRememberMe(Name alias, Table<SecRememberMeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecRememberMe(Name alias, Table<SecRememberMeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_remember_me</code> table reference
     */
    public SecRememberMe(String alias) {
        this(DSL.name(alias), SEC_REMEMBER_ME);
    }

    /**
     * Create an aliased <code>public.sec_remember_me</code> table reference
     */
    public SecRememberMe(Name alias) {
        this(alias, SEC_REMEMBER_ME);
    }

    /**
     * Create a <code>public.sec_remember_me</code> table reference
     */
    public SecRememberMe() {
        this(DSL.name("sec_remember_me"), null);
    }

    public <O extends Record> SecRememberMe(Table<O> child, ForeignKey<O, SecRememberMeRecord> key) {
        super(child, key, SEC_REMEMBER_ME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_REMEMBER_ME_TOKEN, Indexes.IDX_SEC_REMEMBER_ME_USER);
    }

    @Override
    public UniqueKey<SecRememberMeRecord> getPrimaryKey() {
        return Keys.SEC_REMEMBER_ME_PKEY;
    }

    @Override
    public List<ForeignKey<SecRememberMeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_REMEMBER_ME__FK_SEC_REMEMBER_ME_USER);
    }

    private transient SecUser _secUser;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SEC_REMEMBER_ME__FK_SEC_REMEMBER_ME_USER);

        return _secUser;
    }

    @Override
    public SecRememberMe as(String alias) {
        return new SecRememberMe(DSL.name(alias), this);
    }

    @Override
    public SecRememberMe as(Name alias) {
        return new SecRememberMe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecRememberMe rename(String name) {
        return new SecRememberMe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecRememberMe rename(Name name) {
        return new SecRememberMe(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, LocalDateTime, String, Integer, UUID, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
