/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckListItemCheckListLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListItemCheckListLink extends TableImpl<SmartexamCheckListItemCheckListLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_check_list_item_check_list_link</code>
     */
    public static final SmartexamCheckListItemCheckListLink SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK = new SmartexamCheckListItemCheckListLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckListItemCheckListLinkRecord> getRecordType() {
        return SmartexamCheckListItemCheckListLinkRecord.class;
    }

    /**
     * The column
     * <code>public.smartexam_check_list_item_check_list_link.check_list_item_id</code>.
     */
    public final TableField<SmartexamCheckListItemCheckListLinkRecord, UUID> CHECK_LIST_ITEM_ID = createField(DSL.name("check_list_item_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_item_check_list_link.check_list_id</code>.
     */
    public final TableField<SmartexamCheckListItemCheckListLinkRecord, UUID> CHECK_LIST_ID = createField(DSL.name("check_list_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamCheckListItemCheckListLink(Name alias, Table<SmartexamCheckListItemCheckListLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckListItemCheckListLink(Name alias, Table<SmartexamCheckListItemCheckListLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexam_check_list_item_check_list_link</code> table
     * reference
     */
    public SmartexamCheckListItemCheckListLink(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK);
    }

    /**
     * Create an aliased
     * <code>public.smartexam_check_list_item_check_list_link</code> table
     * reference
     */
    public SmartexamCheckListItemCheckListLink(Name alias) {
        this(alias, SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK);
    }

    /**
     * Create a <code>public.smartexam_check_list_item_check_list_link</code>
     * table reference
     */
    public SmartexamCheckListItemCheckListLink() {
        this(DSL.name("smartexam_check_list_item_check_list_link"), null);
    }

    public <O extends Record> SmartexamCheckListItemCheckListLink(Table<O> child, ForeignKey<O, SmartexamCheckListItemCheckListLinkRecord> key) {
        super(child, key, SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamCheckListItemCheckListLinkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckListItemCheckListLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST_ITEM, Keys.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST);
    }

    private transient SmartmonCheckListItem _smartmonCheckListItem;
    private transient SmartmonCheckList _smartmonCheckList;

    public SmartmonCheckListItem smartmonCheckListItem() {
        if (_smartmonCheckListItem == null)
            _smartmonCheckListItem = new SmartmonCheckListItem(this, Keys.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST_ITEM);

        return _smartmonCheckListItem;
    }

    public SmartmonCheckList smartmonCheckList() {
        if (_smartmonCheckList == null)
            _smartmonCheckList = new SmartmonCheckList(this, Keys.SMARTEXAM_CHECK_LIST_ITEM_CHECK_LIST_LINK__FK_CHELISITECHELIS_ON_CHECK_LIST);

        return _smartmonCheckList;
    }

    @Override
    public SmartexamCheckListItemCheckListLink as(String alias) {
        return new SmartexamCheckListItemCheckListLink(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckListItemCheckListLink as(Name alias) {
        return new SmartexamCheckListItemCheckListLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListItemCheckListLink rename(String name) {
        return new SmartexamCheckListItemCheckListLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListItemCheckListLink rename(Name name) {
        return new SmartexamCheckListItemCheckListLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
