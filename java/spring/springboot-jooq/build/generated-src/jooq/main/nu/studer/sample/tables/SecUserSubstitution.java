/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecUserSubstitutionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecUserSubstitution extends TableImpl<SecUserSubstitutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_user_substitution</code>
     */
    public static final SecUserSubstitution SEC_USER_SUBSTITUTION = new SecUserSubstitution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecUserSubstitutionRecord> getRecordType() {
        return SecUserSubstitutionRecord.class;
    }

    /**
     * The column <code>public.sec_user_substitution.id</code>.
     */
    public final TableField<SecUserSubstitutionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_user_substitution.create_ts</code>.
     */
    public final TableField<SecUserSubstitutionRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user_substitution.created_by</code>.
     */
    public final TableField<SecUserSubstitutionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user_substitution.version</code>.
     */
    public final TableField<SecUserSubstitutionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_user_substitution.update_ts</code>.
     */
    public final TableField<SecUserSubstitutionRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user_substitution.updated_by</code>.
     */
    public final TableField<SecUserSubstitutionRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user_substitution.delete_ts</code>.
     */
    public final TableField<SecUserSubstitutionRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user_substitution.deleted_by</code>.
     */
    public final TableField<SecUserSubstitutionRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user_substitution.sys_tenant_id</code>.
     */
    public final TableField<SecUserSubstitutionRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user_substitution.user_id</code>.
     */
    public final TableField<SecUserSubstitutionRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_user_substitution.substituted_user_id</code>.
     */
    public final TableField<SecUserSubstitutionRecord, UUID> SUBSTITUTED_USER_ID = createField(DSL.name("substituted_user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_user_substitution.start_date</code>.
     */
    public final TableField<SecUserSubstitutionRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user_substitution.end_date</code>.
     */
    public final TableField<SecUserSubstitutionRecord, LocalDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private SecUserSubstitution(Name alias, Table<SecUserSubstitutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecUserSubstitution(Name alias, Table<SecUserSubstitutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_user_substitution</code> table
     * reference
     */
    public SecUserSubstitution(String alias) {
        this(DSL.name(alias), SEC_USER_SUBSTITUTION);
    }

    /**
     * Create an aliased <code>public.sec_user_substitution</code> table
     * reference
     */
    public SecUserSubstitution(Name alias) {
        this(alias, SEC_USER_SUBSTITUTION);
    }

    /**
     * Create a <code>public.sec_user_substitution</code> table reference
     */
    public SecUserSubstitution() {
        this(DSL.name("sec_user_substitution"), null);
    }

    public <O extends Record> SecUserSubstitution(Table<O> child, ForeignKey<O, SecUserSubstitutionRecord> key) {
        super(child, key, SEC_USER_SUBSTITUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_USER_SUBSTITUTION_USER);
    }

    @Override
    public UniqueKey<SecUserSubstitutionRecord> getPrimaryKey() {
        return Keys.SEC_USER_SUBSTITUTION_PKEY;
    }

    @Override
    public List<ForeignKey<SecUserSubstitutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_USER, Keys.SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_SUBSTITUTED_USER);
    }

    private transient SecUser _fkSecUserSubstitutionUser;
    private transient SecUser _fkSecUserSubstitutionSubstitutedUser;

    public SecUser fkSecUserSubstitutionUser() {
        if (_fkSecUserSubstitutionUser == null)
            _fkSecUserSubstitutionUser = new SecUser(this, Keys.SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_USER);

        return _fkSecUserSubstitutionUser;
    }

    public SecUser fkSecUserSubstitutionSubstitutedUser() {
        if (_fkSecUserSubstitutionSubstitutedUser == null)
            _fkSecUserSubstitutionSubstitutedUser = new SecUser(this, Keys.SEC_USER_SUBSTITUTION__FK_SEC_USER_SUBSTITUTION_SUBSTITUTED_USER);

        return _fkSecUserSubstitutionSubstitutedUser;
    }

    @Override
    public SecUserSubstitution as(String alias) {
        return new SecUserSubstitution(DSL.name(alias), this);
    }

    @Override
    public SecUserSubstitution as(Name alias) {
        return new SecUserSubstitution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserSubstitution rename(String name) {
        return new SecUserSubstitution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserSubstitution rename(Name name) {
        return new SecUserSubstitution(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, LocalDateTime, String, Integer, LocalDateTime, String, LocalDateTime, String, String, UUID, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
