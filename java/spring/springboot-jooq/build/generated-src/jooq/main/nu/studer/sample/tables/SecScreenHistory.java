/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecScreenHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecScreenHistory extends TableImpl<SecScreenHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_screen_history</code>
     */
    public static final SecScreenHistory SEC_SCREEN_HISTORY = new SecScreenHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecScreenHistoryRecord> getRecordType() {
        return SecScreenHistoryRecord.class;
    }

    /**
     * The column <code>public.sec_screen_history.id</code>.
     */
    public final TableField<SecScreenHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_screen_history.create_ts</code>.
     */
    public final TableField<SecScreenHistoryRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_screen_history.created_by</code>.
     */
    public final TableField<SecScreenHistoryRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_screen_history.sys_tenant_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_screen_history.user_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_screen_history.caption</code>.
     */
    public final TableField<SecScreenHistoryRecord, String> CAPTION = createField(DSL.name("caption"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_screen_history.url</code>.
     */
    public final TableField<SecScreenHistoryRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sec_screen_history.entity_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_screen_history.string_entity_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, String> STRING_ENTITY_ID = createField(DSL.name("string_entity_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_screen_history.int_entity_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, Integer> INT_ENTITY_ID = createField(DSL.name("int_entity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sec_screen_history.long_entity_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, Long> LONG_ENTITY_ID = createField(DSL.name("long_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sec_screen_history.substituted_user_id</code>.
     */
    public final TableField<SecScreenHistoryRecord, UUID> SUBSTITUTED_USER_ID = createField(DSL.name("substituted_user_id"), SQLDataType.UUID, this, "");

    private SecScreenHistory(Name alias, Table<SecScreenHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecScreenHistory(Name alias, Table<SecScreenHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_screen_history</code> table reference
     */
    public SecScreenHistory(String alias) {
        this(DSL.name(alias), SEC_SCREEN_HISTORY);
    }

    /**
     * Create an aliased <code>public.sec_screen_history</code> table reference
     */
    public SecScreenHistory(Name alias) {
        this(alias, SEC_SCREEN_HISTORY);
    }

    /**
     * Create a <code>public.sec_screen_history</code> table reference
     */
    public SecScreenHistory() {
        this(DSL.name("sec_screen_history"), null);
    }

    public <O extends Record> SecScreenHistory(Table<O> child, ForeignKey<O, SecScreenHistoryRecord> key) {
        super(child, key, SEC_SCREEN_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_SCREEN_HIST_SUB_USER, Indexes.IDX_SEC_SCREEN_HISTORY_ENTITY_ID, Indexes.IDX_SEC_SCREEN_HISTORY_IENTITY_ID, Indexes.IDX_SEC_SCREEN_HISTORY_LENTITY_ID, Indexes.IDX_SEC_SCREEN_HISTORY_SENTITY_ID, Indexes.IDX_SEC_SCREEN_HISTORY_USER);
    }

    @Override
    public UniqueKey<SecScreenHistoryRecord> getPrimaryKey() {
        return Keys.SEC_SCREEN_HISTORY_PKEY;
    }

    @Override
    public List<ForeignKey<SecScreenHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_SCREEN_HISTORY__FK_SEC_HISTORY_USER, Keys.SEC_SCREEN_HISTORY__FK_SEC_HISTORY_SUBSTITUTED_USER);
    }

    private transient SecUser _fkSecHistoryUser;
    private transient SecUser _fkSecHistorySubstitutedUser;

    public SecUser fkSecHistoryUser() {
        if (_fkSecHistoryUser == null)
            _fkSecHistoryUser = new SecUser(this, Keys.SEC_SCREEN_HISTORY__FK_SEC_HISTORY_USER);

        return _fkSecHistoryUser;
    }

    public SecUser fkSecHistorySubstitutedUser() {
        if (_fkSecHistorySubstitutedUser == null)
            _fkSecHistorySubstitutedUser = new SecUser(this, Keys.SEC_SCREEN_HISTORY__FK_SEC_HISTORY_SUBSTITUTED_USER);

        return _fkSecHistorySubstitutedUser;
    }

    @Override
    public SecScreenHistory as(String alias) {
        return new SecScreenHistory(DSL.name(alias), this);
    }

    @Override
    public SecScreenHistory as(Name alias) {
        return new SecScreenHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecScreenHistory rename(String name) {
        return new SecScreenHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecScreenHistory rename(Name name) {
        return new SecScreenHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, LocalDateTime, String, String, UUID, String, String, UUID, String, Integer, Long, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
