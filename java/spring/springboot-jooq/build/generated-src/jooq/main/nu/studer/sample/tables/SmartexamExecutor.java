/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamExecutorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamExecutor extends TableImpl<SmartexamExecutorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_executor</code>
     */
    public static final SmartexamExecutor SMARTEXAM_EXECUTOR = new SmartexamExecutor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamExecutorRecord> getRecordType() {
        return SmartexamExecutorRecord.class;
    }

    /**
     * The column <code>public.smartexam_executor.id</code>.
     */
    public final TableField<SmartexamExecutorRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_executor.version</code>.
     */
    public final TableField<SmartexamExecutorRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_executor.create_ts</code>.
     */
    public final TableField<SmartexamExecutorRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_executor.created_by</code>.
     */
    public final TableField<SmartexamExecutorRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_executor.update_ts</code>.
     */
    public final TableField<SmartexamExecutorRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_executor.updated_by</code>.
     */
    public final TableField<SmartexamExecutorRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_executor.delete_ts</code>.
     */
    public final TableField<SmartexamExecutorRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_executor.deleted_by</code>.
     */
    public final TableField<SmartexamExecutorRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_executor.date_start</code>.
     */
    public final TableField<SmartexamExecutorRecord, LocalDateTime> DATE_START = createField(DSL.name("date_start"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_executor.working_hours</code>.
     */
    public final TableField<SmartexamExecutorRecord, LocalTime> WORKING_HOURS = createField(DSL.name("working_hours"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.smartexam_executor.repair_request_id</code>.
     */
    public final TableField<SmartexamExecutorRecord, UUID> REPAIR_REQUEST_ID = createField(DSL.name("repair_request_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_executor.employee_id</code>.
     */
    public final TableField<SmartexamExecutorRecord, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID, this, "");

    private SmartexamExecutor(Name alias, Table<SmartexamExecutorRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamExecutor(Name alias, Table<SmartexamExecutorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_executor</code> table reference
     */
    public SmartexamExecutor(String alias) {
        this(DSL.name(alias), SMARTEXAM_EXECUTOR);
    }

    /**
     * Create an aliased <code>public.smartexam_executor</code> table reference
     */
    public SmartexamExecutor(Name alias) {
        this(alias, SMARTEXAM_EXECUTOR);
    }

    /**
     * Create a <code>public.smartexam_executor</code> table reference
     */
    public SmartexamExecutor() {
        this(DSL.name("smartexam_executor"), null);
    }

    public <O extends Record> SmartexamExecutor(Table<O> child, ForeignKey<O, SmartexamExecutorRecord> key) {
        super(child, key, SMARTEXAM_EXECUTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_EXECUTOR_ON_EMPLOYEE, Indexes.IDX_SMARTEXAM_EXECUTOR_ON_REPAIR_REQUEST);
    }

    @Override
    public UniqueKey<SmartexamExecutorRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_EXECUTOR_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamExecutorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_REPAIR_REQUEST, Keys.SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_EMPLOYEE);
    }

    private transient SmartexamRepairRequest _smartexamRepairRequest;
    private transient CompanyaddonBaseEmployee _companyaddonBaseEmployee;

    public SmartexamRepairRequest smartexamRepairRequest() {
        if (_smartexamRepairRequest == null)
            _smartexamRepairRequest = new SmartexamRepairRequest(this, Keys.SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_REPAIR_REQUEST);

        return _smartexamRepairRequest;
    }

    public CompanyaddonBaseEmployee companyaddonBaseEmployee() {
        if (_companyaddonBaseEmployee == null)
            _companyaddonBaseEmployee = new CompanyaddonBaseEmployee(this, Keys.SMARTEXAM_EXECUTOR__FK_SMARTEXAM_EXECUTOR_ON_EMPLOYEE);

        return _companyaddonBaseEmployee;
    }

    @Override
    public SmartexamExecutor as(String alias) {
        return new SmartexamExecutor(DSL.name(alias), this);
    }

    @Override
    public SmartexamExecutor as(Name alias) {
        return new SmartexamExecutor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamExecutor rename(String name) {
        return new SmartexamExecutor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamExecutor rename(Name name) {
        return new SmartexamExecutor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, LocalDateTime, LocalTime, UUID, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
