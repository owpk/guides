/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamLogbookFileDescriptorLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamLogbookFileDescriptorLink extends TableImpl<SmartexamLogbookFileDescriptorLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_logbook_file_descriptor_link</code>
     */
    public static final SmartexamLogbookFileDescriptorLink SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK = new SmartexamLogbookFileDescriptorLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamLogbookFileDescriptorLinkRecord> getRecordType() {
        return SmartexamLogbookFileDescriptorLinkRecord.class;
    }

    /**
     * The column
     * <code>public.smartexam_logbook_file_descriptor_link.logbook_id</code>.
     */
    public final TableField<SmartexamLogbookFileDescriptorLinkRecord, UUID> LOGBOOK_ID = createField(DSL.name("logbook_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_logbook_file_descriptor_link.file_descriptor_id</code>.
     */
    public final TableField<SmartexamLogbookFileDescriptorLinkRecord, UUID> FILE_DESCRIPTOR_ID = createField(DSL.name("file_descriptor_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamLogbookFileDescriptorLink(Name alias, Table<SmartexamLogbookFileDescriptorLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamLogbookFileDescriptorLink(Name alias, Table<SmartexamLogbookFileDescriptorLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexam_logbook_file_descriptor_link</code> table
     * reference
     */
    public SmartexamLogbookFileDescriptorLink(String alias) {
        this(DSL.name(alias), SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);
    }

    /**
     * Create an aliased
     * <code>public.smartexam_logbook_file_descriptor_link</code> table
     * reference
     */
    public SmartexamLogbookFileDescriptorLink(Name alias) {
        this(alias, SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);
    }

    /**
     * Create a <code>public.smartexam_logbook_file_descriptor_link</code> table
     * reference
     */
    public SmartexamLogbookFileDescriptorLink() {
        this(DSL.name("smartexam_logbook_file_descriptor_link"), null);
    }

    public <O extends Record> SmartexamLogbookFileDescriptorLink(Table<O> child, ForeignKey<O, SmartexamLogbookFileDescriptorLinkRecord> key) {
        super(child, key, SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamLogbookFileDescriptorLinkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamLogbookFileDescriptorLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_LOGBOOK, Keys.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_FILE_DESCRIPTOR);
    }

    private transient SmartexamLogbook _smartexamLogbook;
    private transient SysFile _sysFile;

    public SmartexamLogbook smartexamLogbook() {
        if (_smartexamLogbook == null)
            _smartexamLogbook = new SmartexamLogbook(this, Keys.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_LOGBOOK);

        return _smartexamLogbook;
    }

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK__FK_LOGFILDES_ON_FILE_DESCRIPTOR);

        return _sysFile;
    }

    @Override
    public SmartexamLogbookFileDescriptorLink as(String alias) {
        return new SmartexamLogbookFileDescriptorLink(DSL.name(alias), this);
    }

    @Override
    public SmartexamLogbookFileDescriptorLink as(Name alias) {
        return new SmartexamLogbookFileDescriptorLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLogbookFileDescriptorLink rename(String name) {
        return new SmartexamLogbookFileDescriptorLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLogbookFileDescriptorLink rename(Name name) {
        return new SmartexamLogbookFileDescriptorLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
