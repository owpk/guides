/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckListTransportTypeLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListTransportTypeLink extends TableImpl<SmartexamCheckListTransportTypeLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_check_list_transport_type_link</code>
     */
    public static final SmartexamCheckListTransportTypeLink SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK = new SmartexamCheckListTransportTypeLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckListTransportTypeLinkRecord> getRecordType() {
        return SmartexamCheckListTransportTypeLinkRecord.class;
    }

    /**
     * The column
     * <code>public.smartexam_check_list_transport_type_link.check_list_id</code>.
     */
    public final TableField<SmartexamCheckListTransportTypeLinkRecord, UUID> CHECK_LIST_ID = createField(DSL.name("check_list_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_transport_type_link.transport_type_id</code>.
     */
    public final TableField<SmartexamCheckListTransportTypeLinkRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamCheckListTransportTypeLink(Name alias, Table<SmartexamCheckListTransportTypeLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckListTransportTypeLink(Name alias, Table<SmartexamCheckListTransportTypeLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.smartexam_check_list_transport_type_link</code> table
     * reference
     */
    public SmartexamCheckListTransportTypeLink(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK);
    }

    /**
     * Create an aliased
     * <code>public.smartexam_check_list_transport_type_link</code> table
     * reference
     */
    public SmartexamCheckListTransportTypeLink(Name alias) {
        this(alias, SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK);
    }

    /**
     * Create a <code>public.smartexam_check_list_transport_type_link</code>
     * table reference
     */
    public SmartexamCheckListTransportTypeLink() {
        this(DSL.name("smartexam_check_list_transport_type_link"), null);
    }

    public <O extends Record> SmartexamCheckListTransportTypeLink(Table<O> child, ForeignKey<O, SmartexamCheckListTransportTypeLinkRecord> key) {
        super(child, key, SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamCheckListTransportTypeLinkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckListTransportTypeLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_CHECK_LIST, Keys.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_TRANSPORT_TYPE);
    }

    private transient SmartmonCheckList _smartmonCheckList;
    private transient SmartmonTransportType _smartmonTransportType;

    public SmartmonCheckList smartmonCheckList() {
        if (_smartmonCheckList == null)
            _smartmonCheckList = new SmartmonCheckList(this, Keys.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_CHECK_LIST);

        return _smartmonCheckList;
    }

    public SmartmonTransportType smartmonTransportType() {
        if (_smartmonTransportType == null)
            _smartmonTransportType = new SmartmonTransportType(this, Keys.SMARTEXAM_CHECK_LIST_TRANSPORT_TYPE_LINK__FK_CHELISTRATYP_ON_TRANSPORT_TYPE);

        return _smartmonTransportType;
    }

    @Override
    public SmartexamCheckListTransportTypeLink as(String alias) {
        return new SmartexamCheckListTransportTypeLink(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckListTransportTypeLink as(Name alias) {
        return new SmartexamCheckListTransportTypeLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListTransportTypeLink rename(String name) {
        return new SmartexamCheckListTransportTypeLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListTransportTypeLink rename(Name name) {
        return new SmartexamCheckListTransportTypeLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
