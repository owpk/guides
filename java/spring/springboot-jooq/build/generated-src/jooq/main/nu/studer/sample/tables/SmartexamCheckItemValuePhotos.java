/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckItemValuePhotosRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckItemValuePhotos extends TableImpl<SmartexamCheckItemValuePhotosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_check_item_value_photos</code>
     */
    public static final SmartexamCheckItemValuePhotos SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS = new SmartexamCheckItemValuePhotos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckItemValuePhotosRecord> getRecordType() {
        return SmartexamCheckItemValuePhotosRecord.class;
    }

    /**
     * The column <code>public.smartexam_check_item_value_photos.id</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_check_item_value_photos.version</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.create_ts</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.created_by</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.update_ts</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.updated_by</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.delete_ts</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.deleted_by</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.photo_id</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.check_item_value_id</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, UUID> CHECK_ITEM_VALUE_ID = createField(DSL.name("check_item_value_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_check_item_value_photos.media_type</code>.
     */
    public final TableField<SmartexamCheckItemValuePhotosRecord, String> MEDIA_TYPE = createField(DSL.name("media_type"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamCheckItemValuePhotos(Name alias, Table<SmartexamCheckItemValuePhotosRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckItemValuePhotos(Name alias, Table<SmartexamCheckItemValuePhotosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_check_item_value_photos</code>
     * table reference
     */
    public SmartexamCheckItemValuePhotos(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS);
    }

    /**
     * Create an aliased <code>public.smartexam_check_item_value_photos</code>
     * table reference
     */
    public SmartexamCheckItemValuePhotos(Name alias) {
        this(alias, SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS);
    }

    /**
     * Create a <code>public.smartexam_check_item_value_photos</code> table
     * reference
     */
    public SmartexamCheckItemValuePhotos() {
        this(DSL.name("smartexam_check_item_value_photos"), null);
    }

    public <O extends Record> SmartexamCheckItemValuePhotos(Table<O> child, ForeignKey<O, SmartexamCheckItemValuePhotosRecord> key) {
        super(child, key, SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_CHECK_ITEM_VALUE, Indexes.IDX_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_PHOTO);
    }

    @Override
    public UniqueKey<SmartexamCheckItemValuePhotosRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckItemValuePhotosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_PHOTO, Keys.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_CHECK_ITEM_VALUE);
    }

    private transient SysFile _sysFile;
    private transient SmartmonCheckItemValue _smartmonCheckItemValue;

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_PHOTO);

        return _sysFile;
    }

    public SmartmonCheckItemValue smartmonCheckItemValue() {
        if (_smartmonCheckItemValue == null)
            _smartmonCheckItemValue = new SmartmonCheckItemValue(this, Keys.SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS__FK_SMARTEXAM_CHECK_ITEM_VALUE_PHOTOS_ON_CHECK_ITEM_VALUE);

        return _smartmonCheckItemValue;
    }

    @Override
    public SmartexamCheckItemValuePhotos as(String alias) {
        return new SmartexamCheckItemValuePhotos(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckItemValuePhotos as(Name alias) {
        return new SmartexamCheckItemValuePhotos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckItemValuePhotos rename(String name) {
        return new SmartexamCheckItemValuePhotos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckItemValuePhotos rename(Name name) {
        return new SmartexamCheckItemValuePhotos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, UUID, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
