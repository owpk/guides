/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamTransportTypeFrom1c;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamTransportTypeFrom1cRecord extends UpdatableRecordImpl<SmartexamTransportTypeFrom1cRecord> implements Record14<UUID, String, UUID, Long, String, Boolean, String, String, LocalDateTime, LocalDateTime, String, String, LocalDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.id</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.name</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.parent_id</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setParentId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.parent_id</code>.
     */
    public UUID getParentId() {
        return (UUID) get(2);
    }

    /**
     * Setter for
     * <code>public.smartexam_transport_type_from1c.mileage_for_to</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setMileageForTo(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_type_from1c.mileage_for_to</code>.
     */
    public Long getMileageForTo() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>public.smartexam_transport_type_from1c.registry_sheet_name</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setRegistrySheetName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_type_from1c.registry_sheet_name</code>.
     */
    public String getRegistrySheetName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.received</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setReceived(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.received</code>.
     */
    public Boolean getReceived() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.kafka_key</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setKafkaKey(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.kafka_key</code>.
     */
    public String getKafkaKey() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>public.smartexam_transport_type_from1c.deleted_by</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_type_from1c.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.update_ts</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setUpdateTs(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.delete_ts</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setDeleteTs(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for
     * <code>public.smartexam_transport_type_from1c.updated_by</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setUpdatedBy(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_type_from1c.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>public.smartexam_transport_type_from1c.created_by</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setCreatedBy(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_type_from1c.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.create_ts</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setCreateTs(LocalDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>public.smartexam_transport_type_from1c.version</code>.
     */
    public SmartexamTransportTypeFrom1cRecord setVersion(Integer value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_transport_type_from1c.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, String, UUID, Long, String, Boolean, String, String, LocalDateTime, LocalDateTime, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<UUID, String, UUID, Long, String, Boolean, String, String, LocalDateTime, LocalDateTime, String, String, LocalDateTime, Integer> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.ID;
    }

    @Override
    public Field<String> field2() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.NAME;
    }

    @Override
    public Field<UUID> field3() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.PARENT_ID;
    }

    @Override
    public Field<Long> field4() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.MILEAGE_FOR_TO;
    }

    @Override
    public Field<String> field5() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.REGISTRY_SHEET_NAME;
    }

    @Override
    public Field<Boolean> field6() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.RECEIVED;
    }

    @Override
    public Field<String> field7() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.KAFKA_KEY;
    }

    @Override
    public Field<String> field8() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.DELETED_BY;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.UPDATE_TS;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.DELETE_TS;
    }

    @Override
    public Field<String> field11() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.UPDATED_BY;
    }

    @Override
    public Field<String> field12() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field13() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.CREATE_TS;
    }

    @Override
    public Field<Integer> field14() {
        return SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C.VERSION;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UUID component3() {
        return getParentId();
    }

    @Override
    public Long component4() {
        return getMileageForTo();
    }

    @Override
    public String component5() {
        return getRegistrySheetName();
    }

    @Override
    public Boolean component6() {
        return getReceived();
    }

    @Override
    public String component7() {
        return getKafkaKey();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public LocalDateTime component9() {
        return getUpdateTs();
    }

    @Override
    public LocalDateTime component10() {
        return getDeleteTs();
    }

    @Override
    public String component11() {
        return getUpdatedBy();
    }

    @Override
    public String component12() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component13() {
        return getCreateTs();
    }

    @Override
    public Integer component14() {
        return getVersion();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UUID value3() {
        return getParentId();
    }

    @Override
    public Long value4() {
        return getMileageForTo();
    }

    @Override
    public String value5() {
        return getRegistrySheetName();
    }

    @Override
    public Boolean value6() {
        return getReceived();
    }

    @Override
    public String value7() {
        return getKafkaKey();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public LocalDateTime value9() {
        return getUpdateTs();
    }

    @Override
    public LocalDateTime value10() {
        return getDeleteTs();
    }

    @Override
    public String value11() {
        return getUpdatedBy();
    }

    @Override
    public String value12() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value13() {
        return getCreateTs();
    }

    @Override
    public Integer value14() {
        return getVersion();
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value3(UUID value) {
        setParentId(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value4(Long value) {
        setMileageForTo(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value5(String value) {
        setRegistrySheetName(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value6(Boolean value) {
        setReceived(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value7(String value) {
        setKafkaKey(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value9(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value10(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value11(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value12(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value13(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord value14(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamTransportTypeFrom1cRecord values(UUID value1, String value2, UUID value3, Long value4, String value5, Boolean value6, String value7, String value8, LocalDateTime value9, LocalDateTime value10, String value11, String value12, LocalDateTime value13, Integer value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamTransportTypeFrom1cRecord
     */
    public SmartexamTransportTypeFrom1cRecord() {
        super(SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C);
    }

    /**
     * Create a detached, initialised SmartexamTransportTypeFrom1cRecord
     */
    public SmartexamTransportTypeFrom1cRecord(UUID id, String name, UUID parentId, Long mileageForTo, String registrySheetName, Boolean received, String kafkaKey, String deletedBy, LocalDateTime updateTs, LocalDateTime deleteTs, String updatedBy, String createdBy, LocalDateTime createTs, Integer version) {
        super(SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C);

        setId(id);
        setName(name);
        setParentId(parentId);
        setMileageForTo(mileageForTo);
        setRegistrySheetName(registrySheetName);
        setReceived(received);
        setKafkaKey(kafkaKey);
        setDeletedBy(deletedBy);
        setUpdateTs(updateTs);
        setDeleteTs(deleteTs);
        setUpdatedBy(updatedBy);
        setCreatedBy(createdBy);
        setCreateTs(createTs);
        setVersion(version);
    }

    /**
     * Create a detached, initialised SmartexamTransportTypeFrom1cRecord
     */
    public SmartexamTransportTypeFrom1cRecord(nu.studer.sample.tables.pojos.SmartexamTransportTypeFrom1c value) {
        super(SmartexamTransportTypeFrom1c.SMARTEXAM_TRANSPORT_TYPE_FROM1C);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setParentId(value.getParentId());
            setMileageForTo(value.getMileageForTo());
            setRegistrySheetName(value.getRegistrySheetName());
            setReceived(value.getReceived());
            setKafkaKey(value.getKafkaKey());
            setDeletedBy(value.getDeletedBy());
            setUpdateTs(value.getUpdateTs());
            setDeleteTs(value.getDeleteTs());
            setUpdatedBy(value.getUpdatedBy());
            setCreatedBy(value.getCreatedBy());
            setCreateTs(value.getCreateTs());
            setVersion(value.getVersion());
        }
    }
}
