/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamCheckListWorkValue;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListWorkValueRecord extends UpdatableRecordImpl<SmartexamCheckListWorkValueRecord> implements Record15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, UUID, Long, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_check_list_work_value.id</code>.
     */
    public SmartexamCheckListWorkValueRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.version</code>.
     */
    public SmartexamCheckListWorkValueRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.create_ts</code>.
     */
    public SmartexamCheckListWorkValueRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.created_by</code>.
     */
    public SmartexamCheckListWorkValueRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.update_ts</code>.
     */
    public SmartexamCheckListWorkValueRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.updated_by</code>.
     */
    public SmartexamCheckListWorkValueRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.delete_ts</code>.
     */
    public SmartexamCheckListWorkValueRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.deleted_by</code>.
     */
    public SmartexamCheckListWorkValueRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.repair_request_work_id</code>.
     */
    public SmartexamCheckListWorkValueRecord setRepairRequestWorkId(UUID value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.repair_request_work_id</code>.
     */
    public UUID getRepairRequestWorkId() {
        return (UUID) get(8);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.done</code>.
     */
    public SmartexamCheckListWorkValueRecord setDone(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.done</code>.
     */
    public Boolean getDone() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.plan_id</code>.
     */
    public SmartexamCheckListWorkValueRecord setPlanId(UUID value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.plan_id</code>.
     */
    public UUID getPlanId() {
        return (UUID) get(10);
    }

    /**
     * Setter for <code>public.smartexam_check_list_work_value.photo_id</code>.
     */
    public SmartexamCheckListWorkValueRecord setPhotoId(UUID value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.photo_id</code>.
     */
    public UUID getPhotoId() {
        return (UUID) get(11);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.actual_spend</code>.
     */
    public SmartexamCheckListWorkValueRecord setActualSpend(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_spend</code>.
     */
    public Long getActualSpend() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.actual_date_end</code>.
     */
    public SmartexamCheckListWorkValueRecord setActualDateEnd(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_date_end</code>.
     */
    public LocalDateTime getActualDateEnd() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for
     * <code>public.smartexam_check_list_work_value.actual_date_start</code>.
     */
    public SmartexamCheckListWorkValueRecord setActualDateStart(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_date_start</code>.
     */
    public LocalDateTime getActualDateStart() {
        return (LocalDateTime) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, UUID, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, UUID, Long, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.DELETED_BY;
    }

    @Override
    public Field<UUID> field9() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.REPAIR_REQUEST_WORK_ID;
    }

    @Override
    public Field<Boolean> field10() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.DONE;
    }

    @Override
    public Field<UUID> field11() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.PLAN_ID;
    }

    @Override
    public Field<UUID> field12() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.PHOTO_ID;
    }

    @Override
    public Field<Long> field13() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.ACTUAL_SPEND;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.ACTUAL_DATE_END;
    }

    @Override
    public Field<LocalDateTime> field15() {
        return SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE.ACTUAL_DATE_START;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public UUID component9() {
        return getRepairRequestWorkId();
    }

    @Override
    public Boolean component10() {
        return getDone();
    }

    @Override
    public UUID component11() {
        return getPlanId();
    }

    @Override
    public UUID component12() {
        return getPhotoId();
    }

    @Override
    public Long component13() {
        return getActualSpend();
    }

    @Override
    public LocalDateTime component14() {
        return getActualDateEnd();
    }

    @Override
    public LocalDateTime component15() {
        return getActualDateStart();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public UUID value9() {
        return getRepairRequestWorkId();
    }

    @Override
    public Boolean value10() {
        return getDone();
    }

    @Override
    public UUID value11() {
        return getPlanId();
    }

    @Override
    public UUID value12() {
        return getPhotoId();
    }

    @Override
    public Long value13() {
        return getActualSpend();
    }

    @Override
    public LocalDateTime value14() {
        return getActualDateEnd();
    }

    @Override
    public LocalDateTime value15() {
        return getActualDateStart();
    }

    @Override
    public SmartexamCheckListWorkValueRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value9(UUID value) {
        setRepairRequestWorkId(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value10(Boolean value) {
        setDone(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value11(UUID value) {
        setPlanId(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value12(UUID value) {
        setPhotoId(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value13(Long value) {
        setActualSpend(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value14(LocalDateTime value) {
        setActualDateEnd(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord value15(LocalDateTime value) {
        setActualDateStart(value);
        return this;
    }

    @Override
    public SmartexamCheckListWorkValueRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, UUID value9, Boolean value10, UUID value11, UUID value12, Long value13, LocalDateTime value14, LocalDateTime value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamCheckListWorkValueRecord
     */
    public SmartexamCheckListWorkValueRecord() {
        super(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE);
    }

    /**
     * Create a detached, initialised SmartexamCheckListWorkValueRecord
     */
    public SmartexamCheckListWorkValueRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, UUID repairRequestWorkId, Boolean done, UUID planId, UUID photoId, Long actualSpend, LocalDateTime actualDateEnd, LocalDateTime actualDateStart) {
        super(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setRepairRequestWorkId(repairRequestWorkId);
        setDone(done);
        setPlanId(planId);
        setPhotoId(photoId);
        setActualSpend(actualSpend);
        setActualDateEnd(actualDateEnd);
        setActualDateStart(actualDateStart);
    }

    /**
     * Create a detached, initialised SmartexamCheckListWorkValueRecord
     */
    public SmartexamCheckListWorkValueRecord(nu.studer.sample.tables.pojos.SmartexamCheckListWorkValue value) {
        super(SmartexamCheckListWorkValue.SMARTEXAM_CHECK_LIST_WORK_VALUE);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setRepairRequestWorkId(value.getRepairRequestWorkId());
            setDone(value.getDone());
            setPlanId(value.getPlanId());
            setPhotoId(value.getPhotoId());
            setActualSpend(value.getActualSpend());
            setActualDateEnd(value.getActualDateEnd());
            setActualDateStart(value.getActualDateStart());
        }
    }
}
