/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamTransportFrom1cRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamTransportFrom1c extends TableImpl<SmartexamTransportFrom1cRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_transport_from1c</code>
     */
    public static final SmartexamTransportFrom1c SMARTEXAM_TRANSPORT_FROM1C = new SmartexamTransportFrom1c();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamTransportFrom1cRecord> getRecordType() {
        return SmartexamTransportFrom1cRecord.class;
    }

    /**
     * The column <code>public.smartexam_transport_from1c.id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.name</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.create_year</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Integer> CREATE_YEAR = createField(DSL.name("create_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.vin</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> VIN = createField(DSL.name("vin"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_from1c.organization_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_transport_from1c.costs_organization_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> COSTS_ORGANIZATION_ID = createField(DSL.name("costs_organization_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.lizing</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> LIZING = createField(DSL.name("lizing"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.date_gibdd_set</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, LocalDate> DATE_GIBDD_SET = createField(DSL.name("date_gibdd_set"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.status</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.license_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> LICENSE_ID = createField(DSL.name("license_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.reg_num</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> REG_NUM = createField(DSL.name("reg_num"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_from1c.transport_type_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.model</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_from1c.online_gibdd_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Integer> ONLINE_GIBDD_ID = createField(DSL.name("online_gibdd_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.received</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.width</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Double> WIDTH = createField(DSL.name("width"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.deleted_by</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_from1c.base_garbage_container_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, UUID> BASE_GARBAGE_CONTAINER_ID = createField(DSL.name("base_garbage_container_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.update_ts</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.gps_id</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> GPS_ID = createField(DSL.name("gps_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.version</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.create_ts</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.kafka_key</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.height</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Double> HEIGHT = createField(DSL.name("height"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c._long</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Double> _LONG = createField(DSL.name("_long"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.consumption</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, Double> CONSUMPTION = createField(DSL.name("consumption"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.updated_by</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.delete_ts</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.created_by</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_from1c.gps_system</code>.
     */
    public final TableField<SmartexamTransportFrom1cRecord, String> GPS_SYSTEM = createField(DSL.name("gps_system"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamTransportFrom1c(Name alias, Table<SmartexamTransportFrom1cRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamTransportFrom1c(Name alias, Table<SmartexamTransportFrom1cRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_transport_from1c</code> table
     * reference
     */
    public SmartexamTransportFrom1c(String alias) {
        this(DSL.name(alias), SMARTEXAM_TRANSPORT_FROM1C);
    }

    /**
     * Create an aliased <code>public.smartexam_transport_from1c</code> table
     * reference
     */
    public SmartexamTransportFrom1c(Name alias) {
        this(alias, SMARTEXAM_TRANSPORT_FROM1C);
    }

    /**
     * Create a <code>public.smartexam_transport_from1c</code> table reference
     */
    public SmartexamTransportFrom1c() {
        this(DSL.name("smartexam_transport_from1c"), null);
    }

    public <O extends Record> SmartexamTransportFrom1c(Table<O> child, ForeignKey<O, SmartexamTransportFrom1cRecord> key) {
        super(child, key, SMARTEXAM_TRANSPORT_FROM1C);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_TRANSPORT_FROM1C_ON_BASE_GARBAGE_CONTAINER, Indexes.IDX_SMARTEXAM_TRANSPORT_FROM1C_ON_COSTS_ORGANIZATION, Indexes.IDX_SMARTEXAM_TRANSPORT_FROM1C_ON_ORGANIZATION, Indexes.IDX_SMARTEXAM_TRANSPORT_FROM1C_ON_TRANSPORT_TYPE, Indexes.IDX_SMARTEXAM_TRANSPORT_FROM1C_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamTransportFrom1cRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_TRANSPORT_FROM1C_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamTransportFrom1cRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_ORGANIZATION, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_COSTS_ORGANIZATION, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_TRANSPORT_TYPE, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_BASE_GARBAGE_CONTAINER);
    }

    private transient SmartexamOrganization _fkSmartexamTransportFrom1cOnOrganization;
    private transient SmartexamOrganization _fkSmartexamTransportFrom1cOnCostsOrganization;
    private transient SmartexamTransportTypeFrom1c _smartexamTransportTypeFrom1c;
    private transient SmartexamaddonBaseGarbageContainer _smartexamaddonBaseGarbageContainer;

    public SmartexamOrganization fkSmartexamTransportFrom1cOnOrganization() {
        if (_fkSmartexamTransportFrom1cOnOrganization == null)
            _fkSmartexamTransportFrom1cOnOrganization = new SmartexamOrganization(this, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_ORGANIZATION);

        return _fkSmartexamTransportFrom1cOnOrganization;
    }

    public SmartexamOrganization fkSmartexamTransportFrom1cOnCostsOrganization() {
        if (_fkSmartexamTransportFrom1cOnCostsOrganization == null)
            _fkSmartexamTransportFrom1cOnCostsOrganization = new SmartexamOrganization(this, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_COSTS_ORGANIZATION);

        return _fkSmartexamTransportFrom1cOnCostsOrganization;
    }

    public SmartexamTransportTypeFrom1c smartexamTransportTypeFrom1c() {
        if (_smartexamTransportTypeFrom1c == null)
            _smartexamTransportTypeFrom1c = new SmartexamTransportTypeFrom1c(this, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_TRANSPORT_TYPE);

        return _smartexamTransportTypeFrom1c;
    }

    public SmartexamaddonBaseGarbageContainer smartexamaddonBaseGarbageContainer() {
        if (_smartexamaddonBaseGarbageContainer == null)
            _smartexamaddonBaseGarbageContainer = new SmartexamaddonBaseGarbageContainer(this, Keys.SMARTEXAM_TRANSPORT_FROM1C__FK_SMARTEXAM_TRANSPORT_FROM1C_ON_BASE_GARBAGE_CONTAINER);

        return _smartexamaddonBaseGarbageContainer;
    }

    @Override
    public SmartexamTransportFrom1c as(String alias) {
        return new SmartexamTransportFrom1c(DSL.name(alias), this);
    }

    @Override
    public SmartexamTransportFrom1c as(Name alias) {
        return new SmartexamTransportFrom1c(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportFrom1c rename(String name) {
        return new SmartexamTransportFrom1c(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportFrom1c rename(Name name) {
        return new SmartexamTransportFrom1c(name, null);
    }
}
