/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamDailyTransportStatusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamDailyTransportStatus extends TableImpl<SmartexamDailyTransportStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_daily_transport_status</code>
     */
    public static final SmartexamDailyTransportStatus SMARTEXAM_DAILY_TRANSPORT_STATUS = new SmartexamDailyTransportStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamDailyTransportStatusRecord> getRecordType() {
        return SmartexamDailyTransportStatusRecord.class;
    }

    /**
     * The column <code>public.smartexam_daily_transport_status.id</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_daily_transport_status.version</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.create_ts</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.created_by</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.update_ts</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.updated_by</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.delete_ts</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.deleted_by</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_daily_transport_status.status</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.start_date</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexam_daily_transport_status.end_date</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.description</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.smartexam_daily_transport_status.transport_id</code>.
     */
    public final TableField<SmartexamDailyTransportStatusRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    private SmartexamDailyTransportStatus(Name alias, Table<SmartexamDailyTransportStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamDailyTransportStatus(Name alias, Table<SmartexamDailyTransportStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_daily_transport_status</code>
     * table reference
     */
    public SmartexamDailyTransportStatus(String alias) {
        this(DSL.name(alias), SMARTEXAM_DAILY_TRANSPORT_STATUS);
    }

    /**
     * Create an aliased <code>public.smartexam_daily_transport_status</code>
     * table reference
     */
    public SmartexamDailyTransportStatus(Name alias) {
        this(alias, SMARTEXAM_DAILY_TRANSPORT_STATUS);
    }

    /**
     * Create a <code>public.smartexam_daily_transport_status</code> table
     * reference
     */
    public SmartexamDailyTransportStatus() {
        this(DSL.name("smartexam_daily_transport_status"), null);
    }

    public <O extends Record> SmartexamDailyTransportStatus(Table<O> child, ForeignKey<O, SmartexamDailyTransportStatusRecord> key) {
        super(child, key, SMARTEXAM_DAILY_TRANSPORT_STATUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_DAILY_TRANSPORT_STATUS_ON_TRANSPORT);
    }

    @Override
    public UniqueKey<SmartexamDailyTransportStatusRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_DAILY_TRANSPORT_STATUS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamDailyTransportStatusRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_DAILY_TRANSPORT_STATUS__FK_SMARTEXAM_DAILY_TRANSPORT_STATUS_ON_TRANSPORT);
    }

    private transient SmartmonTransport _smartmonTransport;

    public SmartmonTransport smartmonTransport() {
        if (_smartmonTransport == null)
            _smartmonTransport = new SmartmonTransport(this, Keys.SMARTEXAM_DAILY_TRANSPORT_STATUS__FK_SMARTEXAM_DAILY_TRANSPORT_STATUS_ON_TRANSPORT);

        return _smartmonTransport;
    }

    @Override
    public SmartexamDailyTransportStatus as(String alias) {
        return new SmartexamDailyTransportStatus(DSL.name(alias), this);
    }

    @Override
    public SmartexamDailyTransportStatus as(Name alias) {
        return new SmartexamDailyTransportStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamDailyTransportStatus rename(String name) {
        return new SmartexamDailyTransportStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamDailyTransportStatus rename(Name name) {
        return new SmartexamDailyTransportStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, LocalDate, LocalDate, String, UUID> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
