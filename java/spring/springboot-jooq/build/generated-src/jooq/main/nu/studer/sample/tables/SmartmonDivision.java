/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonDivisionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonDivision extends TableImpl<SmartmonDivisionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_division</code>
     */
    public static final SmartmonDivision SMARTMON_DIVISION = new SmartmonDivision();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonDivisionRecord> getRecordType() {
        return SmartmonDivisionRecord.class;
    }

    /**
     * The column <code>public.smartmon_division.id</code>.
     */
    public final TableField<SmartmonDivisionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_division.version</code>.
     */
    public final TableField<SmartmonDivisionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_division.create_ts</code>.
     */
    public final TableField<SmartmonDivisionRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_division.created_by</code>.
     */
    public final TableField<SmartmonDivisionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_division.update_ts</code>.
     */
    public final TableField<SmartmonDivisionRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_division.updated_by</code>.
     */
    public final TableField<SmartmonDivisionRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_division.delete_ts</code>.
     */
    public final TableField<SmartmonDivisionRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_division.deleted_by</code>.
     */
    public final TableField<SmartmonDivisionRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_division.name</code>.
     */
    public final TableField<SmartmonDivisionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_division.google_sheets_url</code>.
     */
    public final TableField<SmartmonDivisionRecord, String> GOOGLE_SHEETS_URL = createField(DSL.name("google_sheets_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartmon_division.kpi_instance_id</code>.
     */
    public final TableField<SmartmonDivisionRecord, UUID> KPI_INSTANCE_ID = createField(DSL.name("kpi_instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_division.transfer_time</code>.
     */
    public final TableField<SmartmonDivisionRecord, LocalTime> TRANSFER_TIME = createField(DSL.name("transfer_time"), SQLDataType.LOCALTIME(6), this, "");

    private SmartmonDivision(Name alias, Table<SmartmonDivisionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonDivision(Name alias, Table<SmartmonDivisionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_division</code> table reference
     */
    public SmartmonDivision(String alias) {
        this(DSL.name(alias), SMARTMON_DIVISION);
    }

    /**
     * Create an aliased <code>public.smartmon_division</code> table reference
     */
    public SmartmonDivision(Name alias) {
        this(alias, SMARTMON_DIVISION);
    }

    /**
     * Create a <code>public.smartmon_division</code> table reference
     */
    public SmartmonDivision() {
        this(DSL.name("smartmon_division"), null);
    }

    public <O extends Record> SmartmonDivision(Table<O> child, ForeignKey<O, SmartmonDivisionRecord> key) {
        super(child, key, SMARTMON_DIVISION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_DIVISION_ON_KPI_INSTANCE);
    }

    @Override
    public UniqueKey<SmartmonDivisionRecord> getPrimaryKey() {
        return Keys.SMARTMON_DIVISION_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonDivisionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_DIVISION__FK_SMARTMON_DIVISION_ON_KPI_INSTANCE);
    }

    private transient SmartexamKpiInstance _smartexamKpiInstance;

    public SmartexamKpiInstance smartexamKpiInstance() {
        if (_smartexamKpiInstance == null)
            _smartexamKpiInstance = new SmartexamKpiInstance(this, Keys.SMARTMON_DIVISION__FK_SMARTMON_DIVISION_ON_KPI_INSTANCE);

        return _smartexamKpiInstance;
    }

    @Override
    public SmartmonDivision as(String alias) {
        return new SmartmonDivision(DSL.name(alias), this);
    }

    @Override
    public SmartmonDivision as(Name alias) {
        return new SmartmonDivision(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonDivision rename(String name) {
        return new SmartmonDivision(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonDivision rename(Name name) {
        return new SmartmonDivision(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String, UUID, LocalTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
