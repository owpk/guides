/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecSearchFolderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecSearchFolder extends TableImpl<SecSearchFolderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_search_folder</code>
     */
    public static final SecSearchFolder SEC_SEARCH_FOLDER = new SecSearchFolder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecSearchFolderRecord> getRecordType() {
        return SecSearchFolderRecord.class;
    }

    /**
     * The column <code>public.sec_search_folder.folder_id</code>.
     */
    public final TableField<SecSearchFolderRecord, UUID> FOLDER_ID = createField(DSL.name("folder_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_search_folder.filter_component</code>.
     */
    public final TableField<SecSearchFolderRecord, String> FILTER_COMPONENT = createField(DSL.name("filter_component"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.sec_search_folder.filter_xml</code>.
     */
    public final TableField<SecSearchFolderRecord, String> FILTER_XML = createField(DSL.name("filter_xml"), SQLDataType.VARCHAR(7000), this, "");

    /**
     * The column <code>public.sec_search_folder.user_id</code>.
     */
    public final TableField<SecSearchFolderRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_search_folder.presentation_id</code>.
     */
    public final TableField<SecSearchFolderRecord, UUID> PRESENTATION_ID = createField(DSL.name("presentation_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_search_folder.apply_default</code>.
     */
    public final TableField<SecSearchFolderRecord, Boolean> APPLY_DEFAULT = createField(DSL.name("apply_default"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.sec_search_folder.is_set</code>.
     */
    public final TableField<SecSearchFolderRecord, Boolean> IS_SET = createField(DSL.name("is_set"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.sec_search_folder.entity_type</code>.
     */
    public final TableField<SecSearchFolderRecord, String> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.VARCHAR(50), this, "");

    private SecSearchFolder(Name alias, Table<SecSearchFolderRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecSearchFolder(Name alias, Table<SecSearchFolderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_search_folder</code> table reference
     */
    public SecSearchFolder(String alias) {
        this(DSL.name(alias), SEC_SEARCH_FOLDER);
    }

    /**
     * Create an aliased <code>public.sec_search_folder</code> table reference
     */
    public SecSearchFolder(Name alias) {
        this(alias, SEC_SEARCH_FOLDER);
    }

    /**
     * Create a <code>public.sec_search_folder</code> table reference
     */
    public SecSearchFolder() {
        this(DSL.name("sec_search_folder"), null);
    }

    public <O extends Record> SecSearchFolder(Table<O> child, ForeignKey<O, SecSearchFolderRecord> key) {
        super(child, key, SEC_SEARCH_FOLDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_SEARCH_FOLDER_USER);
    }

    @Override
    public UniqueKey<SecSearchFolderRecord> getPrimaryKey() {
        return Keys.SEC_SEARCH_FOLDER_PKEY;
    }

    @Override
    public List<ForeignKey<SecSearchFolderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_FOLDER, Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_USER, Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_PRESENTATION);
    }

    private transient SysFolder _sysFolder;
    private transient SecUser _secUser;
    private transient SecPresentation _secPresentation;

    public SysFolder sysFolder() {
        if (_sysFolder == null)
            _sysFolder = new SysFolder(this, Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_FOLDER);

        return _sysFolder;
    }

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_USER);

        return _secUser;
    }

    public SecPresentation secPresentation() {
        if (_secPresentation == null)
            _secPresentation = new SecPresentation(this, Keys.SEC_SEARCH_FOLDER__FK_SEC_SEARCH_FOLDER_PRESENTATION);

        return _secPresentation;
    }

    @Override
    public SecSearchFolder as(String alias) {
        return new SecSearchFolder(DSL.name(alias), this);
    }

    @Override
    public SecSearchFolder as(Name alias) {
        return new SecSearchFolder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecSearchFolder rename(String name) {
        return new SecSearchFolder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecSearchFolder rename(Name name) {
        return new SecSearchFolder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, UUID, UUID, Boolean, Boolean, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
