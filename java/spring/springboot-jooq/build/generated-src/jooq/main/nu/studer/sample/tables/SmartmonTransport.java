/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartmonTransportRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartmonTransport extends TableImpl<SmartmonTransportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartmon_transport</code>
     */
    public static final SmartmonTransport SMARTMON_TRANSPORT = new SmartmonTransport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartmonTransportRecord> getRecordType() {
        return SmartmonTransportRecord.class;
    }

    /**
     * The column <code>public.smartmon_transport.id</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartmon_transport.create_ts</code>.
     */
    public final TableField<SmartmonTransportRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport.created_by</code>.
     */
    public final TableField<SmartmonTransportRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport.name</code>.
     */
    public final TableField<SmartmonTransportRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_transport.division_id</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_transport.reg_num</code>.
     */
    public final TableField<SmartmonTransportRecord, String> REG_NUM = createField(DSL.name("reg_num"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_transport.transport_type_id</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_transport.createdate</code>.
     */
    public final TableField<SmartmonTransportRecord, Integer> CREATEDATE = createField(DSL.name("createdate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartmon_transport.transport_from1c_id</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> TRANSPORT_FROM1C_ID = createField(DSL.name("transport_from1c_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_transport.photo_id</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_transport.ext_uuid</code>.
     */
    public final TableField<SmartmonTransportRecord, UUID> EXT_UUID = createField(DSL.name("ext_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartmon_transport.mileage</code>.
     */
    public final TableField<SmartmonTransportRecord, Long> MILEAGE = createField(DSL.name("mileage"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.smartmon_transport.milleage_from_last_to</code>.
     */
    public final TableField<SmartmonTransportRecord, Long> MILLEAGE_FROM_LAST_TO = createField(DSL.name("milleage_from_last_to"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.smartmon_transport.next_to_date</code>.
     */
    public final TableField<SmartmonTransportRecord, LocalDate> NEXT_TO_DATE = createField(DSL.name("next_to_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartmon_transport.status</code>.
     */
    public final TableField<SmartmonTransportRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartmon_transport.deleted_by</code>.
     */
    public final TableField<SmartmonTransportRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport.update_ts</code>.
     */
    public final TableField<SmartmonTransportRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport.delete_ts</code>.
     */
    public final TableField<SmartmonTransportRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartmon_transport.updated_by</code>.
     */
    public final TableField<SmartmonTransportRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartmon_transport.version</code>.
     */
    public final TableField<SmartmonTransportRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    private SmartmonTransport(Name alias, Table<SmartmonTransportRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartmonTransport(Name alias, Table<SmartmonTransportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartmon_transport</code> table reference
     */
    public SmartmonTransport(String alias) {
        this(DSL.name(alias), SMARTMON_TRANSPORT);
    }

    /**
     * Create an aliased <code>public.smartmon_transport</code> table reference
     */
    public SmartmonTransport(Name alias) {
        this(alias, SMARTMON_TRANSPORT);
    }

    /**
     * Create a <code>public.smartmon_transport</code> table reference
     */
    public SmartmonTransport() {
        this(DSL.name("smartmon_transport"), null);
    }

    public <O extends Record> SmartmonTransport(Table<O> child, ForeignKey<O, SmartmonTransportRecord> key) {
        super(child, key, SMARTMON_TRANSPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTMON_TRANSPORT_ON_DIVISION, Indexes.IDX_SMARTMON_TRANSPORT_ON_PHOTO, Indexes.IDX_SMARTMON_TRANSPORT_ON_TRANSPORT_FROM1C, Indexes.IDX_SMARTMON_TRANSPORT_ON_TRANSPORT_TYPE, Indexes.IDX_SMARTMON_TRANSPORT_UK_REG_NUM);
    }

    @Override
    public UniqueKey<SmartmonTransportRecord> getPrimaryKey() {
        return Keys.SMARTMON_TRANSPORT_PKEY;
    }

    @Override
    public List<ForeignKey<SmartmonTransportRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_DIVISION, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_TYPE, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_FROM1C, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_PHOTO);
    }

    private transient SmartmonDivision _smartmonDivision;
    private transient SmartmonTransportType _smartmonTransportType;
    private transient SmartexamTransportFrom1c _smartexamTransportFrom1c;
    private transient SysFile _sysFile;

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_DIVISION);

        return _smartmonDivision;
    }

    public SmartmonTransportType smartmonTransportType() {
        if (_smartmonTransportType == null)
            _smartmonTransportType = new SmartmonTransportType(this, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_TYPE);

        return _smartmonTransportType;
    }

    public SmartexamTransportFrom1c smartexamTransportFrom1c() {
        if (_smartexamTransportFrom1c == null)
            _smartexamTransportFrom1c = new SmartexamTransportFrom1c(this, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_TRANSPORT_FROM1C);

        return _smartexamTransportFrom1c;
    }

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTMON_TRANSPORT__FK_SMARTMON_TRANSPORT_ON_PHOTO);

        return _sysFile;
    }

    @Override
    public SmartmonTransport as(String alias) {
        return new SmartmonTransport(DSL.name(alias), this);
    }

    @Override
    public SmartmonTransport as(Name alias) {
        return new SmartmonTransport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonTransport rename(String name) {
        return new SmartmonTransport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartmonTransport rename(Name name) {
        return new SmartmonTransport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, LocalDateTime, String, String, UUID, String, UUID, Integer, UUID, UUID, UUID, Long, Long, LocalDate, String, String, LocalDateTime, LocalDateTime, String, Integer> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
