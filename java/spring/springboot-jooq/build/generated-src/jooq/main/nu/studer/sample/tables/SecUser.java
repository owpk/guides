/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecUser extends TableImpl<SecUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_user</code>
     */
    public static final SecUser SEC_USER = new SecUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecUserRecord> getRecordType() {
        return SecUserRecord.class;
    }

    /**
     * The column <code>public.sec_user.id</code>.
     */
    public final TableField<SecUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_user.create_ts</code>.
     */
    public final TableField<SecUserRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user.created_by</code>.
     */
    public final TableField<SecUserRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user.version</code>.
     */
    public final TableField<SecUserRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_user.update_ts</code>.
     */
    public final TableField<SecUserRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user.updated_by</code>.
     */
    public final TableField<SecUserRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user.delete_ts</code>.
     */
    public final TableField<SecUserRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user.deleted_by</code>.
     */
    public final TableField<SecUserRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user.sys_tenant_id</code>.
     */
    public final TableField<SecUserRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.login</code>.
     */
    public final TableField<SecUserRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sec_user.login_lc</code>.
     */
    public final TableField<SecUserRecord, String> LOGIN_LC = createField(DSL.name("login_lc"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sec_user.password</code>.
     */
    public final TableField<SecUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.password_encryption</code>.
     */
    public final TableField<SecUserRecord, String> PASSWORD_ENCRYPTION = createField(DSL.name("password_encryption"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user.name</code>.
     */
    public final TableField<SecUserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.first_name</code>.
     */
    public final TableField<SecUserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.last_name</code>.
     */
    public final TableField<SecUserRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.middle_name</code>.
     */
    public final TableField<SecUserRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.position_</code>.
     */
    public final TableField<SecUserRecord, String> POSITION_ = createField(DSL.name("position_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.email</code>.
     */
    public final TableField<SecUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.sec_user.language_</code>.
     */
    public final TableField<SecUserRecord, String> LANGUAGE_ = createField(DSL.name("language_"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.sec_user.time_zone</code>.
     */
    public final TableField<SecUserRecord, String> TIME_ZONE = createField(DSL.name("time_zone"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user.time_zone_auto</code>.
     */
    public final TableField<SecUserRecord, Boolean> TIME_ZONE_AUTO = createField(DSL.name("time_zone_auto"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.sec_user.active</code>.
     */
    public final TableField<SecUserRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.sec_user.group_id</code>.
     */
    public final TableField<SecUserRecord, UUID> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_user.group_names</code>.
     */
    public final TableField<SecUserRecord, String> GROUP_NAMES = createField(DSL.name("group_names"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user.ip_mask</code>.
     */
    public final TableField<SecUserRecord, String> IP_MASK = createField(DSL.name("ip_mask"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.sec_user.change_password_at_logon</code>.
     */
    public final TableField<SecUserRecord, Boolean> CHANGE_PASSWORD_AT_LOGON = createField(DSL.name("change_password_at_logon"), SQLDataType.BOOLEAN, this, "");

    private SecUser(Name alias, Table<SecUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecUser(Name alias, Table<SecUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_user</code> table reference
     */
    public SecUser(String alias) {
        this(DSL.name(alias), SEC_USER);
    }

    /**
     * Create an aliased <code>public.sec_user</code> table reference
     */
    public SecUser(Name alias) {
        this(alias, SEC_USER);
    }

    /**
     * Create a <code>public.sec_user</code> table reference
     */
    public SecUser() {
        this(DSL.name("sec_user"), null);
    }

    public <O extends Record> SecUser(Table<O> child, ForeignKey<O, SecUserRecord> key) {
        super(child, key, SEC_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_USER_UNIQ_LOGIN, Indexes.IDX_SEC_USER_UNIQ_LOGIN_SYS_TENANT_ID_NN);
    }

    @Override
    public UniqueKey<SecUserRecord> getPrimaryKey() {
        return Keys.SEC_USER_PKEY;
    }

    @Override
    public List<ForeignKey<SecUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_USER__SEC_USER_GROUP);
    }

    private transient SecGroup _secGroup;

    public SecGroup secGroup() {
        if (_secGroup == null)
            _secGroup = new SecGroup(this, Keys.SEC_USER__SEC_USER_GROUP);

        return _secGroup;
    }

    @Override
    public SecUser as(String alias) {
        return new SecUser(DSL.name(alias), this);
    }

    @Override
    public SecUser as(Name alias) {
        return new SecUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUser rename(String name) {
        return new SecUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUser rename(Name name) {
        return new SecUser(name, null);
    }
}
