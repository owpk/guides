/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckListWorksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListWorks extends TableImpl<SmartexamCheckListWorksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_check_list_works</code>
     */
    public static final SmartexamCheckListWorks SMARTEXAM_CHECK_LIST_WORKS = new SmartexamCheckListWorks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckListWorksRecord> getRecordType() {
        return SmartexamCheckListWorksRecord.class;
    }

    /**
     * The column <code>public.smartexam_check_list_works.id</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.version</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.create_ts</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.created_by</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.update_ts</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.updated_by</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.delete_ts</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.deleted_by</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_check_list_works.name</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_works.transport_type_id</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_check_list_works.norm</code>.
     */
    public final TableField<SmartexamCheckListWorksRecord, Double> NORM = createField(DSL.name("norm"), SQLDataType.DOUBLE, this, "");

    private SmartexamCheckListWorks(Name alias, Table<SmartexamCheckListWorksRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckListWorks(Name alias, Table<SmartexamCheckListWorksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_works</code> table
     * reference
     */
    public SmartexamCheckListWorks(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_LIST_WORKS);
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_works</code> table
     * reference
     */
    public SmartexamCheckListWorks(Name alias) {
        this(alias, SMARTEXAM_CHECK_LIST_WORKS);
    }

    /**
     * Create a <code>public.smartexam_check_list_works</code> table reference
     */
    public SmartexamCheckListWorks() {
        this(DSL.name("smartexam_check_list_works"), null);
    }

    public <O extends Record> SmartexamCheckListWorks(Table<O> child, ForeignKey<O, SmartexamCheckListWorksRecord> key) {
        super(child, key, SMARTEXAM_CHECK_LIST_WORKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_CHECK_LIST_WORKS_ON_TRANSPORT_TYPE);
    }

    @Override
    public UniqueKey<SmartexamCheckListWorksRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_LIST_WORKS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckListWorksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_LIST_WORKS__FK_SMARTEXAM_CHECK_LIST_WORKS_ON_TRANSPORT_TYPE);
    }

    private transient SmartexamTransportTypeFrom1c _smartexamTransportTypeFrom1c;

    public SmartexamTransportTypeFrom1c smartexamTransportTypeFrom1c() {
        if (_smartexamTransportTypeFrom1c == null)
            _smartexamTransportTypeFrom1c = new SmartexamTransportTypeFrom1c(this, Keys.SMARTEXAM_CHECK_LIST_WORKS__FK_SMARTEXAM_CHECK_LIST_WORKS_ON_TRANSPORT_TYPE);

        return _smartexamTransportTypeFrom1c;
    }

    @Override
    public SmartexamCheckListWorks as(String alias) {
        return new SmartexamCheckListWorks(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckListWorks as(Name alias) {
        return new SmartexamCheckListWorks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListWorks rename(String name) {
        return new SmartexamCheckListWorks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListWorks rename(Name name) {
        return new SmartexamCheckListWorks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, UUID, Double> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
