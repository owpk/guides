/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckListDivisionLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListDivisionLink extends TableImpl<SmartexamCheckListDivisionLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_check_list_division_link</code>
     */
    public static final SmartexamCheckListDivisionLink SMARTEXAM_CHECK_LIST_DIVISION_LINK = new SmartexamCheckListDivisionLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckListDivisionLinkRecord> getRecordType() {
        return SmartexamCheckListDivisionLinkRecord.class;
    }

    /**
     * The column
     * <code>public.smartexam_check_list_division_link.check_list_id</code>.
     */
    public final TableField<SmartexamCheckListDivisionLinkRecord, UUID> CHECK_LIST_ID = createField(DSL.name("check_list_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_division_link.division_id</code>.
     */
    public final TableField<SmartexamCheckListDivisionLinkRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamCheckListDivisionLink(Name alias, Table<SmartexamCheckListDivisionLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckListDivisionLink(Name alias, Table<SmartexamCheckListDivisionLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_division_link</code>
     * table reference
     */
    public SmartexamCheckListDivisionLink(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_LIST_DIVISION_LINK);
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_division_link</code>
     * table reference
     */
    public SmartexamCheckListDivisionLink(Name alias) {
        this(alias, SMARTEXAM_CHECK_LIST_DIVISION_LINK);
    }

    /**
     * Create a <code>public.smartexam_check_list_division_link</code> table
     * reference
     */
    public SmartexamCheckListDivisionLink() {
        this(DSL.name("smartexam_check_list_division_link"), null);
    }

    public <O extends Record> SmartexamCheckListDivisionLink(Table<O> child, ForeignKey<O, SmartexamCheckListDivisionLinkRecord> key) {
        super(child, key, SMARTEXAM_CHECK_LIST_DIVISION_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamCheckListDivisionLinkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_LIST_DIVISION_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckListDivisionLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_CHECK_LIST, Keys.SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_DIVISION);
    }

    private transient SmartmonCheckList _smartmonCheckList;
    private transient SmartmonDivision _smartmonDivision;

    public SmartmonCheckList smartmonCheckList() {
        if (_smartmonCheckList == null)
            _smartmonCheckList = new SmartmonCheckList(this, Keys.SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_CHECK_LIST);

        return _smartmonCheckList;
    }

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_CHECK_LIST_DIVISION_LINK__FK_CHELISDIV_ON_DIVISION);

        return _smartmonDivision;
    }

    @Override
    public SmartexamCheckListDivisionLink as(String alias) {
        return new SmartexamCheckListDivisionLink(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckListDivisionLink as(Name alias) {
        return new SmartexamCheckListDivisionLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListDivisionLink rename(String name) {
        return new SmartexamCheckListDivisionLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListDivisionLink rename(Name name) {
        return new SmartexamCheckListDivisionLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
