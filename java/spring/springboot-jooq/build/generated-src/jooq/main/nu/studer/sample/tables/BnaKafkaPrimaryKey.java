/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.BnaKafkaPrimaryKeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BnaKafkaPrimaryKey extends TableImpl<BnaKafkaPrimaryKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bna_kafka_primary_key</code>
     */
    public static final BnaKafkaPrimaryKey BNA_KAFKA_PRIMARY_KEY = new BnaKafkaPrimaryKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BnaKafkaPrimaryKeyRecord> getRecordType() {
        return BnaKafkaPrimaryKeyRecord.class;
    }

    /**
     * The column <code>public.bna_kafka_primary_key.id</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.version</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.create_ts</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.created_by</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.update_ts</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.updated_by</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.delete_ts</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.deleted_by</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.entity_name</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.bna_kafka_primary_key.query</code>.
     */
    public final TableField<BnaKafkaPrimaryKeyRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB.nullable(false), this, "");

    private BnaKafkaPrimaryKey(Name alias, Table<BnaKafkaPrimaryKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private BnaKafkaPrimaryKey(Name alias, Table<BnaKafkaPrimaryKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bna_kafka_primary_key</code> table
     * reference
     */
    public BnaKafkaPrimaryKey(String alias) {
        this(DSL.name(alias), BNA_KAFKA_PRIMARY_KEY);
    }

    /**
     * Create an aliased <code>public.bna_kafka_primary_key</code> table
     * reference
     */
    public BnaKafkaPrimaryKey(Name alias) {
        this(alias, BNA_KAFKA_PRIMARY_KEY);
    }

    /**
     * Create a <code>public.bna_kafka_primary_key</code> table reference
     */
    public BnaKafkaPrimaryKey() {
        this(DSL.name("bna_kafka_primary_key"), null);
    }

    public <O extends Record> BnaKafkaPrimaryKey(Table<O> child, ForeignKey<O, BnaKafkaPrimaryKeyRecord> key) {
        super(child, key, BNA_KAFKA_PRIMARY_KEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BnaKafkaPrimaryKeyRecord> getPrimaryKey() {
        return Keys.BNA_KAFKA_PRIMARY_KEY_PKEY;
    }

    @Override
    public BnaKafkaPrimaryKey as(String alias) {
        return new BnaKafkaPrimaryKey(DSL.name(alias), this);
    }

    @Override
    public BnaKafkaPrimaryKey as(Name alias) {
        return new BnaKafkaPrimaryKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BnaKafkaPrimaryKey rename(String name) {
        return new BnaKafkaPrimaryKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BnaKafkaPrimaryKey rename(Name name) {
        return new BnaKafkaPrimaryKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
