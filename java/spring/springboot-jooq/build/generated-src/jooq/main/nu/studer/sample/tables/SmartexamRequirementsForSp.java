/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamRequirementsForSpRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRequirementsForSp extends TableImpl<SmartexamRequirementsForSpRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_requirements_for_sp</code>
     */
    public static final SmartexamRequirementsForSp SMARTEXAM_REQUIREMENTS_FOR_SP = new SmartexamRequirementsForSp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamRequirementsForSpRecord> getRecordType() {
        return SmartexamRequirementsForSpRecord.class;
    }

    /**
     * The column <code>public.smartexam_requirements_for_sp.id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.version</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.create_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.created_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.update_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.updated_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.delete_ts</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.deleted_by</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.quantity</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, Double> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp.organization_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.division_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.urgency</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> URGENCY = createField(DSL.name("urgency"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.photo_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.price</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.sum_</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, Double> SUM_ = createField(DSL.name("sum_"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.description</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.number_</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> NUMBER_ = createField(DSL.name("number_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_requirements_for_sp.status</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp.nomenclature_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> NOMENCLATURE_ID = createField(DSL.name("nomenclature_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_requirements_for_sp.repair_request_id</code>.
     */
    public final TableField<SmartexamRequirementsForSpRecord, UUID> REPAIR_REQUEST_ID = createField(DSL.name("repair_request_id"), SQLDataType.UUID, this, "");

    private SmartexamRequirementsForSp(Name alias, Table<SmartexamRequirementsForSpRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamRequirementsForSp(Name alias, Table<SmartexamRequirementsForSpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_requirements_for_sp</code> table
     * reference
     */
    public SmartexamRequirementsForSp(String alias) {
        this(DSL.name(alias), SMARTEXAM_REQUIREMENTS_FOR_SP);
    }

    /**
     * Create an aliased <code>public.smartexam_requirements_for_sp</code> table
     * reference
     */
    public SmartexamRequirementsForSp(Name alias) {
        this(alias, SMARTEXAM_REQUIREMENTS_FOR_SP);
    }

    /**
     * Create a <code>public.smartexam_requirements_for_sp</code> table
     * reference
     */
    public SmartexamRequirementsForSp() {
        this(DSL.name("smartexam_requirements_for_sp"), null);
    }

    public <O extends Record> SmartexamRequirementsForSp(Table<O> child, ForeignKey<O, SmartexamRequirementsForSpRecord> key) {
        super(child, key, SMARTEXAM_REQUIREMENTS_FOR_SP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_DIVISION, Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_NOMENCLATURE, Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_ORGANIZATION, Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_PHOTO, Indexes.IDX_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_REPAIR_REQUEST);
    }

    @Override
    public UniqueKey<SmartexamRequirementsForSpRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_REQUIREMENTS_FOR_SP_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamRequirementsForSpRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_ORGANIZATION, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_DIVISION, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_PHOTO, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_NOMENCLATURE, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_REPAIR_REQUEST);
    }

    private transient SmartexamOrganization _smartexamOrganization;
    private transient SmartmonDivision _smartmonDivision;
    private transient SysFile _sysFile;
    private transient SmartexamNomenclature _smartexamNomenclature;
    private transient SmartexamRepairRequest _smartexamRepairRequest;

    public SmartexamOrganization smartexamOrganization() {
        if (_smartexamOrganization == null)
            _smartexamOrganization = new SmartexamOrganization(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_ORGANIZATION);

        return _smartexamOrganization;
    }

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_DIVISION);

        return _smartmonDivision;
    }

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_PHOTO);

        return _sysFile;
    }

    public SmartexamNomenclature smartexamNomenclature() {
        if (_smartexamNomenclature == null)
            _smartexamNomenclature = new SmartexamNomenclature(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_NOMENCLATURE);

        return _smartexamNomenclature;
    }

    public SmartexamRepairRequest smartexamRepairRequest() {
        if (_smartexamRepairRequest == null)
            _smartexamRepairRequest = new SmartexamRepairRequest(this, Keys.SMARTEXAM_REQUIREMENTS_FOR_SP__FK_SMARTEXAM_REQUIREMENTS_FOR_SP_ON_REPAIR_REQUEST);

        return _smartexamRepairRequest;
    }

    @Override
    public SmartexamRequirementsForSp as(String alias) {
        return new SmartexamRequirementsForSp(DSL.name(alias), this);
    }

    @Override
    public SmartexamRequirementsForSp as(Name alias) {
        return new SmartexamRequirementsForSp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRequirementsForSp rename(String name) {
        return new SmartexamRequirementsForSp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRequirementsForSp rename(Name name) {
        return new SmartexamRequirementsForSp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Double, UUID, UUID, String, UUID, Double, Double, String, String, String, UUID, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
