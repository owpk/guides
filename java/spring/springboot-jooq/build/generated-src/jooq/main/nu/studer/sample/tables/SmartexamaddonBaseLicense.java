/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamaddonBaseLicenseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseLicense extends TableImpl<SmartexamaddonBaseLicenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexamaddon_base_license</code>
     */
    public static final SmartexamaddonBaseLicense SMARTEXAMADDON_BASE_LICENSE = new SmartexamaddonBaseLicense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamaddonBaseLicenseRecord> getRecordType() {
        return SmartexamaddonBaseLicenseRecord.class;
    }

    /**
     * The column <code>public.smartexamaddon_base_license.id</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.version</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.create_ts</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.created_by</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.update_ts</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.updated_by</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.delete_ts</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.deleted_by</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.received</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.kafka_key</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.license_cart</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> LICENSE_CART = createField(DSL.name("license_cart"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.serial</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> SERIAL = createField(DSL.name("serial"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.number_</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, String> NUMBER_ = createField(DSL.name("number_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexamaddon_base_license.transport_id</code>.
     */
    public final TableField<SmartexamaddonBaseLicenseRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    private SmartexamaddonBaseLicense(Name alias, Table<SmartexamaddonBaseLicenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamaddonBaseLicense(Name alias, Table<SmartexamaddonBaseLicenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexamaddon_base_license</code> table
     * reference
     */
    public SmartexamaddonBaseLicense(String alias) {
        this(DSL.name(alias), SMARTEXAMADDON_BASE_LICENSE);
    }

    /**
     * Create an aliased <code>public.smartexamaddon_base_license</code> table
     * reference
     */
    public SmartexamaddonBaseLicense(Name alias) {
        this(alias, SMARTEXAMADDON_BASE_LICENSE);
    }

    /**
     * Create a <code>public.smartexamaddon_base_license</code> table reference
     */
    public SmartexamaddonBaseLicense() {
        this(DSL.name("smartexamaddon_base_license"), null);
    }

    public <O extends Record> SmartexamaddonBaseLicense(Table<O> child, ForeignKey<O, SmartexamaddonBaseLicenseRecord> key) {
        super(child, key, SMARTEXAMADDON_BASE_LICENSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAMADDON_BASE_LICENSE_ON_TRANSPORT, Indexes.IDX_SMARTEXAMADDON_BASE_LICENSE_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamaddonBaseLicenseRecord> getPrimaryKey() {
        return Keys.SMARTEXAMADDON_BASE_LICENSE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamaddonBaseLicenseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAMADDON_BASE_LICENSE__FK_SMARTEXAMADDON_BASE_LICENSE_ON_TRANSPORT);
    }

    private transient SmartexamaddonBaseTransport _smartexamaddonBaseTransport;

    public SmartexamaddonBaseTransport smartexamaddonBaseTransport() {
        if (_smartexamaddonBaseTransport == null)
            _smartexamaddonBaseTransport = new SmartexamaddonBaseTransport(this, Keys.SMARTEXAMADDON_BASE_LICENSE__FK_SMARTEXAMADDON_BASE_LICENSE_ON_TRANSPORT);

        return _smartexamaddonBaseTransport;
    }

    @Override
    public SmartexamaddonBaseLicense as(String alias) {
        return new SmartexamaddonBaseLicense(DSL.name(alias), this);
    }

    @Override
    public SmartexamaddonBaseLicense as(Name alias) {
        return new SmartexamaddonBaseLicense(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseLicense rename(String name) {
        return new SmartexamaddonBaseLicense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamaddonBaseLicense rename(Name name) {
        return new SmartexamaddonBaseLicense(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, UUID> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
