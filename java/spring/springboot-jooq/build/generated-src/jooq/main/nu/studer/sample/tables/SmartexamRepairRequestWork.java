/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamRepairRequestWorkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRepairRequestWork extends TableImpl<SmartexamRepairRequestWorkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_repair_request_work</code>
     */
    public static final SmartexamRepairRequestWork SMARTEXAM_REPAIR_REQUEST_WORK = new SmartexamRepairRequestWork();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamRepairRequestWorkRecord> getRecordType() {
        return SmartexamRepairRequestWorkRecord.class;
    }

    /**
     * The column <code>public.smartexam_repair_request_work.id</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.version</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.create_ts</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.created_by</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.update_ts</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.updated_by</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.delete_ts</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.deleted_by</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.name</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.ext_uuid</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, UUID> EXT_UUID = createField(DSL.name("ext_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_repair_request_work.parent_id</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_repair_request_work.linked_works</code>.
     */
    public final TableField<SmartexamRepairRequestWorkRecord, String> LINKED_WORKS = createField(DSL.name("linked_works"), SQLDataType.CLOB, this, "");

    private SmartexamRepairRequestWork(Name alias, Table<SmartexamRepairRequestWorkRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamRepairRequestWork(Name alias, Table<SmartexamRepairRequestWorkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_repair_request_work</code> table
     * reference
     */
    public SmartexamRepairRequestWork(String alias) {
        this(DSL.name(alias), SMARTEXAM_REPAIR_REQUEST_WORK);
    }

    /**
     * Create an aliased <code>public.smartexam_repair_request_work</code> table
     * reference
     */
    public SmartexamRepairRequestWork(Name alias) {
        this(alias, SMARTEXAM_REPAIR_REQUEST_WORK);
    }

    /**
     * Create a <code>public.smartexam_repair_request_work</code> table
     * reference
     */
    public SmartexamRepairRequestWork() {
        this(DSL.name("smartexam_repair_request_work"), null);
    }

    public <O extends Record> SmartexamRepairRequestWork(Table<O> child, ForeignKey<O, SmartexamRepairRequestWorkRecord> key) {
        super(child, key, SMARTEXAM_REPAIR_REQUEST_WORK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_REPAIR_REQUEST_WORK_ON_PARENT, Indexes.IDX_SMARTEXAM_REPAIR_REQUEST_WORK_UK_EXT_UUID);
    }

    @Override
    public UniqueKey<SmartexamRepairRequestWorkRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_REPAIR_REQUEST_WORK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamRepairRequestWorkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_REPAIR_REQUEST_WORK__FK_SMARTEXAM_REPAIR_REQUEST_WORK_ON_PARENT);
    }

    private transient SmartexamRepairRequestWork _smartexamRepairRequestWork;

    public SmartexamRepairRequestWork smartexamRepairRequestWork() {
        if (_smartexamRepairRequestWork == null)
            _smartexamRepairRequestWork = new SmartexamRepairRequestWork(this, Keys.SMARTEXAM_REPAIR_REQUEST_WORK__FK_SMARTEXAM_REPAIR_REQUEST_WORK_ON_PARENT);

        return _smartexamRepairRequestWork;
    }

    @Override
    public SmartexamRepairRequestWork as(String alias) {
        return new SmartexamRepairRequestWork(DSL.name(alias), this);
    }

    @Override
    public SmartexamRepairRequestWork as(Name alias) {
        return new SmartexamRepairRequestWork(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRepairRequestWork rename(String name) {
        return new SmartexamRepairRequestWork(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRepairRequestWork rename(Name name) {
        return new SmartexamRepairRequestWork(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, UUID, UUID, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
