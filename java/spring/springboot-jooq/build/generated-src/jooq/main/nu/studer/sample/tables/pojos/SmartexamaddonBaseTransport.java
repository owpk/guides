/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.pojos;


import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseTransport implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID          id;
    private final Integer       version;
    private final LocalDateTime createTs;
    private final String        createdBy;
    private final LocalDateTime updateTs;
    private final String        updatedBy;
    private final LocalDateTime deleteTs;
    private final String        deletedBy;
    private final Boolean       received;
    private final String        kafkaKey;
    private final String        name;
    private final UUID          baseGarbageContainerId;
    private final Double        _Long;
    private final Double        consumption;
    private final String        gpsSystem;
    private final String        gpsId;
    private final Double        height;
    private final Double        width;
    private final Integer       createYear;
    private final String        vin;
    private final UUID          organizationId;
    private final UUID          costsOrganizationId;
    private final String        lizing;
    private final LocalDate     dateGibddSet;
    private final String        status;
    private final UUID          licenseId;
    private final String        regNum;
    private final UUID          transportTypeId;
    private final String        model;

    public SmartexamaddonBaseTransport(SmartexamaddonBaseTransport value) {
        this.id = value.id;
        this.version = value.version;
        this.createTs = value.createTs;
        this.createdBy = value.createdBy;
        this.updateTs = value.updateTs;
        this.updatedBy = value.updatedBy;
        this.deleteTs = value.deleteTs;
        this.deletedBy = value.deletedBy;
        this.received = value.received;
        this.kafkaKey = value.kafkaKey;
        this.name = value.name;
        this.baseGarbageContainerId = value.baseGarbageContainerId;
        this._Long = value._Long;
        this.consumption = value.consumption;
        this.gpsSystem = value.gpsSystem;
        this.gpsId = value.gpsId;
        this.height = value.height;
        this.width = value.width;
        this.createYear = value.createYear;
        this.vin = value.vin;
        this.organizationId = value.organizationId;
        this.costsOrganizationId = value.costsOrganizationId;
        this.lizing = value.lizing;
        this.dateGibddSet = value.dateGibddSet;
        this.status = value.status;
        this.licenseId = value.licenseId;
        this.regNum = value.regNum;
        this.transportTypeId = value.transportTypeId;
        this.model = value.model;
    }

    public SmartexamaddonBaseTransport(
        UUID          id,
        Integer       version,
        LocalDateTime createTs,
        String        createdBy,
        LocalDateTime updateTs,
        String        updatedBy,
        LocalDateTime deleteTs,
        String        deletedBy,
        Boolean       received,
        String        kafkaKey,
        String        name,
        UUID          baseGarbageContainerId,
        Double        _Long,
        Double        consumption,
        String        gpsSystem,
        String        gpsId,
        Double        height,
        Double        width,
        Integer       createYear,
        String        vin,
        UUID          organizationId,
        UUID          costsOrganizationId,
        String        lizing,
        LocalDate     dateGibddSet,
        String        status,
        UUID          licenseId,
        String        regNum,
        UUID          transportTypeId,
        String        model
    ) {
        this.id = id;
        this.version = version;
        this.createTs = createTs;
        this.createdBy = createdBy;
        this.updateTs = updateTs;
        this.updatedBy = updatedBy;
        this.deleteTs = deleteTs;
        this.deletedBy = deletedBy;
        this.received = received;
        this.kafkaKey = kafkaKey;
        this.name = name;
        this.baseGarbageContainerId = baseGarbageContainerId;
        this._Long = _Long;
        this.consumption = consumption;
        this.gpsSystem = gpsSystem;
        this.gpsId = gpsId;
        this.height = height;
        this.width = width;
        this.createYear = createYear;
        this.vin = vin;
        this.organizationId = organizationId;
        this.costsOrganizationId = costsOrganizationId;
        this.lizing = lizing;
        this.dateGibddSet = dateGibddSet;
        this.status = status;
        this.licenseId = licenseId;
        this.regNum = regNum;
        this.transportTypeId = transportTypeId;
        this.model = model;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.version</code>.
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return this.createTs;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.created_by</code>.
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return this.updateTs;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.updated_by</code>.
     */
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return this.deleteTs;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.deleted_by</code>.
     */
    public String getDeletedBy() {
        return this.deletedBy;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.received</code>.
     */
    public Boolean getReceived() {
        return this.received;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.kafka_key</code>.
     */
    public String getKafkaKey() {
        return this.kafkaKey;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_transport.base_garbage_container_id</code>.
     */
    public UUID getBaseGarbageContainerId() {
        return this.baseGarbageContainerId;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport._long</code>.
     */
    public Double get_Long() {
        return this._Long;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.consumption</code>.
     */
    public Double getConsumption() {
        return this.consumption;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.gps_system</code>.
     */
    public String getGpsSystem() {
        return this.gpsSystem;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.gps_id</code>.
     */
    public String getGpsId() {
        return this.gpsId;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.height</code>.
     */
    public Double getHeight() {
        return this.height;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.width</code>.
     */
    public Double getWidth() {
        return this.width;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.create_year</code>.
     */
    public Integer getCreateYear() {
        return this.createYear;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.vin</code>.
     */
    public String getVin() {
        return this.vin;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_transport.organization_id</code>.
     */
    public UUID getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_transport.costs_organization_id</code>.
     */
    public UUID getCostsOrganizationId() {
        return this.costsOrganizationId;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.lizing</code>.
     */
    public String getLizing() {
        return this.lizing;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_transport.date_gibdd_set</code>.
     */
    public LocalDate getDateGibddSet() {
        return this.dateGibddSet;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.status</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.license_id</code>.
     */
    public UUID getLicenseId() {
        return this.licenseId;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.reg_num</code>.
     */
    public String getRegNum() {
        return this.regNum;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_transport.transport_type_id</code>.
     */
    public UUID getTransportTypeId() {
        return this.transportTypeId;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_transport.model</code>.
     */
    public String getModel() {
        return this.model;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SmartexamaddonBaseTransport (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(createTs);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updateTs);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(deleteTs);
        sb.append(", ").append(deletedBy);
        sb.append(", ").append(received);
        sb.append(", ").append(kafkaKey);
        sb.append(", ").append(name);
        sb.append(", ").append(baseGarbageContainerId);
        sb.append(", ").append(_Long);
        sb.append(", ").append(consumption);
        sb.append(", ").append(gpsSystem);
        sb.append(", ").append(gpsId);
        sb.append(", ").append(height);
        sb.append(", ").append(width);
        sb.append(", ").append(createYear);
        sb.append(", ").append(vin);
        sb.append(", ").append(organizationId);
        sb.append(", ").append(costsOrganizationId);
        sb.append(", ").append(lizing);
        sb.append(", ").append(dateGibddSet);
        sb.append(", ").append(status);
        sb.append(", ").append(licenseId);
        sb.append(", ").append(regNum);
        sb.append(", ").append(transportTypeId);
        sb.append(", ").append(model);

        sb.append(")");
        return sb.toString();
    }
}
