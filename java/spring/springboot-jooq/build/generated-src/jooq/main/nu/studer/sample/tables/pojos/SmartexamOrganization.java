/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamOrganization implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID          id;
    private final Integer       version;
    private final LocalDateTime createTs;
    private final String        createdBy;
    private final LocalDateTime updateTs;
    private final String        updatedBy;
    private final LocalDateTime deleteTs;
    private final String        deletedBy;
    private final String        name;
    private final String        fullName;
    private final Integer       onlineGibddId;
    private final String        code;
    private final Boolean       received;
    private final String        kafkaKey;
    private final String        taxCode;
    private final String        taxNumber;
    private final String        comment_;
    private final UUID          headPerson;

    public SmartexamOrganization(SmartexamOrganization value) {
        this.id = value.id;
        this.version = value.version;
        this.createTs = value.createTs;
        this.createdBy = value.createdBy;
        this.updateTs = value.updateTs;
        this.updatedBy = value.updatedBy;
        this.deleteTs = value.deleteTs;
        this.deletedBy = value.deletedBy;
        this.name = value.name;
        this.fullName = value.fullName;
        this.onlineGibddId = value.onlineGibddId;
        this.code = value.code;
        this.received = value.received;
        this.kafkaKey = value.kafkaKey;
        this.taxCode = value.taxCode;
        this.taxNumber = value.taxNumber;
        this.comment_ = value.comment_;
        this.headPerson = value.headPerson;
    }

    public SmartexamOrganization(
        UUID          id,
        Integer       version,
        LocalDateTime createTs,
        String        createdBy,
        LocalDateTime updateTs,
        String        updatedBy,
        LocalDateTime deleteTs,
        String        deletedBy,
        String        name,
        String        fullName,
        Integer       onlineGibddId,
        String        code,
        Boolean       received,
        String        kafkaKey,
        String        taxCode,
        String        taxNumber,
        String        comment_,
        UUID          headPerson
    ) {
        this.id = id;
        this.version = version;
        this.createTs = createTs;
        this.createdBy = createdBy;
        this.updateTs = updateTs;
        this.updatedBy = updatedBy;
        this.deleteTs = deleteTs;
        this.deletedBy = deletedBy;
        this.name = name;
        this.fullName = fullName;
        this.onlineGibddId = onlineGibddId;
        this.code = code;
        this.received = received;
        this.kafkaKey = kafkaKey;
        this.taxCode = taxCode;
        this.taxNumber = taxNumber;
        this.comment_ = comment_;
        this.headPerson = headPerson;
    }

    /**
     * Getter for <code>public.smartexam_organization.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.smartexam_organization.version</code>.
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>public.smartexam_organization.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return this.createTs;
    }

    /**
     * Getter for <code>public.smartexam_organization.created_by</code>.
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Getter for <code>public.smartexam_organization.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return this.updateTs;
    }

    /**
     * Getter for <code>public.smartexam_organization.updated_by</code>.
     */
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Getter for <code>public.smartexam_organization.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return this.deleteTs;
    }

    /**
     * Getter for <code>public.smartexam_organization.deleted_by</code>.
     */
    public String getDeletedBy() {
        return this.deletedBy;
    }

    /**
     * Getter for <code>public.smartexam_organization.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.smartexam_organization.full_name</code>.
     */
    public String getFullName() {
        return this.fullName;
    }

    /**
     * Getter for <code>public.smartexam_organization.online_gibdd_id</code>.
     */
    public Integer getOnlineGibddId() {
        return this.onlineGibddId;
    }

    /**
     * Getter for <code>public.smartexam_organization.code</code>.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Getter for <code>public.smartexam_organization.received</code>.
     */
    public Boolean getReceived() {
        return this.received;
    }

    /**
     * Getter for <code>public.smartexam_organization.kafka_key</code>.
     */
    public String getKafkaKey() {
        return this.kafkaKey;
    }

    /**
     * Getter for <code>public.smartexam_organization.tax_code</code>.
     */
    public String getTaxCode() {
        return this.taxCode;
    }

    /**
     * Getter for <code>public.smartexam_organization.tax_number</code>.
     */
    public String getTaxNumber() {
        return this.taxNumber;
    }

    /**
     * Getter for <code>public.smartexam_organization.comment_</code>.
     */
    public String getComment_() {
        return this.comment_;
    }

    /**
     * Getter for <code>public.smartexam_organization.head_person</code>.
     */
    public UUID getHeadPerson() {
        return this.headPerson;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SmartexamOrganization (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(createTs);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updateTs);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(deleteTs);
        sb.append(", ").append(deletedBy);
        sb.append(", ").append(name);
        sb.append(", ").append(fullName);
        sb.append(", ").append(onlineGibddId);
        sb.append(", ").append(code);
        sb.append(", ").append(received);
        sb.append(", ").append(kafkaKey);
        sb.append(", ").append(taxCode);
        sb.append(", ").append(taxNumber);
        sb.append(", ").append(comment_);
        sb.append(", ").append(headPerson);

        sb.append(")");
        return sb.toString();
    }
}
