/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamLimitsTsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamLimitsTs extends TableImpl<SmartexamLimitsTsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_limits_ts</code>
     */
    public static final SmartexamLimitsTs SMARTEXAM_LIMITS_TS = new SmartexamLimitsTs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamLimitsTsRecord> getRecordType() {
        return SmartexamLimitsTsRecord.class;
    }

    /**
     * The column <code>public.smartexam_limits_ts.id</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.version</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.create_ts</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.created_by</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.update_ts</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.updated_by</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.delete_ts</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.deleted_by</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_limits_ts.transport_type_id</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, UUID> TRANSPORT_TYPE_ID = createField(DSL.name("transport_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_limits_ts.amount</code>.
     */
    public final TableField<SmartexamLimitsTsRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private SmartexamLimitsTs(Name alias, Table<SmartexamLimitsTsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamLimitsTs(Name alias, Table<SmartexamLimitsTsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_limits_ts</code> table reference
     */
    public SmartexamLimitsTs(String alias) {
        this(DSL.name(alias), SMARTEXAM_LIMITS_TS);
    }

    /**
     * Create an aliased <code>public.smartexam_limits_ts</code> table reference
     */
    public SmartexamLimitsTs(Name alias) {
        this(alias, SMARTEXAM_LIMITS_TS);
    }

    /**
     * Create a <code>public.smartexam_limits_ts</code> table reference
     */
    public SmartexamLimitsTs() {
        this(DSL.name("smartexam_limits_ts"), null);
    }

    public <O extends Record> SmartexamLimitsTs(Table<O> child, ForeignKey<O, SmartexamLimitsTsRecord> key) {
        super(child, key, SMARTEXAM_LIMITS_TS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_LIMITS_TS_ON_TRANSPORT_TYPE);
    }

    @Override
    public UniqueKey<SmartexamLimitsTsRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_LIMITS_TS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamLimitsTsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_LIMITS_TS__FK_SMARTEXAM_LIMITS_TS_ON_TRANSPORT_TYPE);
    }

    private transient SmartmonTransportType _smartmonTransportType;

    public SmartmonTransportType smartmonTransportType() {
        if (_smartmonTransportType == null)
            _smartmonTransportType = new SmartmonTransportType(this, Keys.SMARTEXAM_LIMITS_TS__FK_SMARTEXAM_LIMITS_TS_ON_TRANSPORT_TYPE);

        return _smartmonTransportType;
    }

    @Override
    public SmartexamLimitsTs as(String alias) {
        return new SmartexamLimitsTs(DSL.name(alias), this);
    }

    @Override
    public SmartexamLimitsTs as(Name alias) {
        return new SmartexamLimitsTs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLimitsTs rename(String name) {
        return new SmartexamLimitsTs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLimitsTs rename(Name name) {
        return new SmartexamLimitsTs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
