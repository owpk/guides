/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamPlanRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamPlan extends TableImpl<SmartexamPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_plan</code>
     */
    public static final SmartexamPlan SMARTEXAM_PLAN = new SmartexamPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamPlanRecord> getRecordType() {
        return SmartexamPlanRecord.class;
    }

    /**
     * The column <code>public.smartexam_plan.id</code>.
     */
    public final TableField<SmartexamPlanRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_plan.version</code>.
     */
    public final TableField<SmartexamPlanRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_plan.create_ts</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.created_by</code>.
     */
    public final TableField<SmartexamPlanRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_plan.update_ts</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.updated_by</code>.
     */
    public final TableField<SmartexamPlanRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_plan.delete_ts</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.deleted_by</code>.
     */
    public final TableField<SmartexamPlanRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_plan.employee_id</code>.
     */
    public final TableField<SmartexamPlanRecord, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_plan.archive</code>.
     */
    public final TableField<SmartexamPlanRecord, Boolean> ARCHIVE = createField(DSL.name("archive"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_plan.repair_block_id</code>.
     */
    public final TableField<SmartexamPlanRecord, UUID> REPAIR_BLOCK_ID = createField(DSL.name("repair_block_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_plan.actual_date_time_start</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> ACTUAL_DATE_TIME_START = createField(DSL.name("actual_date_time_start"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.actual_date_time_end</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> ACTUAL_DATE_TIME_END = createField(DSL.name("actual_date_time_end"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.rem_block_need</code>.
     */
    public final TableField<SmartexamPlanRecord, Boolean> REM_BLOCK_NEED = createField(DSL.name("rem_block_need"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_plan.date_start</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> DATE_START = createField(DSL.name("date_start"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.date_end</code>.
     */
    public final TableField<SmartexamPlanRecord, LocalDateTime> DATE_END = createField(DSL.name("date_end"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_plan.check_list_work_id</code>.
     */
    public final TableField<SmartexamPlanRecord, UUID> CHECK_LIST_WORK_ID = createField(DSL.name("check_list_work_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_plan.status</code>.
     */
    public final TableField<SmartexamPlanRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_plan.comment_</code>.
     */
    public final TableField<SmartexamPlanRecord, String> COMMENT_ = createField(DSL.name("comment_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_plan.transport_id</code>.
     */
    public final TableField<SmartexamPlanRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    private SmartexamPlan(Name alias, Table<SmartexamPlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamPlan(Name alias, Table<SmartexamPlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_plan</code> table reference
     */
    public SmartexamPlan(String alias) {
        this(DSL.name(alias), SMARTEXAM_PLAN);
    }

    /**
     * Create an aliased <code>public.smartexam_plan</code> table reference
     */
    public SmartexamPlan(Name alias) {
        this(alias, SMARTEXAM_PLAN);
    }

    /**
     * Create a <code>public.smartexam_plan</code> table reference
     */
    public SmartexamPlan() {
        this(DSL.name("smartexam_plan"), null);
    }

    public <O extends Record> SmartexamPlan(Table<O> child, ForeignKey<O, SmartexamPlanRecord> key) {
        super(child, key, SMARTEXAM_PLAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_PLAN_ON_CHECK_LIST_WORK, Indexes.IDX_SMARTEXAM_PLAN_ON_EMPLOYEE, Indexes.IDX_SMARTEXAM_PLAN_ON_REPAIR_BLOCK, Indexes.IDX_SMARTEXAM_PLAN_ON_TRANSPORT);
    }

    @Override
    public UniqueKey<SmartexamPlanRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_PLAN_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamPlanRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_EMPLOYEE, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_REPAIR_BLOCK, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_CHECK_LIST_WORK, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_TRANSPORT);
    }

    private transient SmartexamEmployee _smartexamEmployee;
    private transient SmartexamRepairBlock _smartexamRepairBlock;
    private transient SmartexamCheckListWorks _smartexamCheckListWorks;
    private transient SmartmonTransport _smartmonTransport;

    public SmartexamEmployee smartexamEmployee() {
        if (_smartexamEmployee == null)
            _smartexamEmployee = new SmartexamEmployee(this, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_EMPLOYEE);

        return _smartexamEmployee;
    }

    public SmartexamRepairBlock smartexamRepairBlock() {
        if (_smartexamRepairBlock == null)
            _smartexamRepairBlock = new SmartexamRepairBlock(this, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_REPAIR_BLOCK);

        return _smartexamRepairBlock;
    }

    public SmartexamCheckListWorks smartexamCheckListWorks() {
        if (_smartexamCheckListWorks == null)
            _smartexamCheckListWorks = new SmartexamCheckListWorks(this, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_CHECK_LIST_WORK);

        return _smartexamCheckListWorks;
    }

    public SmartmonTransport smartmonTransport() {
        if (_smartmonTransport == null)
            _smartmonTransport = new SmartmonTransport(this, Keys.SMARTEXAM_PLAN__FK_SMARTEXAM_PLAN_ON_TRANSPORT);

        return _smartmonTransport;
    }

    @Override
    public SmartexamPlan as(String alias) {
        return new SmartexamPlan(DSL.name(alias), this);
    }

    @Override
    public SmartexamPlan as(Name alias) {
        return new SmartexamPlan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamPlan rename(String name) {
        return new SmartexamPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamPlan rename(Name name) {
        return new SmartexamPlan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, LocalDateTime, LocalDateTime, Boolean, LocalDateTime, LocalDateTime, UUID, String, String, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
