/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysQueryResultRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysQueryResult extends TableImpl<SysQueryResultRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_query_result</code>
     */
    public static final SysQueryResult SYS_QUERY_RESULT = new SysQueryResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysQueryResultRecord> getRecordType() {
        return SysQueryResultRecord.class;
    }

    /**
     * The column <code>public.sys_query_result.id</code>.
     */
    public final TableField<SysQueryResultRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sys_query_result.session_id</code>.
     */
    public final TableField<SysQueryResultRecord, UUID> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_query_result.query_key</code>.
     */
    public final TableField<SysQueryResultRecord, Integer> QUERY_KEY = createField(DSL.name("query_key"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sys_query_result.entity_id</code>.
     */
    public final TableField<SysQueryResultRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sys_query_result.string_entity_id</code>.
     */
    public final TableField<SysQueryResultRecord, String> STRING_ENTITY_ID = createField(DSL.name("string_entity_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_query_result.int_entity_id</code>.
     */
    public final TableField<SysQueryResultRecord, Integer> INT_ENTITY_ID = createField(DSL.name("int_entity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sys_query_result.long_entity_id</code>.
     */
    public final TableField<SysQueryResultRecord, Long> LONG_ENTITY_ID = createField(DSL.name("long_entity_id"), SQLDataType.BIGINT, this, "");

    private SysQueryResult(Name alias, Table<SysQueryResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysQueryResult(Name alias, Table<SysQueryResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_query_result</code> table reference
     */
    public SysQueryResult(String alias) {
        this(DSL.name(alias), SYS_QUERY_RESULT);
    }

    /**
     * Create an aliased <code>public.sys_query_result</code> table reference
     */
    public SysQueryResult(Name alias) {
        this(alias, SYS_QUERY_RESULT);
    }

    /**
     * Create a <code>public.sys_query_result</code> table reference
     */
    public SysQueryResult() {
        this(DSL.name("sys_query_result"), null);
    }

    public <O extends Record> SysQueryResult(Table<O> child, ForeignKey<O, SysQueryResultRecord> key) {
        super(child, key, SYS_QUERY_RESULT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SYS_QUERY_RESULT_ENTITY_SESSION_KEY, Indexes.IDX_SYS_QUERY_RESULT_IENTITY_SESSION_KEY, Indexes.IDX_SYS_QUERY_RESULT_LENTITY_SESSION_KEY, Indexes.IDX_SYS_QUERY_RESULT_SENTITY_SESSION_KEY, Indexes.IDX_SYS_QUERY_RESULT_SESSION_KEY);
    }

    @Override
    public Identity<SysQueryResultRecord, Long> getIdentity() {
        return (Identity<SysQueryResultRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SysQueryResultRecord> getPrimaryKey() {
        return Keys.SYS_QUERY_RESULT_PKEY;
    }

    @Override
    public SysQueryResult as(String alias) {
        return new SysQueryResult(DSL.name(alias), this);
    }

    @Override
    public SysQueryResult as(Name alias) {
        return new SysQueryResult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysQueryResult rename(String name) {
        return new SysQueryResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysQueryResult rename(Name name) {
        return new SysQueryResult(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, UUID, Integer, UUID, String, Integer, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
