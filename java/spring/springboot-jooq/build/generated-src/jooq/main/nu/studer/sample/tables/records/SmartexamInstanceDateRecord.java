/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDate;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamInstanceDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamInstanceDateRecord extends UpdatableRecordImpl<SmartexamInstanceDateRecord> implements Record7<UUID, LocalDate, Long, UUID, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_instance_date.id</code>.
     */
    public SmartexamInstanceDateRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_instance_date.date_</code>.
     */
    public SmartexamInstanceDateRecord setDate_(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.date_</code>.
     */
    public LocalDate getDate_() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for
     * <code>public.smartexam_instance_date.amount_check_lists</code>.
     */
    public SmartexamInstanceDateRecord setAmountCheckLists(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_instance_date.amount_check_lists</code>.
     */
    public Long getAmountCheckLists() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.smartexam_instance_date.division_id</code>.
     */
    public SmartexamInstanceDateRecord setDivisionId(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.division_id</code>.
     */
    public UUID getDivisionId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.smartexam_instance_date.amount_all_ts</code>.
     */
    public SmartexamInstanceDateRecord setAmountAllTs(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.amount_all_ts</code>.
     */
    public Long getAmountAllTs() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.smartexam_instance_date.amount_ts</code>.
     */
    public SmartexamInstanceDateRecord setAmountTs(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.amount_ts</code>.
     */
    public Long getAmountTs() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.smartexam_instance_date.amoint_ts_no_line</code>.
     */
    public SmartexamInstanceDateRecord setAmointTsNoLine(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_instance_date.amoint_ts_no_line</code>.
     */
    public Long getAmointTsNoLine() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, LocalDate, Long, UUID, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, LocalDate, Long, UUID, Long, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.DATE_;
    }

    @Override
    public Field<Long> field3() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.AMOUNT_CHECK_LISTS;
    }

    @Override
    public Field<UUID> field4() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.DIVISION_ID;
    }

    @Override
    public Field<Long> field5() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.AMOUNT_ALL_TS;
    }

    @Override
    public Field<Long> field6() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.AMOUNT_TS;
    }

    @Override
    public Field<Long> field7() {
        return SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE.AMOINT_TS_NO_LINE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate_();
    }

    @Override
    public Long component3() {
        return getAmountCheckLists();
    }

    @Override
    public UUID component4() {
        return getDivisionId();
    }

    @Override
    public Long component5() {
        return getAmountAllTs();
    }

    @Override
    public Long component6() {
        return getAmountTs();
    }

    @Override
    public Long component7() {
        return getAmointTsNoLine();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate_();
    }

    @Override
    public Long value3() {
        return getAmountCheckLists();
    }

    @Override
    public UUID value4() {
        return getDivisionId();
    }

    @Override
    public Long value5() {
        return getAmountAllTs();
    }

    @Override
    public Long value6() {
        return getAmountTs();
    }

    @Override
    public Long value7() {
        return getAmointTsNoLine();
    }

    @Override
    public SmartexamInstanceDateRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value2(LocalDate value) {
        setDate_(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value3(Long value) {
        setAmountCheckLists(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value4(UUID value) {
        setDivisionId(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value5(Long value) {
        setAmountAllTs(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value6(Long value) {
        setAmountTs(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord value7(Long value) {
        setAmointTsNoLine(value);
        return this;
    }

    @Override
    public SmartexamInstanceDateRecord values(UUID value1, LocalDate value2, Long value3, UUID value4, Long value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamInstanceDateRecord
     */
    public SmartexamInstanceDateRecord() {
        super(SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE);
    }

    /**
     * Create a detached, initialised SmartexamInstanceDateRecord
     */
    public SmartexamInstanceDateRecord(UUID id, LocalDate date_, Long amountCheckLists, UUID divisionId, Long amountAllTs, Long amountTs, Long amointTsNoLine) {
        super(SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE);

        setId(id);
        setDate_(date_);
        setAmountCheckLists(amountCheckLists);
        setDivisionId(divisionId);
        setAmountAllTs(amountAllTs);
        setAmountTs(amountTs);
        setAmointTsNoLine(amointTsNoLine);
    }

    /**
     * Create a detached, initialised SmartexamInstanceDateRecord
     */
    public SmartexamInstanceDateRecord(nu.studer.sample.tables.pojos.SmartexamInstanceDate value) {
        super(SmartexamInstanceDate.SMARTEXAM_INSTANCE_DATE);

        if (value != null) {
            setId(value.getId());
            setDate_(value.getDate_());
            setAmountCheckLists(value.getAmountCheckLists());
            setDivisionId(value.getDivisionId());
            setAmountAllTs(value.getAmountAllTs());
            setAmountTs(value.getAmountTs());
            setAmointTsNoLine(value.getAmointTsNoLine());
        }
    }
}
