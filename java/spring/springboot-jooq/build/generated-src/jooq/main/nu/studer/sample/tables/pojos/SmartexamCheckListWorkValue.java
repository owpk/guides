/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListWorkValue implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID          id;
    private final Integer       version;
    private final LocalDateTime createTs;
    private final String        createdBy;
    private final LocalDateTime updateTs;
    private final String        updatedBy;
    private final LocalDateTime deleteTs;
    private final String        deletedBy;
    private final UUID          repairRequestWorkId;
    private final Boolean       done;
    private final UUID          planId;
    private final UUID          photoId;
    private final Long          actualSpend;
    private final LocalDateTime actualDateEnd;
    private final LocalDateTime actualDateStart;

    public SmartexamCheckListWorkValue(SmartexamCheckListWorkValue value) {
        this.id = value.id;
        this.version = value.version;
        this.createTs = value.createTs;
        this.createdBy = value.createdBy;
        this.updateTs = value.updateTs;
        this.updatedBy = value.updatedBy;
        this.deleteTs = value.deleteTs;
        this.deletedBy = value.deletedBy;
        this.repairRequestWorkId = value.repairRequestWorkId;
        this.done = value.done;
        this.planId = value.planId;
        this.photoId = value.photoId;
        this.actualSpend = value.actualSpend;
        this.actualDateEnd = value.actualDateEnd;
        this.actualDateStart = value.actualDateStart;
    }

    public SmartexamCheckListWorkValue(
        UUID          id,
        Integer       version,
        LocalDateTime createTs,
        String        createdBy,
        LocalDateTime updateTs,
        String        updatedBy,
        LocalDateTime deleteTs,
        String        deletedBy,
        UUID          repairRequestWorkId,
        Boolean       done,
        UUID          planId,
        UUID          photoId,
        Long          actualSpend,
        LocalDateTime actualDateEnd,
        LocalDateTime actualDateStart
    ) {
        this.id = id;
        this.version = version;
        this.createTs = createTs;
        this.createdBy = createdBy;
        this.updateTs = updateTs;
        this.updatedBy = updatedBy;
        this.deleteTs = deleteTs;
        this.deletedBy = deletedBy;
        this.repairRequestWorkId = repairRequestWorkId;
        this.done = done;
        this.planId = planId;
        this.photoId = photoId;
        this.actualSpend = actualSpend;
        this.actualDateEnd = actualDateEnd;
        this.actualDateStart = actualDateStart;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.version</code>.
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return this.createTs;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.created_by</code>.
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return this.updateTs;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.updated_by</code>.
     */
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return this.deleteTs;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.deleted_by</code>.
     */
    public String getDeletedBy() {
        return this.deletedBy;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.repair_request_work_id</code>.
     */
    public UUID getRepairRequestWorkId() {
        return this.repairRequestWorkId;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.done</code>.
     */
    public Boolean getDone() {
        return this.done;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.plan_id</code>.
     */
    public UUID getPlanId() {
        return this.planId;
    }

    /**
     * Getter for <code>public.smartexam_check_list_work_value.photo_id</code>.
     */
    public UUID getPhotoId() {
        return this.photoId;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_spend</code>.
     */
    public Long getActualSpend() {
        return this.actualSpend;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_date_end</code>.
     */
    public LocalDateTime getActualDateEnd() {
        return this.actualDateEnd;
    }

    /**
     * Getter for
     * <code>public.smartexam_check_list_work_value.actual_date_start</code>.
     */
    public LocalDateTime getActualDateStart() {
        return this.actualDateStart;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SmartexamCheckListWorkValue (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(createTs);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updateTs);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(deleteTs);
        sb.append(", ").append(deletedBy);
        sb.append(", ").append(repairRequestWorkId);
        sb.append(", ").append(done);
        sb.append(", ").append(planId);
        sb.append(", ").append(photoId);
        sb.append(", ").append(actualSpend);
        sb.append(", ").append(actualDateEnd);
        sb.append(", ").append(actualDateStart);

        sb.append(")");
        return sb.toString();
    }
}
