/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecSessionLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecSessionLog extends TableImpl<SecSessionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_session_log</code>
     */
    public static final SecSessionLog SEC_SESSION_LOG = new SecSessionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecSessionLogRecord> getRecordType() {
        return SecSessionLogRecord.class;
    }

    /**
     * The column <code>public.sec_session_log.id</code>.
     */
    public final TableField<SecSessionLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_session_log.version</code>.
     */
    public final TableField<SecSessionLogRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_session_log.create_ts</code>.
     */
    public final TableField<SecSessionLogRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_session_log.created_by</code>.
     */
    public final TableField<SecSessionLogRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_session_log.update_ts</code>.
     */
    public final TableField<SecSessionLogRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_session_log.updated_by</code>.
     */
    public final TableField<SecSessionLogRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_session_log.delete_ts</code>.
     */
    public final TableField<SecSessionLogRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_session_log.deleted_by</code>.
     */
    public final TableField<SecSessionLogRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_session_log.sys_tenant_id</code>.
     */
    public final TableField<SecSessionLogRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_session_log.session_id</code>.
     */
    public final TableField<SecSessionLogRecord, UUID> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_session_log.user_id</code>.
     */
    public final TableField<SecSessionLogRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_session_log.substituted_user_id</code>.
     */
    public final TableField<SecSessionLogRecord, UUID> SUBSTITUTED_USER_ID = createField(DSL.name("substituted_user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_session_log.user_data</code>.
     */
    public final TableField<SecSessionLogRecord, String> USER_DATA = createField(DSL.name("user_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sec_session_log.last_action</code>.
     */
    public final TableField<SecSessionLogRecord, Integer> LAST_ACTION = createField(DSL.name("last_action"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sec_session_log.client_info</code>.
     */
    public final TableField<SecSessionLogRecord, String> CLIENT_INFO = createField(DSL.name("client_info"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.sec_session_log.client_type</code>.
     */
    public final TableField<SecSessionLogRecord, String> CLIENT_TYPE = createField(DSL.name("client_type"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.sec_session_log.address</code>.
     */
    public final TableField<SecSessionLogRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_session_log.started_ts</code>.
     */
    public final TableField<SecSessionLogRecord, LocalDateTime> STARTED_TS = createField(DSL.name("started_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_session_log.finished_ts</code>.
     */
    public final TableField<SecSessionLogRecord, LocalDateTime> FINISHED_TS = createField(DSL.name("finished_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_session_log.server_id</code>.
     */
    public final TableField<SecSessionLogRecord, String> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.VARCHAR(128), this, "");

    private SecSessionLog(Name alias, Table<SecSessionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecSessionLog(Name alias, Table<SecSessionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_session_log</code> table reference
     */
    public SecSessionLog(String alias) {
        this(DSL.name(alias), SEC_SESSION_LOG);
    }

    /**
     * Create an aliased <code>public.sec_session_log</code> table reference
     */
    public SecSessionLog(Name alias) {
        this(alias, SEC_SESSION_LOG);
    }

    /**
     * Create a <code>public.sec_session_log</code> table reference
     */
    public SecSessionLog() {
        this(DSL.name("sec_session_log"), null);
    }

    public <O extends Record> SecSessionLog(Table<O> child, ForeignKey<O, SecSessionLogRecord> key) {
        super(child, key, SEC_SESSION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_SESSION_LOG_SESSION, Indexes.IDX_SEC_SESSION_LOG_SUBUSER, Indexes.IDX_SEC_SESSION_LOG_USER, Indexes.IDX_SESSION_LOG_STARTED_TS);
    }

    @Override
    public UniqueKey<SecSessionLogRecord> getPrimaryKey() {
        return Keys.SEC_SESSION_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<SecSessionLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_SESSION_LOG__FK_SEC_SESSION_LOG_USER, Keys.SEC_SESSION_LOG__FK_SEC_SESSION_LOG_SUBUSER);
    }

    private transient SecUser _fkSecSessionLogUser;
    private transient SecUser _fkSecSessionLogSubuser;

    public SecUser fkSecSessionLogUser() {
        if (_fkSecSessionLogUser == null)
            _fkSecSessionLogUser = new SecUser(this, Keys.SEC_SESSION_LOG__FK_SEC_SESSION_LOG_USER);

        return _fkSecSessionLogUser;
    }

    public SecUser fkSecSessionLogSubuser() {
        if (_fkSecSessionLogSubuser == null)
            _fkSecSessionLogSubuser = new SecUser(this, Keys.SEC_SESSION_LOG__FK_SEC_SESSION_LOG_SUBUSER);

        return _fkSecSessionLogSubuser;
    }

    @Override
    public SecSessionLog as(String alias) {
        return new SecSessionLog(DSL.name(alias), this);
    }

    @Override
    public SecSessionLog as(Name alias) {
        return new SecSessionLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecSessionLog rename(String name) {
        return new SecSessionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecSessionLog rename(Name name) {
        return new SecSessionLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, UUID, UUID, UUID, String, Integer, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
