/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.DdcrdDiagnoseExecutionLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DdcrdDiagnoseExecutionLog extends TableImpl<DdcrdDiagnoseExecutionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.ddcrd_diagnose_execution_log</code>
     */
    public static final DdcrdDiagnoseExecutionLog DDCRD_DIAGNOSE_EXECUTION_LOG = new DdcrdDiagnoseExecutionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DdcrdDiagnoseExecutionLogRecord> getRecordType() {
        return DdcrdDiagnoseExecutionLogRecord.class;
    }

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.id</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.version</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.create_ts</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.created_by</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.update_ts</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.updated_by</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.delete_ts</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.ddcrd_diagnose_execution_log.deleted_by</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.execution_successful</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, Boolean> EXECUTION_SUCCESSFUL = createField(DSL.name("execution_successful"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.execution_timestamp</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, LocalDateTime> EXECUTION_TIMESTAMP = createField(DSL.name("execution_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.execution_user</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> EXECUTION_USER = createField(DSL.name("execution_user"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.execution_result_file_id</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, UUID> EXECUTION_RESULT_FILE_ID = createField(DSL.name("execution_result_file_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.diagnose_type</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> DIAGNOSE_TYPE = createField(DSL.name("diagnose_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>public.ddcrd_diagnose_execution_log.execution_type</code>.
     */
    public final TableField<DdcrdDiagnoseExecutionLogRecord, String> EXECUTION_TYPE = createField(DSL.name("execution_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private DdcrdDiagnoseExecutionLog(Name alias, Table<DdcrdDiagnoseExecutionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private DdcrdDiagnoseExecutionLog(Name alias, Table<DdcrdDiagnoseExecutionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ddcrd_diagnose_execution_log</code> table
     * reference
     */
    public DdcrdDiagnoseExecutionLog(String alias) {
        this(DSL.name(alias), DDCRD_DIAGNOSE_EXECUTION_LOG);
    }

    /**
     * Create an aliased <code>public.ddcrd_diagnose_execution_log</code> table
     * reference
     */
    public DdcrdDiagnoseExecutionLog(Name alias) {
        this(alias, DDCRD_DIAGNOSE_EXECUTION_LOG);
    }

    /**
     * Create a <code>public.ddcrd_diagnose_execution_log</code> table reference
     */
    public DdcrdDiagnoseExecutionLog() {
        this(DSL.name("ddcrd_diagnose_execution_log"), null);
    }

    public <O extends Record> DdcrdDiagnoseExecutionLog(Table<O> child, ForeignKey<O, DdcrdDiagnoseExecutionLogRecord> key) {
        super(child, key, DDCRD_DIAGNOSE_EXECUTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DDCRD_DIAGNOSE_EXECUTION_LOG_EXECUTION_RESULT_FILE);
    }

    @Override
    public UniqueKey<DdcrdDiagnoseExecutionLogRecord> getPrimaryKey() {
        return Keys.DDCRD_DIAGNOSE_EXECUTION_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<DdcrdDiagnoseExecutionLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DDCRD_DIAGNOSE_EXECUTION_LOG__FK_DDCRD_DIAGNOSE_EXECUTION_LOG_EXECUTION_RESULT_FILE);
    }

    private transient SysFile _sysFile;

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.DDCRD_DIAGNOSE_EXECUTION_LOG__FK_DDCRD_DIAGNOSE_EXECUTION_LOG_EXECUTION_RESULT_FILE);

        return _sysFile;
    }

    @Override
    public DdcrdDiagnoseExecutionLog as(String alias) {
        return new DdcrdDiagnoseExecutionLog(DSL.name(alias), this);
    }

    @Override
    public DdcrdDiagnoseExecutionLog as(Name alias) {
        return new DdcrdDiagnoseExecutionLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DdcrdDiagnoseExecutionLog rename(String name) {
        return new DdcrdDiagnoseExecutionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DdcrdDiagnoseExecutionLog rename(Name name) {
        return new DdcrdDiagnoseExecutionLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, LocalDateTime, String, UUID, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
