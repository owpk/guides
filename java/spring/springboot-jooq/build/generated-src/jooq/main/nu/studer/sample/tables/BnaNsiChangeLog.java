/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.BnaNsiChangeLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BnaNsiChangeLog extends TableImpl<BnaNsiChangeLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bna_nsi_change_log</code>
     */
    public static final BnaNsiChangeLog BNA_NSI_CHANGE_LOG = new BnaNsiChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BnaNsiChangeLogRecord> getRecordType() {
        return BnaNsiChangeLogRecord.class;
    }

    /**
     * The column <code>public.bna_nsi_change_log.id</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.version</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.create_ts</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.created_by</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.update_ts</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.updated_by</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.delete_ts</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.deleted_by</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.received</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.kafka_key</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.topic_name</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> TOPIC_NAME = createField(DSL.name("topic_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.key_</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> KEY_ = createField(DSL.name("key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.message</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.direction</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> DIRECTION = createField(DSL.name("direction"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.message_type</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> MESSAGE_TYPE = createField(DSL.name("message_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bna_nsi_change_log.processed</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, Boolean> PROCESSED = createField(DSL.name("processed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.manual_check</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, Boolean> MANUAL_CHECK = createField(DSL.name("manual_check"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.sender_name</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> SENDER_NAME = createField(DSL.name("sender_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.bna_nsi_change_log.recipient_name</code>.
     */
    public final TableField<BnaNsiChangeLogRecord, String> RECIPIENT_NAME = createField(DSL.name("recipient_name"), SQLDataType.CLOB, this, "");

    private BnaNsiChangeLog(Name alias, Table<BnaNsiChangeLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private BnaNsiChangeLog(Name alias, Table<BnaNsiChangeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bna_nsi_change_log</code> table reference
     */
    public BnaNsiChangeLog(String alias) {
        this(DSL.name(alias), BNA_NSI_CHANGE_LOG);
    }

    /**
     * Create an aliased <code>public.bna_nsi_change_log</code> table reference
     */
    public BnaNsiChangeLog(Name alias) {
        this(alias, BNA_NSI_CHANGE_LOG);
    }

    /**
     * Create a <code>public.bna_nsi_change_log</code> table reference
     */
    public BnaNsiChangeLog() {
        this(DSL.name("bna_nsi_change_log"), null);
    }

    public <O extends Record> BnaNsiChangeLog(Table<O> child, ForeignKey<O, BnaNsiChangeLogRecord> key) {
        super(child, key, BNA_NSI_CHANGE_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BnaNsiChangeLogRecord> getPrimaryKey() {
        return Keys.BNA_NSI_CHANGE_LOG_PKEY;
    }

    @Override
    public BnaNsiChangeLog as(String alias) {
        return new BnaNsiChangeLog(DSL.name(alias), this);
    }

    @Override
    public BnaNsiChangeLog as(Name alias) {
        return new BnaNsiChangeLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BnaNsiChangeLog rename(String name) {
        return new BnaNsiChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BnaNsiChangeLog rename(Name name) {
        return new BnaNsiChangeLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, String, String, Boolean, Boolean, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
