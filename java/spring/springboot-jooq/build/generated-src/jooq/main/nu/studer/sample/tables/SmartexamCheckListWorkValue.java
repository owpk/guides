/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamCheckListWorkValueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamCheckListWorkValue extends TableImpl<SmartexamCheckListWorkValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_check_list_work_value</code>
     */
    public static final SmartexamCheckListWorkValue SMARTEXAM_CHECK_LIST_WORK_VALUE = new SmartexamCheckListWorkValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamCheckListWorkValueRecord> getRecordType() {
        return SmartexamCheckListWorkValueRecord.class;
    }

    /**
     * The column <code>public.smartexam_check_list_work_value.id</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.version</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.create_ts</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.created_by</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.update_ts</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.updated_by</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.delete_ts</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.deleted_by</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.repair_request_work_id</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, UUID> REPAIR_REQUEST_WORK_ID = createField(DSL.name("repair_request_work_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.done</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, Boolean> DONE = createField(DSL.name("done"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.plan_id</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, UUID> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_check_list_work_value.photo_id</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.actual_spend</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, Long> ACTUAL_SPEND = createField(DSL.name("actual_spend"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.actual_date_end</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, LocalDateTime> ACTUAL_DATE_END = createField(DSL.name("actual_date_end"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_check_list_work_value.actual_date_start</code>.
     */
    public final TableField<SmartexamCheckListWorkValueRecord, LocalDateTime> ACTUAL_DATE_START = createField(DSL.name("actual_date_start"), SQLDataType.LOCALDATETIME(6), this, "");

    private SmartexamCheckListWorkValue(Name alias, Table<SmartexamCheckListWorkValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamCheckListWorkValue(Name alias, Table<SmartexamCheckListWorkValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_work_value</code>
     * table reference
     */
    public SmartexamCheckListWorkValue(String alias) {
        this(DSL.name(alias), SMARTEXAM_CHECK_LIST_WORK_VALUE);
    }

    /**
     * Create an aliased <code>public.smartexam_check_list_work_value</code>
     * table reference
     */
    public SmartexamCheckListWorkValue(Name alias) {
        this(alias, SMARTEXAM_CHECK_LIST_WORK_VALUE);
    }

    /**
     * Create a <code>public.smartexam_check_list_work_value</code> table
     * reference
     */
    public SmartexamCheckListWorkValue() {
        this(DSL.name("smartexam_check_list_work_value"), null);
    }

    public <O extends Record> SmartexamCheckListWorkValue(Table<O> child, ForeignKey<O, SmartexamCheckListWorkValueRecord> key) {
        super(child, key, SMARTEXAM_CHECK_LIST_WORK_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PHOTO, Indexes.IDX_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PLAN, Indexes.IDX_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_REPAIR_REQUEST_WORK);
    }

    @Override
    public UniqueKey<SmartexamCheckListWorkValueRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamCheckListWorkValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_REPAIR_REQUEST_WORK, Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PLAN, Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PHOTO);
    }

    private transient SmartexamRepairRequestWork _smartexamRepairRequestWork;
    private transient SmartexamPlan _smartexamPlan;
    private transient SysFile _sysFile;

    public SmartexamRepairRequestWork smartexamRepairRequestWork() {
        if (_smartexamRepairRequestWork == null)
            _smartexamRepairRequestWork = new SmartexamRepairRequestWork(this, Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_REPAIR_REQUEST_WORK);

        return _smartexamRepairRequestWork;
    }

    public SmartexamPlan smartexamPlan() {
        if (_smartexamPlan == null)
            _smartexamPlan = new SmartexamPlan(this, Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PLAN);

        return _smartexamPlan;
    }

    public SysFile sysFile() {
        if (_sysFile == null)
            _sysFile = new SysFile(this, Keys.SMARTEXAM_CHECK_LIST_WORK_VALUE__FK_SMARTEXAM_CHECK_LIST_WORK_VALUE_ON_PHOTO);

        return _sysFile;
    }

    @Override
    public SmartexamCheckListWorkValue as(String alias) {
        return new SmartexamCheckListWorkValue(DSL.name(alias), this);
    }

    @Override
    public SmartexamCheckListWorkValue as(Name alias) {
        return new SmartexamCheckListWorkValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListWorkValue rename(String name) {
        return new SmartexamCheckListWorkValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamCheckListWorkValue rename(Name name) {
        return new SmartexamCheckListWorkValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Boolean, UUID, UUID, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
