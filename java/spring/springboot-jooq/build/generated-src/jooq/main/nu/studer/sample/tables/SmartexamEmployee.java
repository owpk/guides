/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamEmployeeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamEmployee extends TableImpl<SmartexamEmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_employee</code>
     */
    public static final SmartexamEmployee SMARTEXAM_EMPLOYEE = new SmartexamEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamEmployeeRecord> getRecordType() {
        return SmartexamEmployeeRecord.class;
    }

    /**
     * The column <code>public.smartexam_employee.id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_employee.version</code>.
     */
    public final TableField<SmartexamEmployeeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_employee.create_ts</code>.
     */
    public final TableField<SmartexamEmployeeRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_employee.created_by</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_employee.update_ts</code>.
     */
    public final TableField<SmartexamEmployeeRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_employee.updated_by</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_employee.delete_ts</code>.
     */
    public final TableField<SmartexamEmployeeRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_employee.deleted_by</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_employee.division_id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_employee.phone</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_employee.email</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_employee.position_id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> POSITION_ID = createField(DSL.name("position_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_employee.ext_uuid</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> EXT_UUID = createField(DSL.name("ext_uuid"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_employee.name</code>.
     */
    public final TableField<SmartexamEmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_employee.user_id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_employee.user_from1c_id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> USER_FROM1C_ID = createField(DSL.name("user_from1c_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_employee.employee_from1c_id</code>.
     */
    public final TableField<SmartexamEmployeeRecord, UUID> EMPLOYEE_FROM1C_ID = createField(DSL.name("employee_from1c_id"), SQLDataType.UUID, this, "");

    private SmartexamEmployee(Name alias, Table<SmartexamEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamEmployee(Name alias, Table<SmartexamEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_employee</code> table reference
     */
    public SmartexamEmployee(String alias) {
        this(DSL.name(alias), SMARTEXAM_EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.smartexam_employee</code> table reference
     */
    public SmartexamEmployee(Name alias) {
        this(alias, SMARTEXAM_EMPLOYEE);
    }

    /**
     * Create a <code>public.smartexam_employee</code> table reference
     */
    public SmartexamEmployee() {
        this(DSL.name("smartexam_employee"), null);
    }

    public <O extends Record> SmartexamEmployee(Table<O> child, ForeignKey<O, SmartexamEmployeeRecord> key) {
        super(child, key, SMARTEXAM_EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_EMPLOYEE_ON_DIVISION, Indexes.IDX_SMARTEXAM_EMPLOYEE_ON_EMPLOYEE_FROM1C, Indexes.IDX_SMARTEXAM_EMPLOYEE_ON_POSITION, Indexes.IDX_SMARTEXAM_EMPLOYEE_ON_USER, Indexes.IDX_SMARTEXAM_EMPLOYEE_ON_USER_FROM1C);
    }

    @Override
    public UniqueKey<SmartexamEmployeeRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_EMPLOYEE_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamEmployeeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_DIVISION, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_POSITION, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER_FROM1C, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_EMPLOYEE_FROM1C);
    }

    private transient SmartmonDivision _smartmonDivision;
    private transient SmartexamPositions _smartexamPositions;
    private transient SecUser _secUser;
    private transient SmartexamUsersFrom1c _smartexamUsersFrom1c;
    private transient CompanyaddonBaseEmployee _companyaddonBaseEmployee;

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_DIVISION);

        return _smartmonDivision;
    }

    public SmartexamPositions smartexamPositions() {
        if (_smartexamPositions == null)
            _smartexamPositions = new SmartexamPositions(this, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_POSITION);

        return _smartexamPositions;
    }

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER);

        return _secUser;
    }

    public SmartexamUsersFrom1c smartexamUsersFrom1c() {
        if (_smartexamUsersFrom1c == null)
            _smartexamUsersFrom1c = new SmartexamUsersFrom1c(this, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_USER_FROM1C);

        return _smartexamUsersFrom1c;
    }

    public CompanyaddonBaseEmployee companyaddonBaseEmployee() {
        if (_companyaddonBaseEmployee == null)
            _companyaddonBaseEmployee = new CompanyaddonBaseEmployee(this, Keys.SMARTEXAM_EMPLOYEE__FK_SMARTEXAM_EMPLOYEE_ON_EMPLOYEE_FROM1C);

        return _companyaddonBaseEmployee;
    }

    @Override
    public SmartexamEmployee as(String alias) {
        return new SmartexamEmployee(DSL.name(alias), this);
    }

    @Override
    public SmartexamEmployee as(Name alias) {
        return new SmartexamEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamEmployee rename(String name) {
        return new SmartexamEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamEmployee rename(Name name) {
        return new SmartexamEmployee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, String, UUID, String, String, UUID, UUID, UUID> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
