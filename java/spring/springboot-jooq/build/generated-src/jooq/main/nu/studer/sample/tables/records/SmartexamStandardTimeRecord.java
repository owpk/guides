/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamStandardTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamStandardTimeRecord extends UpdatableRecordImpl<SmartexamStandardTimeRecord> implements Record11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Double, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_standard_time.id</code>.
     */
    public SmartexamStandardTimeRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.version</code>.
     */
    public SmartexamStandardTimeRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.create_ts</code>.
     */
    public SmartexamStandardTimeRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.created_by</code>.
     */
    public SmartexamStandardTimeRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.update_ts</code>.
     */
    public SmartexamStandardTimeRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.updated_by</code>.
     */
    public SmartexamStandardTimeRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.delete_ts</code>.
     */
    public SmartexamStandardTimeRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.deleted_by</code>.
     */
    public SmartexamStandardTimeRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.transport_type_id</code>.
     */
    public SmartexamStandardTimeRecord setTransportTypeId(UUID value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.transport_type_id</code>.
     */
    public UUID getTransportTypeId() {
        return (UUID) get(8);
    }

    /**
     * Setter for <code>public.smartexam_standard_time.standard_time</code>.
     */
    public SmartexamStandardTimeRecord setStandardTime(Double value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_standard_time.standard_time</code>.
     */
    public Double getStandardTime() {
        return (Double) get(9);
    }

    /**
     * Setter for
     * <code>public.smartexam_standard_time.repair_request_work_id</code>.
     */
    public SmartexamStandardTimeRecord setRepairRequestWorkId(UUID value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_standard_time.repair_request_work_id</code>.
     */
    public UUID getRepairRequestWorkId() {
        return (UUID) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Double, UUID> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, Double, UUID> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.DELETED_BY;
    }

    @Override
    public Field<UUID> field9() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.TRANSPORT_TYPE_ID;
    }

    @Override
    public Field<Double> field10() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.STANDARD_TIME;
    }

    @Override
    public Field<UUID> field11() {
        return SmartexamStandardTime.SMARTEXAM_STANDARD_TIME.REPAIR_REQUEST_WORK_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public UUID component9() {
        return getTransportTypeId();
    }

    @Override
    public Double component10() {
        return getStandardTime();
    }

    @Override
    public UUID component11() {
        return getRepairRequestWorkId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public UUID value9() {
        return getTransportTypeId();
    }

    @Override
    public Double value10() {
        return getStandardTime();
    }

    @Override
    public UUID value11() {
        return getRepairRequestWorkId();
    }

    @Override
    public SmartexamStandardTimeRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value9(UUID value) {
        setTransportTypeId(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value10(Double value) {
        setStandardTime(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord value11(UUID value) {
        setRepairRequestWorkId(value);
        return this;
    }

    @Override
    public SmartexamStandardTimeRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, UUID value9, Double value10, UUID value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamStandardTimeRecord
     */
    public SmartexamStandardTimeRecord() {
        super(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME);
    }

    /**
     * Create a detached, initialised SmartexamStandardTimeRecord
     */
    public SmartexamStandardTimeRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, UUID transportTypeId, Double standardTime, UUID repairRequestWorkId) {
        super(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setTransportTypeId(transportTypeId);
        setStandardTime(standardTime);
        setRepairRequestWorkId(repairRequestWorkId);
    }

    /**
     * Create a detached, initialised SmartexamStandardTimeRecord
     */
    public SmartexamStandardTimeRecord(nu.studer.sample.tables.pojos.SmartexamStandardTime value) {
        super(SmartexamStandardTime.SMARTEXAM_STANDARD_TIME);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setTransportTypeId(value.getTransportTypeId());
            setStandardTime(value.getStandardTime());
            setRepairRequestWorkId(value.getRepairRequestWorkId());
        }
    }
}
