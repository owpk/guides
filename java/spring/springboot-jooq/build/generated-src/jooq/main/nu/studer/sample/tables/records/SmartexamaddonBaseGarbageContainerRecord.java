/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamaddonBaseGarbageContainer;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseGarbageContainerRecord extends UpdatableRecordImpl<SmartexamaddonBaseGarbageContainerRecord> implements Record15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, Double, String, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexamaddon_base_garbage_container.id</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_garbage_container.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.version</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.create_ts</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.created_by</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.update_ts</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.updated_by</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.delete_ts</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.deleted_by</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.received</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setReceived(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.received</code>.
     */
    public Boolean getReceived() {
        return (Boolean) get(8);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.kafka_key</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setKafkaKey(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.kafka_key</code>.
     */
    public String getKafkaKey() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.name</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setName(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.name</code>.
     */
    public String getName() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.volume</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setVolume(Double value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.volume</code>.
     */
    public Double getVolume() {
        return (Double) get(11);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.load_type</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setLoadType(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.load_type</code>.
     */
    public String getLoadType() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.max_cont_volume_float</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setMaxContVolumeFloat(Double value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.max_cont_volume_float</code>.
     */
    public Double getMaxContVolumeFloat() {
        return (Double) get(13);
    }

    /**
     * Setter for
     * <code>public.smartexamaddon_base_garbage_container.volume_compressed</code>.
     */
    public SmartexamaddonBaseGarbageContainerRecord setVolumeCompressed(Double value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexamaddon_base_garbage_container.volume_compressed</code>.
     */
    public Double getVolumeCompressed() {
        return (Double) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, Double, String, Double, Double> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, Double, String, Double, Double> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.DELETED_BY;
    }

    @Override
    public Field<Boolean> field9() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.RECEIVED;
    }

    @Override
    public Field<String> field10() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.KAFKA_KEY;
    }

    @Override
    public Field<String> field11() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.NAME;
    }

    @Override
    public Field<Double> field12() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.VOLUME;
    }

    @Override
    public Field<String> field13() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.LOAD_TYPE;
    }

    @Override
    public Field<Double> field14() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.MAX_CONT_VOLUME_FLOAT;
    }

    @Override
    public Field<Double> field15() {
        return SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER.VOLUME_COMPRESSED;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public Boolean component9() {
        return getReceived();
    }

    @Override
    public String component10() {
        return getKafkaKey();
    }

    @Override
    public String component11() {
        return getName();
    }

    @Override
    public Double component12() {
        return getVolume();
    }

    @Override
    public String component13() {
        return getLoadType();
    }

    @Override
    public Double component14() {
        return getMaxContVolumeFloat();
    }

    @Override
    public Double component15() {
        return getVolumeCompressed();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public Boolean value9() {
        return getReceived();
    }

    @Override
    public String value10() {
        return getKafkaKey();
    }

    @Override
    public String value11() {
        return getName();
    }

    @Override
    public Double value12() {
        return getVolume();
    }

    @Override
    public String value13() {
        return getLoadType();
    }

    @Override
    public Double value14() {
        return getMaxContVolumeFloat();
    }

    @Override
    public Double value15() {
        return getVolumeCompressed();
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value9(Boolean value) {
        setReceived(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value10(String value) {
        setKafkaKey(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value11(String value) {
        setName(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value12(Double value) {
        setVolume(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value13(String value) {
        setLoadType(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value14(Double value) {
        setMaxContVolumeFloat(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord value15(Double value) {
        setVolumeCompressed(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseGarbageContainerRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, Boolean value9, String value10, String value11, Double value12, String value13, Double value14, Double value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamaddonBaseGarbageContainerRecord
     */
    public SmartexamaddonBaseGarbageContainerRecord() {
        super(SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);
    }

    /**
     * Create a detached, initialised SmartexamaddonBaseGarbageContainerRecord
     */
    public SmartexamaddonBaseGarbageContainerRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, Boolean received, String kafkaKey, String name, Double volume, String loadType, Double maxContVolumeFloat, Double volumeCompressed) {
        super(SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setReceived(received);
        setKafkaKey(kafkaKey);
        setName(name);
        setVolume(volume);
        setLoadType(loadType);
        setMaxContVolumeFloat(maxContVolumeFloat);
        setVolumeCompressed(volumeCompressed);
    }

    /**
     * Create a detached, initialised SmartexamaddonBaseGarbageContainerRecord
     */
    public SmartexamaddonBaseGarbageContainerRecord(nu.studer.sample.tables.pojos.SmartexamaddonBaseGarbageContainer value) {
        super(SmartexamaddonBaseGarbageContainer.SMARTEXAMADDON_BASE_GARBAGE_CONTAINER);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setReceived(value.getReceived());
            setKafkaKey(value.getKafkaKey());
            setName(value.getName());
            setVolume(value.getVolume());
            setLoadType(value.getLoadType());
            setMaxContVolumeFloat(value.getMaxContVolumeFloat());
            setVolumeCompressed(value.getVolumeCompressed());
        }
    }
}
