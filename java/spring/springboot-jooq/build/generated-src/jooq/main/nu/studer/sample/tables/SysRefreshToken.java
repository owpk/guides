/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysRefreshTokenRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRefreshToken extends TableImpl<SysRefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_refresh_token</code>
     */
    public static final SysRefreshToken SYS_REFRESH_TOKEN = new SysRefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysRefreshTokenRecord> getRecordType() {
        return SysRefreshTokenRecord.class;
    }

    /**
     * The column <code>public.sys_refresh_token.id</code>.
     */
    public final TableField<SysRefreshTokenRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_refresh_token.create_ts</code>.
     */
    public final TableField<SysRefreshTokenRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_refresh_token.token_value</code>.
     */
    public final TableField<SysRefreshTokenRecord, String> TOKEN_VALUE = createField(DSL.name("token_value"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_refresh_token.token_bytes</code>.
     */
    public final TableField<SysRefreshTokenRecord, byte[]> TOKEN_BYTES = createField(DSL.name("token_bytes"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.sys_refresh_token.authentication_bytes</code>.
     */
    public final TableField<SysRefreshTokenRecord, byte[]> AUTHENTICATION_BYTES = createField(DSL.name("authentication_bytes"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.sys_refresh_token.expiry</code>.
     */
    public final TableField<SysRefreshTokenRecord, LocalDateTime> EXPIRY = createField(DSL.name("expiry"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_refresh_token.user_login</code>.
     */
    public final TableField<SysRefreshTokenRecord, String> USER_LOGIN = createField(DSL.name("user_login"), SQLDataType.VARCHAR(50), this, "");

    private SysRefreshToken(Name alias, Table<SysRefreshTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysRefreshToken(Name alias, Table<SysRefreshTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_refresh_token</code> table reference
     */
    public SysRefreshToken(String alias) {
        this(DSL.name(alias), SYS_REFRESH_TOKEN);
    }

    /**
     * Create an aliased <code>public.sys_refresh_token</code> table reference
     */
    public SysRefreshToken(Name alias) {
        this(alias, SYS_REFRESH_TOKEN);
    }

    /**
     * Create a <code>public.sys_refresh_token</code> table reference
     */
    public SysRefreshToken() {
        this(DSL.name("sys_refresh_token"), null);
    }

    public <O extends Record> SysRefreshToken(Table<O> child, ForeignKey<O, SysRefreshTokenRecord> key) {
        super(child, key, SYS_REFRESH_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SysRefreshTokenRecord> getPrimaryKey() {
        return Keys.SYS_REFRESH_TOKEN_PKEY;
    }

    @Override
    public SysRefreshToken as(String alias) {
        return new SysRefreshToken(DSL.name(alias), this);
    }

    @Override
    public SysRefreshToken as(Name alias) {
        return new SysRefreshToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRefreshToken rename(String name) {
        return new SysRefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRefreshToken rename(Name name) {
        return new SysRefreshToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, LocalDateTime, String, byte[], byte[], LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
