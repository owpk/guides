/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecUserSettingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecUserSetting extends TableImpl<SecUserSettingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_user_setting</code>
     */
    public static final SecUserSetting SEC_USER_SETTING = new SecUserSetting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecUserSettingRecord> getRecordType() {
        return SecUserSettingRecord.class;
    }

    /**
     * The column <code>public.sec_user_setting.id</code>.
     */
    public final TableField<SecUserSettingRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_user_setting.create_ts</code>.
     */
    public final TableField<SecUserSettingRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_user_setting.created_by</code>.
     */
    public final TableField<SecUserSettingRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_user_setting.user_id</code>.
     */
    public final TableField<SecUserSettingRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_user_setting.client_type</code>.
     */
    public final TableField<SecUserSettingRecord, String> CLIENT_TYPE = createField(DSL.name("client_type"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.sec_user_setting.name</code>.
     */
    public final TableField<SecUserSettingRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_user_setting.value_</code>.
     */
    public final TableField<SecUserSettingRecord, String> VALUE_ = createField(DSL.name("value_"), SQLDataType.CLOB, this, "");

    private SecUserSetting(Name alias, Table<SecUserSettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecUserSetting(Name alias, Table<SecUserSettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_user_setting</code> table reference
     */
    public SecUserSetting(String alias) {
        this(DSL.name(alias), SEC_USER_SETTING);
    }

    /**
     * Create an aliased <code>public.sec_user_setting</code> table reference
     */
    public SecUserSetting(Name alias) {
        this(alias, SEC_USER_SETTING);
    }

    /**
     * Create a <code>public.sec_user_setting</code> table reference
     */
    public SecUserSetting() {
        this(DSL.name("sec_user_setting"), null);
    }

    public <O extends Record> SecUserSetting(Table<O> child, ForeignKey<O, SecUserSettingRecord> key) {
        super(child, key, SEC_USER_SETTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SecUserSettingRecord> getPrimaryKey() {
        return Keys.SEC_USER_SETTING_PKEY;
    }

    @Override
    public List<UniqueKey<SecUserSettingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SEC_USER_SETTING_UNIQ);
    }

    @Override
    public List<ForeignKey<SecUserSettingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_USER_SETTING__SEC_USER_SETTING_USER);
    }

    private transient SecUser _secUser;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SEC_USER_SETTING__SEC_USER_SETTING_USER);

        return _secUser;
    }

    @Override
    public SecUserSetting as(String alias) {
        return new SecUserSetting(DSL.name(alias), this);
    }

    @Override
    public SecUserSetting as(Name alias) {
        return new SecUserSetting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserSetting rename(String name) {
        return new SecUserSetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserSetting rename(Name name) {
        return new SecUserSetting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, LocalDateTime, String, UUID, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
