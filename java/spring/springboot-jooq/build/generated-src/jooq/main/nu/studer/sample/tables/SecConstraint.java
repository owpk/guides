/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecConstraintRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecConstraint extends TableImpl<SecConstraintRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_constraint</code>
     */
    public static final SecConstraint SEC_CONSTRAINT = new SecConstraint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecConstraintRecord> getRecordType() {
        return SecConstraintRecord.class;
    }

    /**
     * The column <code>public.sec_constraint.id</code>.
     */
    public final TableField<SecConstraintRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_constraint.create_ts</code>.
     */
    public final TableField<SecConstraintRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_constraint.created_by</code>.
     */
    public final TableField<SecConstraintRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_constraint.version</code>.
     */
    public final TableField<SecConstraintRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sec_constraint.update_ts</code>.
     */
    public final TableField<SecConstraintRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_constraint.updated_by</code>.
     */
    public final TableField<SecConstraintRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_constraint.delete_ts</code>.
     */
    public final TableField<SecConstraintRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_constraint.deleted_by</code>.
     */
    public final TableField<SecConstraintRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_constraint.sys_tenant_id</code>.
     */
    public final TableField<SecConstraintRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_constraint.code</code>.
     */
    public final TableField<SecConstraintRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_constraint.check_type</code>.
     */
    public final TableField<SecConstraintRecord, String> CHECK_TYPE = createField(DSL.name("check_type"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("'db'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.sec_constraint.operation_type</code>.
     */
    public final TableField<SecConstraintRecord, String> OPERATION_TYPE = createField(DSL.name("operation_type"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("'read'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.sec_constraint.entity_name</code>.
     */
    public final TableField<SecConstraintRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.sec_constraint.join_clause</code>.
     */
    public final TableField<SecConstraintRecord, String> JOIN_CLAUSE = createField(DSL.name("join_clause"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.sec_constraint.where_clause</code>.
     */
    public final TableField<SecConstraintRecord, String> WHERE_CLAUSE = createField(DSL.name("where_clause"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.sec_constraint.groovy_script</code>.
     */
    public final TableField<SecConstraintRecord, String> GROOVY_SCRIPT = createField(DSL.name("groovy_script"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sec_constraint.filter_xml</code>.
     */
    public final TableField<SecConstraintRecord, String> FILTER_XML = createField(DSL.name("filter_xml"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sec_constraint.is_active</code>.
     */
    public final TableField<SecConstraintRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sec_constraint.group_id</code>.
     */
    public final TableField<SecConstraintRecord, UUID> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.UUID, this, "");

    private SecConstraint(Name alias, Table<SecConstraintRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecConstraint(Name alias, Table<SecConstraintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_constraint</code> table reference
     */
    public SecConstraint(String alias) {
        this(DSL.name(alias), SEC_CONSTRAINT);
    }

    /**
     * Create an aliased <code>public.sec_constraint</code> table reference
     */
    public SecConstraint(Name alias) {
        this(alias, SEC_CONSTRAINT);
    }

    /**
     * Create a <code>public.sec_constraint</code> table reference
     */
    public SecConstraint() {
        this(DSL.name("sec_constraint"), null);
    }

    public <O extends Record> SecConstraint(Table<O> child, ForeignKey<O, SecConstraintRecord> key) {
        super(child, key, SEC_CONSTRAINT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_CONSTRAINT_GROUP);
    }

    @Override
    public UniqueKey<SecConstraintRecord> getPrimaryKey() {
        return Keys.SEC_CONSTRAINT_PKEY;
    }

    @Override
    public List<ForeignKey<SecConstraintRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_CONSTRAINT__SEC_CONSTRAINT_GROUP);
    }

    private transient SecGroup _secGroup;

    public SecGroup secGroup() {
        if (_secGroup == null)
            _secGroup = new SecGroup(this, Keys.SEC_CONSTRAINT__SEC_CONSTRAINT_GROUP);

        return _secGroup;
    }

    @Override
    public SecConstraint as(String alias) {
        return new SecConstraint(DSL.name(alias), this);
    }

    @Override
    public SecConstraint as(Name alias) {
        return new SecConstraint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecConstraint rename(String name) {
        return new SecConstraint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecConstraint rename(Name name) {
        return new SecConstraint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<UUID, LocalDateTime, String, Integer, LocalDateTime, String, LocalDateTime, String, String, String, String, String, String, String, String, String, String, Boolean, UUID> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
