/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamaddonBaseLicense;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamaddonBaseLicenseRecord extends UpdatableRecordImpl<SmartexamaddonBaseLicenseRecord> implements Record14<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexamaddon_base_license.id</code>.
     */
    public SmartexamaddonBaseLicenseRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.version</code>.
     */
    public SmartexamaddonBaseLicenseRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.create_ts</code>.
     */
    public SmartexamaddonBaseLicenseRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.created_by</code>.
     */
    public SmartexamaddonBaseLicenseRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.update_ts</code>.
     */
    public SmartexamaddonBaseLicenseRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.updated_by</code>.
     */
    public SmartexamaddonBaseLicenseRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.delete_ts</code>.
     */
    public SmartexamaddonBaseLicenseRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.deleted_by</code>.
     */
    public SmartexamaddonBaseLicenseRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.received</code>.
     */
    public SmartexamaddonBaseLicenseRecord setReceived(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.received</code>.
     */
    public Boolean getReceived() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.kafka_key</code>.
     */
    public SmartexamaddonBaseLicenseRecord setKafkaKey(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.kafka_key</code>.
     */
    public String getKafkaKey() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.license_cart</code>.
     */
    public SmartexamaddonBaseLicenseRecord setLicenseCart(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.license_cart</code>.
     */
    public String getLicenseCart() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.serial</code>.
     */
    public SmartexamaddonBaseLicenseRecord setSerial(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.serial</code>.
     */
    public String getSerial() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.number_</code>.
     */
    public SmartexamaddonBaseLicenseRecord setNumber_(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.number_</code>.
     */
    public String getNumber_() {
        return (String) get(12);
    }

    /**
     * Setter for <code>public.smartexamaddon_base_license.transport_id</code>.
     */
    public SmartexamaddonBaseLicenseRecord setTransportId(UUID value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexamaddon_base_license.transport_id</code>.
     */
    public UUID getTransportId() {
        return (UUID) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, UUID> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, Boolean, String, String, String, String, UUID> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.DELETED_BY;
    }

    @Override
    public Field<Boolean> field9() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.RECEIVED;
    }

    @Override
    public Field<String> field10() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.KAFKA_KEY;
    }

    @Override
    public Field<String> field11() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.LICENSE_CART;
    }

    @Override
    public Field<String> field12() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.SERIAL;
    }

    @Override
    public Field<String> field13() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.NUMBER_;
    }

    @Override
    public Field<UUID> field14() {
        return SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE.TRANSPORT_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public Boolean component9() {
        return getReceived();
    }

    @Override
    public String component10() {
        return getKafkaKey();
    }

    @Override
    public String component11() {
        return getLicenseCart();
    }

    @Override
    public String component12() {
        return getSerial();
    }

    @Override
    public String component13() {
        return getNumber_();
    }

    @Override
    public UUID component14() {
        return getTransportId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public Boolean value9() {
        return getReceived();
    }

    @Override
    public String value10() {
        return getKafkaKey();
    }

    @Override
    public String value11() {
        return getLicenseCart();
    }

    @Override
    public String value12() {
        return getSerial();
    }

    @Override
    public String value13() {
        return getNumber_();
    }

    @Override
    public UUID value14() {
        return getTransportId();
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value9(Boolean value) {
        setReceived(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value10(String value) {
        setKafkaKey(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value11(String value) {
        setLicenseCart(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value12(String value) {
        setSerial(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value13(String value) {
        setNumber_(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord value14(UUID value) {
        setTransportId(value);
        return this;
    }

    @Override
    public SmartexamaddonBaseLicenseRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, Boolean value9, String value10, String value11, String value12, String value13, UUID value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamaddonBaseLicenseRecord
     */
    public SmartexamaddonBaseLicenseRecord() {
        super(SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE);
    }

    /**
     * Create a detached, initialised SmartexamaddonBaseLicenseRecord
     */
    public SmartexamaddonBaseLicenseRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, Boolean received, String kafkaKey, String licenseCart, String serial, String number_, UUID transportId) {
        super(SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setReceived(received);
        setKafkaKey(kafkaKey);
        setLicenseCart(licenseCart);
        setSerial(serial);
        setNumber_(number_);
        setTransportId(transportId);
    }

    /**
     * Create a detached, initialised SmartexamaddonBaseLicenseRecord
     */
    public SmartexamaddonBaseLicenseRecord(nu.studer.sample.tables.pojos.SmartexamaddonBaseLicense value) {
        super(SmartexamaddonBaseLicense.SMARTEXAMADDON_BASE_LICENSE);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setReceived(value.getReceived());
            setKafkaKey(value.getKafkaKey());
            setLicenseCart(value.getLicenseCart());
            setSerial(value.getSerial());
            setNumber_(value.getNumber_());
            setTransportId(value.getTransportId());
        }
    }
}
