/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysFile extends TableImpl<SysFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_file</code>
     */
    public static final SysFile SYS_FILE = new SysFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysFileRecord> getRecordType() {
        return SysFileRecord.class;
    }

    /**
     * The column <code>public.sys_file.id</code>.
     */
    public final TableField<SysFileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_file.create_ts</code>.
     */
    public final TableField<SysFileRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_file.created_by</code>.
     */
    public final TableField<SysFileRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_file.version</code>.
     */
    public final TableField<SysFileRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sys_file.update_ts</code>.
     */
    public final TableField<SysFileRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_file.updated_by</code>.
     */
    public final TableField<SysFileRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_file.delete_ts</code>.
     */
    public final TableField<SysFileRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_file.deleted_by</code>.
     */
    public final TableField<SysFileRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_file.sys_tenant_id</code>.
     */
    public final TableField<SysFileRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_file.name</code>.
     */
    public final TableField<SysFileRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.sys_file.ext</code>.
     */
    public final TableField<SysFileRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.sys_file.file_size</code>.
     */
    public final TableField<SysFileRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sys_file.create_date</code>.
     */
    public final TableField<SysFileRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private SysFile(Name alias, Table<SysFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysFile(Name alias, Table<SysFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_file</code> table reference
     */
    public SysFile(String alias) {
        this(DSL.name(alias), SYS_FILE);
    }

    /**
     * Create an aliased <code>public.sys_file</code> table reference
     */
    public SysFile(Name alias) {
        this(alias, SYS_FILE);
    }

    /**
     * Create a <code>public.sys_file</code> table reference
     */
    public SysFile() {
        this(DSL.name("sys_file"), null);
    }

    public <O extends Record> SysFile(Table<O> child, ForeignKey<O, SysFileRecord> key) {
        super(child, key, SYS_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SysFileRecord> getPrimaryKey() {
        return Keys.SYS_FILE_PKEY;
    }

    @Override
    public SysFile as(String alias) {
        return new SysFile(DSL.name(alias), this);
    }

    @Override
    public SysFile as(Name alias) {
        return new SysFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysFile rename(String name) {
        return new SysFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysFile rename(Name name) {
        return new SysFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, LocalDateTime, String, Integer, LocalDateTime, String, LocalDateTime, String, String, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
