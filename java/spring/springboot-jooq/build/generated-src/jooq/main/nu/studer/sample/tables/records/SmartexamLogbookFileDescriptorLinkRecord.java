/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.util.UUID;

import nu.studer.sample.tables.SmartexamLogbookFileDescriptorLink;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamLogbookFileDescriptorLinkRecord extends UpdatableRecordImpl<SmartexamLogbookFileDescriptorLinkRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>public.smartexam_logbook_file_descriptor_link.logbook_id</code>.
     */
    public SmartexamLogbookFileDescriptorLinkRecord setLogbookId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_logbook_file_descriptor_link.logbook_id</code>.
     */
    public UUID getLogbookId() {
        return (UUID) get(0);
    }

    /**
     * Setter for
     * <code>public.smartexam_logbook_file_descriptor_link.file_descriptor_id</code>.
     */
    public SmartexamLogbookFileDescriptorLinkRecord setFileDescriptorId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.smartexam_logbook_file_descriptor_link.file_descriptor_id</code>.
     */
    public UUID getFileDescriptorId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.LOGBOOK_ID;
    }

    @Override
    public Field<UUID> field2() {
        return SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK.FILE_DESCRIPTOR_ID;
    }

    @Override
    public UUID component1() {
        return getLogbookId();
    }

    @Override
    public UUID component2() {
        return getFileDescriptorId();
    }

    @Override
    public UUID value1() {
        return getLogbookId();
    }

    @Override
    public UUID value2() {
        return getFileDescriptorId();
    }

    @Override
    public SmartexamLogbookFileDescriptorLinkRecord value1(UUID value) {
        setLogbookId(value);
        return this;
    }

    @Override
    public SmartexamLogbookFileDescriptorLinkRecord value2(UUID value) {
        setFileDescriptorId(value);
        return this;
    }

    @Override
    public SmartexamLogbookFileDescriptorLinkRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamLogbookFileDescriptorLinkRecord
     */
    public SmartexamLogbookFileDescriptorLinkRecord() {
        super(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);
    }

    /**
     * Create a detached, initialised SmartexamLogbookFileDescriptorLinkRecord
     */
    public SmartexamLogbookFileDescriptorLinkRecord(UUID logbookId, UUID fileDescriptorId) {
        super(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);

        setLogbookId(logbookId);
        setFileDescriptorId(fileDescriptorId);
    }

    /**
     * Create a detached, initialised SmartexamLogbookFileDescriptorLinkRecord
     */
    public SmartexamLogbookFileDescriptorLinkRecord(nu.studer.sample.tables.pojos.SmartexamLogbookFileDescriptorLink value) {
        super(SmartexamLogbookFileDescriptorLink.SMARTEXAM_LOGBOOK_FILE_DESCRIPTOR_LINK);

        if (value != null) {
            setLogbookId(value.getLogbookId());
            setFileDescriptorId(value.getFileDescriptorId());
        }
    }
}
