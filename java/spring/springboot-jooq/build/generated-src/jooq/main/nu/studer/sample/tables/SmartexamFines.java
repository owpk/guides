/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamFinesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamFines extends TableImpl<SmartexamFinesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_fines</code>
     */
    public static final SmartexamFines SMARTEXAM_FINES = new SmartexamFines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamFinesRecord> getRecordType() {
        return SmartexamFinesRecord.class;
    }

    /**
     * The column <code>public.smartexam_fines.id</code>.
     */
    public final TableField<SmartexamFinesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_fines.date_getting_fine</code>.
     */
    public final TableField<SmartexamFinesRecord, LocalDateTime> DATE_GETTING_FINE = createField(DSL.name("date_getting_fine"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_fines.pay_bill_date</code>.
     */
    public final TableField<SmartexamFinesRecord, LocalDate> PAY_BILL_DATE = createField(DSL.name("pay_bill_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexam_fines.pay_bill_amount</code>.
     */
    public final TableField<SmartexamFinesRecord, Double> PAY_BILL_AMOUNT = createField(DSL.name("pay_bill_amount"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.smartexam_fines.fine_type</code>.
     */
    public final TableField<SmartexamFinesRecord, String> FINE_TYPE = createField(DSL.name("fine_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_fines.dirver_id</code>.
     */
    public final TableField<SmartexamFinesRecord, UUID> DIRVER_ID = createField(DSL.name("dirver_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_fines.transport_id</code>.
     */
    public final TableField<SmartexamFinesRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_fines.division_id</code>.
     */
    public final TableField<SmartexamFinesRecord, UUID> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_fines.cost_organization_id</code>.
     */
    public final TableField<SmartexamFinesRecord, UUID> COST_ORGANIZATION_ID = createField(DSL.name("cost_organization_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_fines.deduct_from_salary</code>.
     */
    public final TableField<SmartexamFinesRecord, Boolean> DEDUCT_FROM_SALARY = createField(DSL.name("deduct_from_salary"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_fines.bill_id</code>.
     */
    public final TableField<SmartexamFinesRecord, String> BILL_ID = createField(DSL.name("bill_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_fines.bill_payed</code>.
     */
    public final TableField<SmartexamFinesRecord, Boolean> BILL_PAYED = createField(DSL.name("bill_payed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_fines.supplier_id</code>.
     */
    public final TableField<SmartexamFinesRecord, UUID> SUPPLIER_ID = createField(DSL.name("supplier_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_fines.article_text</code>.
     */
    public final TableField<SmartexamFinesRecord, String> ARTICLE_TEXT = createField(DSL.name("article_text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_fines.bill_about</code>.
     */
    public final TableField<SmartexamFinesRecord, String> BILL_ABOUT = createField(DSL.name("bill_about"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_fines.discount_date</code>.
     */
    public final TableField<SmartexamFinesRecord, LocalDate> DISCOUNT_DATE = createField(DSL.name("discount_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.smartexam_fines.debiting_type</code>.
     */
    public final TableField<SmartexamFinesRecord, String> DEBITING_TYPE = createField(DSL.name("debiting_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_fines.bills_number</code>.
     */
    public final TableField<SmartexamFinesRecord, String> BILLS_NUMBER = createField(DSL.name("bills_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_fines.amount_with_discount</code>.
     */
    public final TableField<SmartexamFinesRecord, Double> AMOUNT_WITH_DISCOUNT = createField(DSL.name("amount_with_discount"), SQLDataType.DOUBLE, this, "");

    private SmartexamFines(Name alias, Table<SmartexamFinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamFines(Name alias, Table<SmartexamFinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_fines</code> table reference
     */
    public SmartexamFines(String alias) {
        this(DSL.name(alias), SMARTEXAM_FINES);
    }

    /**
     * Create an aliased <code>public.smartexam_fines</code> table reference
     */
    public SmartexamFines(Name alias) {
        this(alias, SMARTEXAM_FINES);
    }

    /**
     * Create a <code>public.smartexam_fines</code> table reference
     */
    public SmartexamFines() {
        this(DSL.name("smartexam_fines"), null);
    }

    public <O extends Record> SmartexamFines(Table<O> child, ForeignKey<O, SmartexamFinesRecord> key) {
        super(child, key, SMARTEXAM_FINES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_FINES_ON_COST_ORGANIZATION, Indexes.IDX_SMARTEXAM_FINES_ON_DIRVER, Indexes.IDX_SMARTEXAM_FINES_ON_DIVISION, Indexes.IDX_SMARTEXAM_FINES_ON_SUPPLIER, Indexes.IDX_SMARTEXAM_FINES_ON_TRANSPORT);
    }

    @Override
    public UniqueKey<SmartexamFinesRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_FINES_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamFinesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIRVER, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_TRANSPORT, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIVISION, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_COST_ORGANIZATION, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_SUPPLIER);
    }

    private transient SmartexamEmployee _smartexamEmployee;
    private transient SmartexamTransportFrom1c _smartexamTransportFrom1c;
    private transient SmartmonDivision _smartmonDivision;
    private transient SmartexamOrganization _smartexamOrganization;
    private transient SmartexamBillsSupplier _smartexamBillsSupplier;

    public SmartexamEmployee smartexamEmployee() {
        if (_smartexamEmployee == null)
            _smartexamEmployee = new SmartexamEmployee(this, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIRVER);

        return _smartexamEmployee;
    }

    public SmartexamTransportFrom1c smartexamTransportFrom1c() {
        if (_smartexamTransportFrom1c == null)
            _smartexamTransportFrom1c = new SmartexamTransportFrom1c(this, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_TRANSPORT);

        return _smartexamTransportFrom1c;
    }

    public SmartmonDivision smartmonDivision() {
        if (_smartmonDivision == null)
            _smartmonDivision = new SmartmonDivision(this, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_DIVISION);

        return _smartmonDivision;
    }

    public SmartexamOrganization smartexamOrganization() {
        if (_smartexamOrganization == null)
            _smartexamOrganization = new SmartexamOrganization(this, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_COST_ORGANIZATION);

        return _smartexamOrganization;
    }

    public SmartexamBillsSupplier smartexamBillsSupplier() {
        if (_smartexamBillsSupplier == null)
            _smartexamBillsSupplier = new SmartexamBillsSupplier(this, Keys.SMARTEXAM_FINES__FK_SMARTEXAM_FINES_ON_SUPPLIER);

        return _smartexamBillsSupplier;
    }

    @Override
    public SmartexamFines as(String alias) {
        return new SmartexamFines(DSL.name(alias), this);
    }

    @Override
    public SmartexamFines as(Name alias) {
        return new SmartexamFines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamFines rename(String name) {
        return new SmartexamFines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamFines rename(Name name) {
        return new SmartexamFines(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, LocalDateTime, LocalDate, Double, String, UUID, UUID, UUID, UUID, Boolean, String, Boolean, UUID, String, String, LocalDate, String, String, Double> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
