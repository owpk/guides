/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamLogbook;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamLogbookRecord extends UpdatableRecordImpl<SmartexamLogbookRecord> implements Record15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, Integer, String, UUID, Boolean, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_logbook.id</code>.
     */
    public SmartexamLogbookRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_logbook.version</code>.
     */
    public SmartexamLogbookRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_logbook.create_ts</code>.
     */
    public SmartexamLogbookRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexam_logbook.created_by</code>.
     */
    public SmartexamLogbookRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_logbook.update_ts</code>.
     */
    public SmartexamLogbookRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexam_logbook.updated_by</code>.
     */
    public SmartexamLogbookRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_logbook.delete_ts</code>.
     */
    public SmartexamLogbookRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexam_logbook.deleted_by</code>.
     */
    public SmartexamLogbookRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_logbook.employee_id</code>.
     */
    public SmartexamLogbookRecord setEmployeeId(UUID value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.employee_id</code>.
     */
    public UUID getEmployeeId() {
        return (UUID) get(8);
    }

    /**
     * Setter for <code>public.smartexam_logbook.text</code>.
     */
    public SmartexamLogbookRecord setText(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.text</code>.
     */
    public String getText() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.smartexam_logbook.status</code>.
     */
    public SmartexamLogbookRecord setStatus(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.status</code>.
     */
    public Integer getStatus() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>public.smartexam_logbook.comment_</code>.
     */
    public SmartexamLogbookRecord setComment_(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.comment_</code>.
     */
    public String getComment_() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.smartexam_logbook.responsible_id</code>.
     */
    public SmartexamLogbookRecord setResponsibleId(UUID value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.responsible_id</code>.
     */
    public UUID getResponsibleId() {
        return (UUID) get(12);
    }

    /**
     * Setter for <code>public.smartexam_logbook.problems</code>.
     */
    public SmartexamLogbookRecord setProblems(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.problems</code>.
     */
    public Boolean getProblems() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>public.smartexam_logbook.transport_id</code>.
     */
    public SmartexamLogbookRecord setTransportId(UUID value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_logbook.transport_id</code>.
     */
    public UUID getTransportId() {
        return (UUID) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, Integer, String, UUID, Boolean, UUID> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, Integer, String, UUID, Boolean, UUID> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.DELETED_BY;
    }

    @Override
    public Field<UUID> field9() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.EMPLOYEE_ID;
    }

    @Override
    public Field<String> field10() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.TEXT;
    }

    @Override
    public Field<Integer> field11() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.STATUS;
    }

    @Override
    public Field<String> field12() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.COMMENT_;
    }

    @Override
    public Field<UUID> field13() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.RESPONSIBLE_ID;
    }

    @Override
    public Field<Boolean> field14() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.PROBLEMS;
    }

    @Override
    public Field<UUID> field15() {
        return SmartexamLogbook.SMARTEXAM_LOGBOOK.TRANSPORT_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public UUID component9() {
        return getEmployeeId();
    }

    @Override
    public String component10() {
        return getText();
    }

    @Override
    public Integer component11() {
        return getStatus();
    }

    @Override
    public String component12() {
        return getComment_();
    }

    @Override
    public UUID component13() {
        return getResponsibleId();
    }

    @Override
    public Boolean component14() {
        return getProblems();
    }

    @Override
    public UUID component15() {
        return getTransportId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public UUID value9() {
        return getEmployeeId();
    }

    @Override
    public String value10() {
        return getText();
    }

    @Override
    public Integer value11() {
        return getStatus();
    }

    @Override
    public String value12() {
        return getComment_();
    }

    @Override
    public UUID value13() {
        return getResponsibleId();
    }

    @Override
    public Boolean value14() {
        return getProblems();
    }

    @Override
    public UUID value15() {
        return getTransportId();
    }

    @Override
    public SmartexamLogbookRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value9(UUID value) {
        setEmployeeId(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value10(String value) {
        setText(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value11(Integer value) {
        setStatus(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value12(String value) {
        setComment_(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value13(UUID value) {
        setResponsibleId(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value14(Boolean value) {
        setProblems(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord value15(UUID value) {
        setTransportId(value);
        return this;
    }

    @Override
    public SmartexamLogbookRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, UUID value9, String value10, Integer value11, String value12, UUID value13, Boolean value14, UUID value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamLogbookRecord
     */
    public SmartexamLogbookRecord() {
        super(SmartexamLogbook.SMARTEXAM_LOGBOOK);
    }

    /**
     * Create a detached, initialised SmartexamLogbookRecord
     */
    public SmartexamLogbookRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, UUID employeeId, String text, Integer status, String comment_, UUID responsibleId, Boolean problems, UUID transportId) {
        super(SmartexamLogbook.SMARTEXAM_LOGBOOK);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setEmployeeId(employeeId);
        setText(text);
        setStatus(status);
        setComment_(comment_);
        setResponsibleId(responsibleId);
        setProblems(problems);
        setTransportId(transportId);
    }

    /**
     * Create a detached, initialised SmartexamLogbookRecord
     */
    public SmartexamLogbookRecord(nu.studer.sample.tables.pojos.SmartexamLogbook value) {
        super(SmartexamLogbook.SMARTEXAM_LOGBOOK);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setEmployeeId(value.getEmployeeId());
            setText(value.getText());
            setStatus(value.getStatus());
            setComment_(value.getComment_());
            setResponsibleId(value.getResponsibleId());
            setProblems(value.getProblems());
            setTransportId(value.getTransportId());
        }
    }
}
