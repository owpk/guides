/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SysJmxInstanceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysJmxInstance extends TableImpl<SysJmxInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sys_jmx_instance</code>
     */
    public static final SysJmxInstance SYS_JMX_INSTANCE = new SysJmxInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysJmxInstanceRecord> getRecordType() {
        return SysJmxInstanceRecord.class;
    }

    /**
     * The column <code>public.sys_jmx_instance.id</code>.
     */
    public final TableField<SysJmxInstanceRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sys_jmx_instance.create_ts</code>.
     */
    public final TableField<SysJmxInstanceRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_jmx_instance.created_by</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_jmx_instance.version</code>.
     */
    public final TableField<SysJmxInstanceRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sys_jmx_instance.update_ts</code>.
     */
    public final TableField<SysJmxInstanceRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_jmx_instance.updated_by</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_jmx_instance.delete_ts</code>.
     */
    public final TableField<SysJmxInstanceRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sys_jmx_instance.deleted_by</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sys_jmx_instance.node_name</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> NODE_NAME = createField(DSL.name("node_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sys_jmx_instance.address</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.sys_jmx_instance.login</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sys_jmx_instance.password</code>.
     */
    public final TableField<SysJmxInstanceRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private SysJmxInstance(Name alias, Table<SysJmxInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysJmxInstance(Name alias, Table<SysJmxInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sys_jmx_instance</code> table reference
     */
    public SysJmxInstance(String alias) {
        this(DSL.name(alias), SYS_JMX_INSTANCE);
    }

    /**
     * Create an aliased <code>public.sys_jmx_instance</code> table reference
     */
    public SysJmxInstance(Name alias) {
        this(alias, SYS_JMX_INSTANCE);
    }

    /**
     * Create a <code>public.sys_jmx_instance</code> table reference
     */
    public SysJmxInstance() {
        this(DSL.name("sys_jmx_instance"), null);
    }

    public <O extends Record> SysJmxInstance(Table<O> child, ForeignKey<O, SysJmxInstanceRecord> key) {
        super(child, key, SYS_JMX_INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SysJmxInstanceRecord> getPrimaryKey() {
        return Keys.SYS_JMX_INSTANCE_PKEY;
    }

    @Override
    public SysJmxInstance as(String alias) {
        return new SysJmxInstance(DSL.name(alias), this);
    }

    @Override
    public SysJmxInstance as(Name alias) {
        return new SysJmxInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysJmxInstance rename(String name) {
        return new SysJmxInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysJmxInstance rename(Name name) {
        return new SysJmxInstance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, LocalDateTime, String, Integer, LocalDateTime, String, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
