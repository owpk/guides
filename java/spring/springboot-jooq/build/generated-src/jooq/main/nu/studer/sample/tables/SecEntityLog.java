/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SecEntityLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecEntityLog extends TableImpl<SecEntityLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sec_entity_log</code>
     */
    public static final SecEntityLog SEC_ENTITY_LOG = new SecEntityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecEntityLogRecord> getRecordType() {
        return SecEntityLogRecord.class;
    }

    /**
     * The column <code>public.sec_entity_log.id</code>.
     */
    public final TableField<SecEntityLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.sec_entity_log.create_ts</code>.
     */
    public final TableField<SecEntityLogRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_entity_log.created_by</code>.
     */
    public final TableField<SecEntityLogRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.sec_entity_log.sys_tenant_id</code>.
     */
    public final TableField<SecEntityLogRecord, String> SYS_TENANT_ID = createField(DSL.name("sys_tenant_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_entity_log.event_ts</code>.
     */
    public final TableField<SecEntityLogRecord, LocalDateTime> EVENT_TS = createField(DSL.name("event_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.sec_entity_log.user_id</code>.
     */
    public final TableField<SecEntityLogRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_entity_log.change_type</code>.
     */
    public final TableField<SecEntityLogRecord, String> CHANGE_TYPE = createField(DSL.name("change_type"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.sec_entity_log.entity</code>.
     */
    public final TableField<SecEntityLogRecord, String> ENTITY = createField(DSL.name("entity"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.sec_entity_log.entity_instance_name</code>.
     */
    public final TableField<SecEntityLogRecord, String> ENTITY_INSTANCE_NAME = createField(DSL.name("entity_instance_name"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.sec_entity_log.entity_id</code>.
     */
    public final TableField<SecEntityLogRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.sec_entity_log.string_entity_id</code>.
     */
    public final TableField<SecEntityLogRecord, String> STRING_ENTITY_ID = createField(DSL.name("string_entity_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sec_entity_log.int_entity_id</code>.
     */
    public final TableField<SecEntityLogRecord, Integer> INT_ENTITY_ID = createField(DSL.name("int_entity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sec_entity_log.long_entity_id</code>.
     */
    public final TableField<SecEntityLogRecord, Long> LONG_ENTITY_ID = createField(DSL.name("long_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sec_entity_log.changes</code>.
     */
    public final TableField<SecEntityLogRecord, String> CHANGES = createField(DSL.name("changes"), SQLDataType.CLOB, this, "");

    private SecEntityLog(Name alias, Table<SecEntityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecEntityLog(Name alias, Table<SecEntityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sec_entity_log</code> table reference
     */
    public SecEntityLog(String alias) {
        this(DSL.name(alias), SEC_ENTITY_LOG);
    }

    /**
     * Create an aliased <code>public.sec_entity_log</code> table reference
     */
    public SecEntityLog(Name alias) {
        this(alias, SEC_ENTITY_LOG);
    }

    /**
     * Create a <code>public.sec_entity_log</code> table reference
     */
    public SecEntityLog() {
        this(DSL.name("sec_entity_log"), null);
    }

    public <O extends Record> SecEntityLog(Table<O> child, ForeignKey<O, SecEntityLogRecord> key) {
        super(child, key, SEC_ENTITY_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SEC_ENTITY_LOG_ENTITY_ID, Indexes.IDX_SEC_ENTITY_LOG_IENTITY_ID, Indexes.IDX_SEC_ENTITY_LOG_LENTITY_ID, Indexes.IDX_SEC_ENTITY_LOG_SENTITY_ID);
    }

    @Override
    public UniqueKey<SecEntityLogRecord> getPrimaryKey() {
        return Keys.SEC_ENTITY_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<SecEntityLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEC_ENTITY_LOG__FK_SEC_ENTITY_LOG_USER);
    }

    private transient SecUser _secUser;

    public SecUser secUser() {
        if (_secUser == null)
            _secUser = new SecUser(this, Keys.SEC_ENTITY_LOG__FK_SEC_ENTITY_LOG_USER);

        return _secUser;
    }

    @Override
    public SecEntityLog as(String alias) {
        return new SecEntityLog(DSL.name(alias), this);
    }

    @Override
    public SecEntityLog as(Name alias) {
        return new SecEntityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecEntityLog rename(String name) {
        return new SecEntityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecEntityLog rename(Name name) {
        return new SecEntityLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, LocalDateTime, String, String, LocalDateTime, UUID, String, String, String, UUID, String, Integer, Long, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
