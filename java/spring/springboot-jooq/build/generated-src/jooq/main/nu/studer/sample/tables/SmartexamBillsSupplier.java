/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamBillsSupplierRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamBillsSupplier extends TableImpl<SmartexamBillsSupplierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_bills_supplier</code>
     */
    public static final SmartexamBillsSupplier SMARTEXAM_BILLS_SUPPLIER = new SmartexamBillsSupplier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamBillsSupplierRecord> getRecordType() {
        return SmartexamBillsSupplierRecord.class;
    }

    /**
     * The column <code>public.smartexam_bills_supplier.id</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.version</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.create_ts</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.created_by</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.update_ts</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.updated_by</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.delete_ts</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.deleted_by</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.tax</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> TAX = createField(DSL.name("tax"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.kpp</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> KPP = createField(DSL.name("kpp"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_bills_supplier.name</code>.
     */
    public final TableField<SmartexamBillsSupplierRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamBillsSupplier(Name alias, Table<SmartexamBillsSupplierRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamBillsSupplier(Name alias, Table<SmartexamBillsSupplierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_bills_supplier</code> table
     * reference
     */
    public SmartexamBillsSupplier(String alias) {
        this(DSL.name(alias), SMARTEXAM_BILLS_SUPPLIER);
    }

    /**
     * Create an aliased <code>public.smartexam_bills_supplier</code> table
     * reference
     */
    public SmartexamBillsSupplier(Name alias) {
        this(alias, SMARTEXAM_BILLS_SUPPLIER);
    }

    /**
     * Create a <code>public.smartexam_bills_supplier</code> table reference
     */
    public SmartexamBillsSupplier() {
        this(DSL.name("smartexam_bills_supplier"), null);
    }

    public <O extends Record> SmartexamBillsSupplier(Table<O> child, ForeignKey<O, SmartexamBillsSupplierRecord> key) {
        super(child, key, SMARTEXAM_BILLS_SUPPLIER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_BILLS_SUPPLIER_UK_TAX);
    }

    @Override
    public UniqueKey<SmartexamBillsSupplierRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_BILLS_SUPPLIER_PKEY;
    }

    @Override
    public SmartexamBillsSupplier as(String alias) {
        return new SmartexamBillsSupplier(DSL.name(alias), this);
    }

    @Override
    public SmartexamBillsSupplier as(Name alias) {
        return new SmartexamBillsSupplier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamBillsSupplier rename(String name) {
        return new SmartexamBillsSupplier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamBillsSupplier rename(Name name) {
        return new SmartexamBillsSupplier(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
