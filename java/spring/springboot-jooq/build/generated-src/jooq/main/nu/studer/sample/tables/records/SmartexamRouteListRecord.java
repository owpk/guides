/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import nu.studer.sample.tables.SmartexamRouteList;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRouteListRecord extends UpdatableRecordImpl<SmartexamRouteListRecord> implements Record16<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, LocalDateTime, UUID, String, LocalDateTime, Double, UUID, Integer, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.smartexam_route_list.id</code>.
     */
    public SmartexamRouteListRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.smartexam_route_list.version</code>.
     */
    public SmartexamRouteListRecord setVersion(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.smartexam_route_list.create_ts</code>.
     */
    public SmartexamRouteListRecord setCreateTs(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.smartexam_route_list.created_by</code>.
     */
    public SmartexamRouteListRecord setCreatedBy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.created_by</code>.
     */
    public String getCreatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.smartexam_route_list.update_ts</code>.
     */
    public SmartexamRouteListRecord setUpdateTs(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.smartexam_route_list.updated_by</code>.
     */
    public SmartexamRouteListRecord setUpdatedBy(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.updated_by</code>.
     */
    public String getUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.smartexam_route_list.delete_ts</code>.
     */
    public SmartexamRouteListRecord setDeleteTs(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.smartexam_route_list.deleted_by</code>.
     */
    public SmartexamRouteListRecord setDeletedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.deleted_by</code>.
     */
    public String getDeletedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.smartexam_route_list.date_</code>.
     */
    public SmartexamRouteListRecord setDate_(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.date_</code>.
     */
    public LocalDateTime getDate_() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>public.smartexam_route_list.driver_id</code>.
     */
    public SmartexamRouteListRecord setDriverId(UUID value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.driver_id</code>.
     */
    public UUID getDriverId() {
        return (UUID) get(9);
    }

    /**
     * Setter for <code>public.smartexam_route_list.change_</code>.
     */
    public SmartexamRouteListRecord setChange_(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.change_</code>.
     */
    public String getChange_() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.smartexam_route_list.date_of_departure</code>.
     */
    public SmartexamRouteListRecord setDateOfDeparture(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.date_of_departure</code>.
     */
    public LocalDateTime getDateOfDeparture() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>public.smartexam_route_list.speedometer</code>.
     */
    public SmartexamRouteListRecord setSpeedometer(Double value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.speedometer</code>.
     */
    public Double getSpeedometer() {
        return (Double) get(12);
    }

    /**
     * Setter for <code>public.smartexam_route_list.division_id</code>.
     */
    public SmartexamRouteListRecord setDivisionId(UUID value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.division_id</code>.
     */
    public UUID getDivisionId() {
        return (UUID) get(13);
    }

    /**
     * Setter for <code>public.smartexam_route_list.engine_hours</code>.
     */
    public SmartexamRouteListRecord setEngineHours(Integer value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.engine_hours</code>.
     */
    public Integer getEngineHours() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>public.smartexam_route_list.transport_id</code>.
     */
    public SmartexamRouteListRecord setTransportId(UUID value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.smartexam_route_list.transport_id</code>.
     */
    public UUID getTransportId() {
        return (UUID) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, LocalDateTime, UUID, String, LocalDateTime, Double, UUID, Integer, UUID> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, LocalDateTime, UUID, String, LocalDateTime, Double, UUID, Integer, UUID> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.VERSION;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.CREATE_TS;
    }

    @Override
    public Field<String> field4() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.UPDATE_TS;
    }

    @Override
    public Field<String> field6() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DELETE_TS;
    }

    @Override
    public Field<String> field8() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DELETED_BY;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DATE_;
    }

    @Override
    public Field<UUID> field10() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DRIVER_ID;
    }

    @Override
    public Field<String> field11() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.CHANGE_;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DATE_OF_DEPARTURE;
    }

    @Override
    public Field<Double> field13() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.SPEEDOMETER;
    }

    @Override
    public Field<UUID> field14() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.DIVISION_ID;
    }

    @Override
    public Field<Integer> field15() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.ENGINE_HOURS;
    }

    @Override
    public Field<UUID> field16() {
        return SmartexamRouteList.SMARTEXAM_ROUTE_LIST.TRANSPORT_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTs();
    }

    @Override
    public String component4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTs();
    }

    @Override
    public String component6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component7() {
        return getDeleteTs();
    }

    @Override
    public String component8() {
        return getDeletedBy();
    }

    @Override
    public LocalDateTime component9() {
        return getDate_();
    }

    @Override
    public UUID component10() {
        return getDriverId();
    }

    @Override
    public String component11() {
        return getChange_();
    }

    @Override
    public LocalDateTime component12() {
        return getDateOfDeparture();
    }

    @Override
    public Double component13() {
        return getSpeedometer();
    }

    @Override
    public UUID component14() {
        return getDivisionId();
    }

    @Override
    public Integer component15() {
        return getEngineHours();
    }

    @Override
    public UUID component16() {
        return getTransportId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTs();
    }

    @Override
    public String value4() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTs();
    }

    @Override
    public String value6() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value7() {
        return getDeleteTs();
    }

    @Override
    public String value8() {
        return getDeletedBy();
    }

    @Override
    public LocalDateTime value9() {
        return getDate_();
    }

    @Override
    public UUID value10() {
        return getDriverId();
    }

    @Override
    public String value11() {
        return getChange_();
    }

    @Override
    public LocalDateTime value12() {
        return getDateOfDeparture();
    }

    @Override
    public Double value13() {
        return getSpeedometer();
    }

    @Override
    public UUID value14() {
        return getDivisionId();
    }

    @Override
    public Integer value15() {
        return getEngineHours();
    }

    @Override
    public UUID value16() {
        return getTransportId();
    }

    @Override
    public SmartexamRouteListRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value3(LocalDateTime value) {
        setCreateTs(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value4(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value5(LocalDateTime value) {
        setUpdateTs(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value6(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value7(LocalDateTime value) {
        setDeleteTs(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value8(String value) {
        setDeletedBy(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value9(LocalDateTime value) {
        setDate_(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value10(UUID value) {
        setDriverId(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value11(String value) {
        setChange_(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value12(LocalDateTime value) {
        setDateOfDeparture(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value13(Double value) {
        setSpeedometer(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value14(UUID value) {
        setDivisionId(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value15(Integer value) {
        setEngineHours(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord value16(UUID value) {
        setTransportId(value);
        return this;
    }

    @Override
    public SmartexamRouteListRecord values(UUID value1, Integer value2, LocalDateTime value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, LocalDateTime value9, UUID value10, String value11, LocalDateTime value12, Double value13, UUID value14, Integer value15, UUID value16) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SmartexamRouteListRecord
     */
    public SmartexamRouteListRecord() {
        super(SmartexamRouteList.SMARTEXAM_ROUTE_LIST);
    }

    /**
     * Create a detached, initialised SmartexamRouteListRecord
     */
    public SmartexamRouteListRecord(UUID id, Integer version, LocalDateTime createTs, String createdBy, LocalDateTime updateTs, String updatedBy, LocalDateTime deleteTs, String deletedBy, LocalDateTime date_, UUID driverId, String change_, LocalDateTime dateOfDeparture, Double speedometer, UUID divisionId, Integer engineHours, UUID transportId) {
        super(SmartexamRouteList.SMARTEXAM_ROUTE_LIST);

        setId(id);
        setVersion(version);
        setCreateTs(createTs);
        setCreatedBy(createdBy);
        setUpdateTs(updateTs);
        setUpdatedBy(updatedBy);
        setDeleteTs(deleteTs);
        setDeletedBy(deletedBy);
        setDate_(date_);
        setDriverId(driverId);
        setChange_(change_);
        setDateOfDeparture(dateOfDeparture);
        setSpeedometer(speedometer);
        setDivisionId(divisionId);
        setEngineHours(engineHours);
        setTransportId(transportId);
    }

    /**
     * Create a detached, initialised SmartexamRouteListRecord
     */
    public SmartexamRouteListRecord(nu.studer.sample.tables.pojos.SmartexamRouteList value) {
        super(SmartexamRouteList.SMARTEXAM_ROUTE_LIST);

        if (value != null) {
            setId(value.getId());
            setVersion(value.getVersion());
            setCreateTs(value.getCreateTs());
            setCreatedBy(value.getCreatedBy());
            setUpdateTs(value.getUpdateTs());
            setUpdatedBy(value.getUpdatedBy());
            setDeleteTs(value.getDeleteTs());
            setDeletedBy(value.getDeletedBy());
            setDate_(value.getDate_());
            setDriverId(value.getDriverId());
            setChange_(value.getChange_());
            setDateOfDeparture(value.getDateOfDeparture());
            setSpeedometer(value.getSpeedometer());
            setDivisionId(value.getDivisionId());
            setEngineHours(value.getEngineHours());
            setTransportId(value.getTransportId());
        }
    }
}
