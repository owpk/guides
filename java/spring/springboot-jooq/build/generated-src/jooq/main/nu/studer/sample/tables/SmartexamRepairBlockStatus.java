/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamRepairBlockStatusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamRepairBlockStatus extends TableImpl<SmartexamRepairBlockStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_repair_block_status</code>
     */
    public static final SmartexamRepairBlockStatus SMARTEXAM_REPAIR_BLOCK_STATUS = new SmartexamRepairBlockStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamRepairBlockStatusRecord> getRecordType() {
        return SmartexamRepairBlockStatusRecord.class;
    }

    /**
     * The column <code>public.smartexam_repair_block_status.id</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.version</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.create_ts</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.created_by</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.update_ts</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.updated_by</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.delete_ts</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.deleted_by</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_repair_block_status.repair_block_id</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, UUID> REPAIR_BLOCK_ID = createField(DSL.name("repair_block_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.plan_id</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, UUID> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_repair_block_status.date_time_start</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, LocalDateTime> DATE_TIME_START = createField(DSL.name("date_time_start"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_repair_block_status.date_time_end</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, LocalDateTime> DATE_TIME_END = createField(DSL.name("date_time_end"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_repair_block_status.status</code>.
     */
    public final TableField<SmartexamRepairBlockStatusRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    private SmartexamRepairBlockStatus(Name alias, Table<SmartexamRepairBlockStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamRepairBlockStatus(Name alias, Table<SmartexamRepairBlockStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_repair_block_status</code> table
     * reference
     */
    public SmartexamRepairBlockStatus(String alias) {
        this(DSL.name(alias), SMARTEXAM_REPAIR_BLOCK_STATUS);
    }

    /**
     * Create an aliased <code>public.smartexam_repair_block_status</code> table
     * reference
     */
    public SmartexamRepairBlockStatus(Name alias) {
        this(alias, SMARTEXAM_REPAIR_BLOCK_STATUS);
    }

    /**
     * Create a <code>public.smartexam_repair_block_status</code> table
     * reference
     */
    public SmartexamRepairBlockStatus() {
        this(DSL.name("smartexam_repair_block_status"), null);
    }

    public <O extends Record> SmartexamRepairBlockStatus(Table<O> child, ForeignKey<O, SmartexamRepairBlockStatusRecord> key) {
        super(child, key, SMARTEXAM_REPAIR_BLOCK_STATUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_PLAN, Indexes.IDX_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_REPAIR_BLOCK);
    }

    @Override
    public UniqueKey<SmartexamRepairBlockStatusRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_REPAIR_BLOCK_STATUS_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamRepairBlockStatusRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_REPAIR_BLOCK, Keys.SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_PLAN);
    }

    private transient SmartexamRepairBlock _smartexamRepairBlock;
    private transient SmartexamPlan _smartexamPlan;

    public SmartexamRepairBlock smartexamRepairBlock() {
        if (_smartexamRepairBlock == null)
            _smartexamRepairBlock = new SmartexamRepairBlock(this, Keys.SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_REPAIR_BLOCK);

        return _smartexamRepairBlock;
    }

    public SmartexamPlan smartexamPlan() {
        if (_smartexamPlan == null)
            _smartexamPlan = new SmartexamPlan(this, Keys.SMARTEXAM_REPAIR_BLOCK_STATUS__FK_SMARTEXAM_REPAIR_BLOCK_STATUS_ON_PLAN);

        return _smartexamPlan;
    }

    @Override
    public SmartexamRepairBlockStatus as(String alias) {
        return new SmartexamRepairBlockStatus(DSL.name(alias), this);
    }

    @Override
    public SmartexamRepairBlockStatus as(Name alias) {
        return new SmartexamRepairBlockStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRepairBlockStatus rename(String name) {
        return new SmartexamRepairBlockStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamRepairBlockStatus rename(Name name) {
        return new SmartexamRepairBlockStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, UUID, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
