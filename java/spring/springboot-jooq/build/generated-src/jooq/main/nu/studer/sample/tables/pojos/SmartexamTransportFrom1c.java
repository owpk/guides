/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.pojos;


import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamTransportFrom1c implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID          id;
    private final String        name;
    private final Integer       createYear;
    private final String        vin;
    private final UUID          organizationId;
    private final UUID          costsOrganizationId;
    private final String        lizing;
    private final LocalDate     dateGibddSet;
    private final String        status;
    private final UUID          licenseId;
    private final String        regNum;
    private final UUID          transportTypeId;
    private final String        model;
    private final Integer       onlineGibddId;
    private final Boolean       received;
    private final Double        width;
    private final String        deletedBy;
    private final UUID          baseGarbageContainerId;
    private final LocalDateTime updateTs;
    private final String        gpsId;
    private final Integer       version;
    private final LocalDateTime createTs;
    private final String        kafkaKey;
    private final Double        height;
    private final Double        _Long;
    private final Double        consumption;
    private final String        updatedBy;
    private final LocalDateTime deleteTs;
    private final String        createdBy;
    private final String        gpsSystem;

    public SmartexamTransportFrom1c(SmartexamTransportFrom1c value) {
        this.id = value.id;
        this.name = value.name;
        this.createYear = value.createYear;
        this.vin = value.vin;
        this.organizationId = value.organizationId;
        this.costsOrganizationId = value.costsOrganizationId;
        this.lizing = value.lizing;
        this.dateGibddSet = value.dateGibddSet;
        this.status = value.status;
        this.licenseId = value.licenseId;
        this.regNum = value.regNum;
        this.transportTypeId = value.transportTypeId;
        this.model = value.model;
        this.onlineGibddId = value.onlineGibddId;
        this.received = value.received;
        this.width = value.width;
        this.deletedBy = value.deletedBy;
        this.baseGarbageContainerId = value.baseGarbageContainerId;
        this.updateTs = value.updateTs;
        this.gpsId = value.gpsId;
        this.version = value.version;
        this.createTs = value.createTs;
        this.kafkaKey = value.kafkaKey;
        this.height = value.height;
        this._Long = value._Long;
        this.consumption = value.consumption;
        this.updatedBy = value.updatedBy;
        this.deleteTs = value.deleteTs;
        this.createdBy = value.createdBy;
        this.gpsSystem = value.gpsSystem;
    }

    public SmartexamTransportFrom1c(
        UUID          id,
        String        name,
        Integer       createYear,
        String        vin,
        UUID          organizationId,
        UUID          costsOrganizationId,
        String        lizing,
        LocalDate     dateGibddSet,
        String        status,
        UUID          licenseId,
        String        regNum,
        UUID          transportTypeId,
        String        model,
        Integer       onlineGibddId,
        Boolean       received,
        Double        width,
        String        deletedBy,
        UUID          baseGarbageContainerId,
        LocalDateTime updateTs,
        String        gpsId,
        Integer       version,
        LocalDateTime createTs,
        String        kafkaKey,
        Double        height,
        Double        _Long,
        Double        consumption,
        String        updatedBy,
        LocalDateTime deleteTs,
        String        createdBy,
        String        gpsSystem
    ) {
        this.id = id;
        this.name = name;
        this.createYear = createYear;
        this.vin = vin;
        this.organizationId = organizationId;
        this.costsOrganizationId = costsOrganizationId;
        this.lizing = lizing;
        this.dateGibddSet = dateGibddSet;
        this.status = status;
        this.licenseId = licenseId;
        this.regNum = regNum;
        this.transportTypeId = transportTypeId;
        this.model = model;
        this.onlineGibddId = onlineGibddId;
        this.received = received;
        this.width = width;
        this.deletedBy = deletedBy;
        this.baseGarbageContainerId = baseGarbageContainerId;
        this.updateTs = updateTs;
        this.gpsId = gpsId;
        this.version = version;
        this.createTs = createTs;
        this.kafkaKey = kafkaKey;
        this.height = height;
        this._Long = _Long;
        this.consumption = consumption;
        this.updatedBy = updatedBy;
        this.deleteTs = deleteTs;
        this.createdBy = createdBy;
        this.gpsSystem = gpsSystem;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.create_year</code>.
     */
    public Integer getCreateYear() {
        return this.createYear;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.vin</code>.
     */
    public String getVin() {
        return this.vin;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_from1c.organization_id</code>.
     */
    public UUID getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_from1c.costs_organization_id</code>.
     */
    public UUID getCostsOrganizationId() {
        return this.costsOrganizationId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.lizing</code>.
     */
    public String getLizing() {
        return this.lizing;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.date_gibdd_set</code>.
     */
    public LocalDate getDateGibddSet() {
        return this.dateGibddSet;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.status</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.license_id</code>.
     */
    public UUID getLicenseId() {
        return this.licenseId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.reg_num</code>.
     */
    public String getRegNum() {
        return this.regNum;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_from1c.transport_type_id</code>.
     */
    public UUID getTransportTypeId() {
        return this.transportTypeId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.model</code>.
     */
    public String getModel() {
        return this.model;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_from1c.online_gibdd_id</code>.
     */
    public Integer getOnlineGibddId() {
        return this.onlineGibddId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.received</code>.
     */
    public Boolean getReceived() {
        return this.received;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.width</code>.
     */
    public Double getWidth() {
        return this.width;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.deleted_by</code>.
     */
    public String getDeletedBy() {
        return this.deletedBy;
    }

    /**
     * Getter for
     * <code>public.smartexam_transport_from1c.base_garbage_container_id</code>.
     */
    public UUID getBaseGarbageContainerId() {
        return this.baseGarbageContainerId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.update_ts</code>.
     */
    public LocalDateTime getUpdateTs() {
        return this.updateTs;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.gps_id</code>.
     */
    public String getGpsId() {
        return this.gpsId;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.version</code>.
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.create_ts</code>.
     */
    public LocalDateTime getCreateTs() {
        return this.createTs;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.kafka_key</code>.
     */
    public String getKafkaKey() {
        return this.kafkaKey;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.height</code>.
     */
    public Double getHeight() {
        return this.height;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c._long</code>.
     */
    public Double get_Long() {
        return this._Long;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.consumption</code>.
     */
    public Double getConsumption() {
        return this.consumption;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.updated_by</code>.
     */
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.delete_ts</code>.
     */
    public LocalDateTime getDeleteTs() {
        return this.deleteTs;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.created_by</code>.
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Getter for <code>public.smartexam_transport_from1c.gps_system</code>.
     */
    public String getGpsSystem() {
        return this.gpsSystem;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SmartexamTransportFrom1c (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(createYear);
        sb.append(", ").append(vin);
        sb.append(", ").append(organizationId);
        sb.append(", ").append(costsOrganizationId);
        sb.append(", ").append(lizing);
        sb.append(", ").append(dateGibddSet);
        sb.append(", ").append(status);
        sb.append(", ").append(licenseId);
        sb.append(", ").append(regNum);
        sb.append(", ").append(transportTypeId);
        sb.append(", ").append(model);
        sb.append(", ").append(onlineGibddId);
        sb.append(", ").append(received);
        sb.append(", ").append(width);
        sb.append(", ").append(deletedBy);
        sb.append(", ").append(baseGarbageContainerId);
        sb.append(", ").append(updateTs);
        sb.append(", ").append(gpsId);
        sb.append(", ").append(version);
        sb.append(", ").append(createTs);
        sb.append(", ").append(kafkaKey);
        sb.append(", ").append(height);
        sb.append(", ").append(_Long);
        sb.append(", ").append(consumption);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(deleteTs);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(gpsSystem);

        sb.append(")");
        return sb.toString();
    }
}
