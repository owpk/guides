/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamPositionsRolesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamPositionsRoles extends TableImpl<SmartexamPositionsRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_positions_roles</code>
     */
    public static final SmartexamPositionsRoles SMARTEXAM_POSITIONS_ROLES = new SmartexamPositionsRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamPositionsRolesRecord> getRecordType() {
        return SmartexamPositionsRolesRecord.class;
    }

    /**
     * The column <code>public.smartexam_positions_roles.position_id</code>.
     */
    public final TableField<SmartexamPositionsRolesRecord, UUID> POSITION_ID = createField(DSL.name("position_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_positions_roles.role_id</code>.
     */
    public final TableField<SmartexamPositionsRolesRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.UUID.nullable(false), this, "");

    private SmartexamPositionsRoles(Name alias, Table<SmartexamPositionsRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamPositionsRoles(Name alias, Table<SmartexamPositionsRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_positions_roles</code> table
     * reference
     */
    public SmartexamPositionsRoles(String alias) {
        this(DSL.name(alias), SMARTEXAM_POSITIONS_ROLES);
    }

    /**
     * Create an aliased <code>public.smartexam_positions_roles</code> table
     * reference
     */
    public SmartexamPositionsRoles(Name alias) {
        this(alias, SMARTEXAM_POSITIONS_ROLES);
    }

    /**
     * Create a <code>public.smartexam_positions_roles</code> table reference
     */
    public SmartexamPositionsRoles() {
        this(DSL.name("smartexam_positions_roles"), null);
    }

    public <O extends Record> SmartexamPositionsRoles(Table<O> child, ForeignKey<O, SmartexamPositionsRolesRecord> key) {
        super(child, key, SMARTEXAM_POSITIONS_ROLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SmartexamPositionsRolesRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_POSITIONS_ROLES_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamPositionsRolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_POSITIONS, Keys.SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_ROLE);
    }

    private transient SmartexamPositions _smartexamPositions;
    private transient SecRole _secRole;

    public SmartexamPositions smartexamPositions() {
        if (_smartexamPositions == null)
            _smartexamPositions = new SmartexamPositions(this, Keys.SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_POSITIONS);

        return _smartexamPositions;
    }

    public SecRole secRole() {
        if (_secRole == null)
            _secRole = new SecRole(this, Keys.SMARTEXAM_POSITIONS_ROLES__FK_POSROL_ON_ROLE);

        return _secRole;
    }

    @Override
    public SmartexamPositionsRoles as(String alias) {
        return new SmartexamPositionsRoles(DSL.name(alias), this);
    }

    @Override
    public SmartexamPositionsRoles as(Name alias) {
        return new SmartexamPositionsRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamPositionsRoles rename(String name) {
        return new SmartexamPositionsRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamPositionsRoles rename(Name name) {
        return new SmartexamPositionsRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
