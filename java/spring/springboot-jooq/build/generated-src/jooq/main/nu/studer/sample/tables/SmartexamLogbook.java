/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamLogbookRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamLogbook extends TableImpl<SmartexamLogbookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_logbook</code>
     */
    public static final SmartexamLogbook SMARTEXAM_LOGBOOK = new SmartexamLogbook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamLogbookRecord> getRecordType() {
        return SmartexamLogbookRecord.class;
    }

    /**
     * The column <code>public.smartexam_logbook.id</code>.
     */
    public final TableField<SmartexamLogbookRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_logbook.version</code>.
     */
    public final TableField<SmartexamLogbookRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_logbook.create_ts</code>.
     */
    public final TableField<SmartexamLogbookRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_logbook.created_by</code>.
     */
    public final TableField<SmartexamLogbookRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_logbook.update_ts</code>.
     */
    public final TableField<SmartexamLogbookRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_logbook.updated_by</code>.
     */
    public final TableField<SmartexamLogbookRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_logbook.delete_ts</code>.
     */
    public final TableField<SmartexamLogbookRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_logbook.deleted_by</code>.
     */
    public final TableField<SmartexamLogbookRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_logbook.employee_id</code>.
     */
    public final TableField<SmartexamLogbookRecord, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_logbook.text</code>.
     */
    public final TableField<SmartexamLogbookRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_logbook.status</code>.
     */
    public final TableField<SmartexamLogbookRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartexam_logbook.comment_</code>.
     */
    public final TableField<SmartexamLogbookRecord, String> COMMENT_ = createField(DSL.name("comment_"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_logbook.responsible_id</code>.
     */
    public final TableField<SmartexamLogbookRecord, UUID> RESPONSIBLE_ID = createField(DSL.name("responsible_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.smartexam_logbook.problems</code>.
     */
    public final TableField<SmartexamLogbookRecord, Boolean> PROBLEMS = createField(DSL.name("problems"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_logbook.transport_id</code>.
     */
    public final TableField<SmartexamLogbookRecord, UUID> TRANSPORT_ID = createField(DSL.name("transport_id"), SQLDataType.UUID, this, "");

    private SmartexamLogbook(Name alias, Table<SmartexamLogbookRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamLogbook(Name alias, Table<SmartexamLogbookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_logbook</code> table reference
     */
    public SmartexamLogbook(String alias) {
        this(DSL.name(alias), SMARTEXAM_LOGBOOK);
    }

    /**
     * Create an aliased <code>public.smartexam_logbook</code> table reference
     */
    public SmartexamLogbook(Name alias) {
        this(alias, SMARTEXAM_LOGBOOK);
    }

    /**
     * Create a <code>public.smartexam_logbook</code> table reference
     */
    public SmartexamLogbook() {
        this(DSL.name("smartexam_logbook"), null);
    }

    public <O extends Record> SmartexamLogbook(Table<O> child, ForeignKey<O, SmartexamLogbookRecord> key) {
        super(child, key, SMARTEXAM_LOGBOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_LOGBOOK_ON_EMPLOYEE, Indexes.IDX_SMARTEXAM_LOGBOOK_ON_RESPONSIBLE, Indexes.IDX_SMARTEXAM_LOGBOOK_ON_TRANSPORT);
    }

    @Override
    public UniqueKey<SmartexamLogbookRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_LOGBOOK_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamLogbookRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_EMPLOYEE, Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_RESPONSIBLE, Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_TRANSPORT);
    }

    private transient SmartexamEmployee _fkSmartexamLogbookOnEmployee;
    private transient SmartexamEmployee _fkSmartexamLogbookOnResponsible;
    private transient SmartmonTransport _smartmonTransport;

    public SmartexamEmployee fkSmartexamLogbookOnEmployee() {
        if (_fkSmartexamLogbookOnEmployee == null)
            _fkSmartexamLogbookOnEmployee = new SmartexamEmployee(this, Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_EMPLOYEE);

        return _fkSmartexamLogbookOnEmployee;
    }

    public SmartexamEmployee fkSmartexamLogbookOnResponsible() {
        if (_fkSmartexamLogbookOnResponsible == null)
            _fkSmartexamLogbookOnResponsible = new SmartexamEmployee(this, Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_RESPONSIBLE);

        return _fkSmartexamLogbookOnResponsible;
    }

    public SmartmonTransport smartmonTransport() {
        if (_smartmonTransport == null)
            _smartmonTransport = new SmartmonTransport(this, Keys.SMARTEXAM_LOGBOOK__FK_SMARTEXAM_LOGBOOK_ON_TRANSPORT);

        return _smartmonTransport;
    }

    @Override
    public SmartexamLogbook as(String alias) {
        return new SmartexamLogbook(DSL.name(alias), this);
    }

    @Override
    public SmartexamLogbook as(Name alias) {
        return new SmartexamLogbook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLogbook rename(String name) {
        return new SmartexamLogbook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamLogbook rename(Name name) {
        return new SmartexamLogbook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, UUID, String, Integer, String, UUID, Boolean, UUID> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
