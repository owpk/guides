/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamOrganizationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamOrganization extends TableImpl<SmartexamOrganizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.smartexam_organization</code>
     */
    public static final SmartexamOrganization SMARTEXAM_ORGANIZATION = new SmartexamOrganization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamOrganizationRecord> getRecordType() {
        return SmartexamOrganizationRecord.class;
    }

    /**
     * The column <code>public.smartexam_organization.id</code>.
     */
    public final TableField<SmartexamOrganizationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_organization.version</code>.
     */
    public final TableField<SmartexamOrganizationRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_organization.create_ts</code>.
     */
    public final TableField<SmartexamOrganizationRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_organization.created_by</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_organization.update_ts</code>.
     */
    public final TableField<SmartexamOrganizationRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_organization.updated_by</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_organization.delete_ts</code>.
     */
    public final TableField<SmartexamOrganizationRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_organization.deleted_by</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_organization.name</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_organization.full_name</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_organization.online_gibdd_id</code>.
     */
    public final TableField<SmartexamOrganizationRecord, Integer> ONLINE_GIBDD_ID = createField(DSL.name("online_gibdd_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.smartexam_organization.code</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_organization.received</code>.
     */
    public final TableField<SmartexamOrganizationRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_organization.kafka_key</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_organization.tax_code</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> TAX_CODE = createField(DSL.name("tax_code"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.smartexam_organization.tax_number</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> TAX_NUMBER = createField(DSL.name("tax_number"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_organization.comment_</code>.
     */
    public final TableField<SmartexamOrganizationRecord, String> COMMENT_ = createField(DSL.name("comment_"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.smartexam_organization.head_person</code>.
     */
    public final TableField<SmartexamOrganizationRecord, UUID> HEAD_PERSON = createField(DSL.name("head_person"), SQLDataType.UUID, this, "");

    private SmartexamOrganization(Name alias, Table<SmartexamOrganizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamOrganization(Name alias, Table<SmartexamOrganizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_organization</code> table
     * reference
     */
    public SmartexamOrganization(String alias) {
        this(DSL.name(alias), SMARTEXAM_ORGANIZATION);
    }

    /**
     * Create an aliased <code>public.smartexam_organization</code> table
     * reference
     */
    public SmartexamOrganization(Name alias) {
        this(alias, SMARTEXAM_ORGANIZATION);
    }

    /**
     * Create a <code>public.smartexam_organization</code> table reference
     */
    public SmartexamOrganization() {
        this(DSL.name("smartexam_organization"), null);
    }

    public <O extends Record> SmartexamOrganization(Table<O> child, ForeignKey<O, SmartexamOrganizationRecord> key) {
        super(child, key, SMARTEXAM_ORGANIZATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_ORGANIZATION_ON_HEAD_PERSON, Indexes.IDX_SMARTEXAM_ORGANIZATION_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamOrganizationRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_ORGANIZATION_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamOrganizationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_ORGANIZATION__FK_SMARTEXAM_ORGANIZATION_ON_HEAD_PERSON);
    }

    private transient CompanyaddonBaseEmployee _companyaddonBaseEmployee;

    public CompanyaddonBaseEmployee companyaddonBaseEmployee() {
        if (_companyaddonBaseEmployee == null)
            _companyaddonBaseEmployee = new CompanyaddonBaseEmployee(this, Keys.SMARTEXAM_ORGANIZATION__FK_SMARTEXAM_ORGANIZATION_ON_HEAD_PERSON);

        return _companyaddonBaseEmployee;
    }

    @Override
    public SmartexamOrganization as(String alias) {
        return new SmartexamOrganization(DSL.name(alias), this);
    }

    @Override
    public SmartexamOrganization as(Name alias) {
        return new SmartexamOrganization(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamOrganization rename(String name) {
        return new SmartexamOrganization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamOrganization rename(Name name) {
        return new SmartexamOrganization(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<UUID, Integer, LocalDateTime, String, LocalDateTime, String, LocalDateTime, String, String, String, Integer, String, Boolean, String, String, String, String, UUID> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
