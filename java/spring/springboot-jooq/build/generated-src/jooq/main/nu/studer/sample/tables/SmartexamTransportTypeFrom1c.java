/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.SmartexamTransportTypeFrom1cRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmartexamTransportTypeFrom1c extends TableImpl<SmartexamTransportTypeFrom1cRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.smartexam_transport_type_from1c</code>
     */
    public static final SmartexamTransportTypeFrom1c SMARTEXAM_TRANSPORT_TYPE_FROM1C = new SmartexamTransportTypeFrom1c();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmartexamTransportTypeFrom1cRecord> getRecordType() {
        return SmartexamTransportTypeFrom1cRecord.class;
    }

    /**
     * The column <code>public.smartexam_transport_type_from1c.id</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.name</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.parent_id</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.smartexam_transport_type_from1c.mileage_for_to</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, Long> MILEAGE_FOR_TO = createField(DSL.name("mileage_for_to"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.smartexam_transport_type_from1c.registry_sheet_name</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> REGISTRY_SHEET_NAME = createField(DSL.name("registry_sheet_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.received</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, Boolean> RECEIVED = createField(DSL.name("received"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.kafka_key</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> KAFKA_KEY = createField(DSL.name("kafka_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_type_from1c.deleted_by</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.update_ts</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, LocalDateTime> UPDATE_TS = createField(DSL.name("update_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.delete_ts</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, LocalDateTime> DELETE_TS = createField(DSL.name("delete_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_type_from1c.updated_by</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.smartexam_transport_type_from1c.created_by</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.create_ts</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, LocalDateTime> CREATE_TS = createField(DSL.name("create_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.smartexam_transport_type_from1c.version</code>.
     */
    public final TableField<SmartexamTransportTypeFrom1cRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    private SmartexamTransportTypeFrom1c(Name alias, Table<SmartexamTransportTypeFrom1cRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmartexamTransportTypeFrom1c(Name alias, Table<SmartexamTransportTypeFrom1cRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.smartexam_transport_type_from1c</code>
     * table reference
     */
    public SmartexamTransportTypeFrom1c(String alias) {
        this(DSL.name(alias), SMARTEXAM_TRANSPORT_TYPE_FROM1C);
    }

    /**
     * Create an aliased <code>public.smartexam_transport_type_from1c</code>
     * table reference
     */
    public SmartexamTransportTypeFrom1c(Name alias) {
        this(alias, SMARTEXAM_TRANSPORT_TYPE_FROM1C);
    }

    /**
     * Create a <code>public.smartexam_transport_type_from1c</code> table
     * reference
     */
    public SmartexamTransportTypeFrom1c() {
        this(DSL.name("smartexam_transport_type_from1c"), null);
    }

    public <O extends Record> SmartexamTransportTypeFrom1c(Table<O> child, ForeignKey<O, SmartexamTransportTypeFrom1cRecord> key) {
        super(child, key, SMARTEXAM_TRANSPORT_TYPE_FROM1C);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SMARTEXAM_TRANSPORT_TYPE_FROM1C_ON_PARENT, Indexes.IDX_SMARTEXAM_TRANSPORT_TYPE_FROM1C_UK_KAFKA_KEY);
    }

    @Override
    public UniqueKey<SmartexamTransportTypeFrom1cRecord> getPrimaryKey() {
        return Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C_PKEY;
    }

    @Override
    public List<ForeignKey<SmartexamTransportTypeFrom1cRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C__FK_SMARTEXAM_TRANSPORT_TYPE_FROM1C_ON_PARENT);
    }

    private transient SmartexamTransportTypeFrom1c _smartexamTransportTypeFrom1c;

    public SmartexamTransportTypeFrom1c smartexamTransportTypeFrom1c() {
        if (_smartexamTransportTypeFrom1c == null)
            _smartexamTransportTypeFrom1c = new SmartexamTransportTypeFrom1c(this, Keys.SMARTEXAM_TRANSPORT_TYPE_FROM1C__FK_SMARTEXAM_TRANSPORT_TYPE_FROM1C_ON_PARENT);

        return _smartexamTransportTypeFrom1c;
    }

    @Override
    public SmartexamTransportTypeFrom1c as(String alias) {
        return new SmartexamTransportTypeFrom1c(DSL.name(alias), this);
    }

    @Override
    public SmartexamTransportTypeFrom1c as(Name alias) {
        return new SmartexamTransportTypeFrom1c(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportTypeFrom1c rename(String name) {
        return new SmartexamTransportTypeFrom1c(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmartexamTransportTypeFrom1c rename(Name name) {
        return new SmartexamTransportTypeFrom1c(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, String, UUID, Long, String, Boolean, String, String, LocalDateTime, LocalDateTime, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
